"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[337],{8175:(t,s,e)=>{e.r(s),e.d(s,{assets:()=>r,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>p,toc:()=>c});var l=e(5250),n=e(4012);const a={sidebar_position:4},o="Styled",p={id:"styled",title:"Styled",description:"This package provides the styled() function. You can call it using a pdf- tag name or your own component that passes through the style prop onto a pdf- element.",source:"@site/docs/styled.mdx",sourceDirName:".",slug:"/styled",permalink:"/react-pdfmake-reconciler/docs/styled",draft:!1,unlisted:!1,editUrl:"https://github.com/danvim/react-pdfmake-reconciler/tree/master/docs/docs/styled.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"PdfPreview",permalink:"/react-pdfmake-reconciler/docs/jsx/util-components/pdf-preview"},next:{title:"Playground",permalink:"/react-pdfmake-reconciler/docs/playground"}},r={},c=[{value:"Basic usage",id:"basic-usage",level:2},{value:"Theming",id:"theming",level:2}];function i(t){const s={code:"code",div:"div",h1:"h1",h2:"h2",p:"p",...(0,n.a)(),...t.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(s.h1,{id:"styled",children:"Styled"}),"\n",(0,l.jsxs)(s.p,{children:["This package provides the ",(0,l.jsx)(s.code,{children:"styled()"})," function. You can call it using a ",(0,l.jsx)(s.code,{children:"pdf-*"})," tag name or your own component that passes through the ",(0,l.jsx)(s.code,{children:"style"})," prop onto a ",(0,l.jsx)(s.code,{children:"pdf-*"})," element."]}),"\n",(0,l.jsxs)(s.p,{children:["One good use of this API is to provide themeable components using ",(0,l.jsx)(s.code,{children:"ThemeContext"}),"."]}),"\n",(0,l.jsx)(s.h2,{id:"basic-usage",children:"Basic usage"}),"\n",(0,l.jsx)(s.div,{dangerouslySetInnerHTML:{__html:'<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">tsx</div><div class=\'code-container\'><code><div class=\'line\'><span style="color: #008000">/// </span><span style="color: #800000">&lt;reference</span><span style="color: #008000"> </span><span style="color: #FF0000">types</span><span style="color: #000000">=</span><span style="color: #A31515">"react-pdfmake-reconciler/react-jsx"</span><span style="color: #008000"> </span><span style="color: #800000">/&gt;</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #AF00DB">import</span><span style="color: #000000"> { </span><span style="color: #001080"><data-lsp lsp=\'(alias) type FC&lt;P = {}> = FunctionComponent&lt;P>&#10;import FC\' >FC</data-lsp></span><span style="color: #000000">, </span><span style="color: #001080"><data-lsp lsp=\'(alias) type ReactNode = string | number | boolean | ReactElement&lt;any, string | JSXElementConstructor&lt;any>> | Iterable&lt;ReactNode> | ReactPortal | null | undefined&#10;import ReactNode\' >ReactNode</data-lsp></span><span style="color: #000000"> } </span><span style="color: #AF00DB">from</span><span style="color: #000000"> </span><span style="color: #A31515">"react"</span><span style="color: #000000">;</span></div><div class=\'line\'><span style="color: #AF00DB">import</span><span style="color: #000000"> { </span><span style="color: #001080"><data-lsp lsp=\'(alias) const styled: StyledFunction&#10;import styled\' >styled</data-lsp></span><span style="color: #000000"> } </span><span style="color: #AF00DB">from</span><span style="color: #000000"> </span><span style="color: #A31515">"react-pdfmake-reconciler"</span><span style="color: #000000">;</span></div><div class=\'line\'><span style="color: #AF00DB">import</span><span style="color: #000000"> { </span><span style="color: #001080"><data-lsp lsp=\'Applies one or more styles.&#10;&#10;- A string references a named style from &#10;{@link &#10;TDocumentDefinitions.styles&#10;}&#10;&#10;- An object sets the given style properties&#10;- An array of strings or objects applies the styles in the given order,&#10;  later styles overriding properties from the earlier ones&#10;&#10;Styles defined this way can be overridden by the &#10;{@link &#10;Style&#10;}&#10; properties on an element itself.&#10;&#10;(alias) type StyleReference = string | Style | (string | Style)[]&#10;import StyleReference\' >StyleReference</data-lsp></span><span style="color: #000000"> } </span><span style="color: #AF00DB">from</span><span style="color: #000000"> </span><span style="color: #A31515">"pdfmake/interfaces"</span><span style="color: #000000">;</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp=\'const Text: React.ComponentType&lt;PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>>\' >Text</data-lsp></span><span style="color: #000000"> = </span><span style="color: #795E26"><data-lsp lsp=\'(alias) styled&lt;"pdf-text">(tag: "pdf-text"): Tagged&lt;PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;...>>> (+1 overload)&#10;import styled\' >styled</data-lsp></span><span style="color: #000000">(</span><span style="color: #A31515">"pdf-text"</span><span style="color: #000000">)({</span></div><div class=\'line\'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp=\'Text color.&#10;&#10;Supports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.&#10;&#10;Defaults to `black`.&#10;&#10;(property) Style.color?: string | undefined\' >color</data-lsp>:</span><span style="color: #000000"> </span><span style="color: #A31515">"#f00"</span><span style="color: #000000">,</span></div><div class=\'line\'><span style="color: #000000">});</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #008000">// Define additional props for styling.</span></div><div class=\'line\'><span style="color: #008000">// isSuccess can leak into pdfmake output structure here</span></div><div class=\'line\'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp=\'const StatusText: React.ComponentType&lt;PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">> &amp; {&#10;    ...;&#10;}>\' >StatusText</data-lsp></span><span style="color: #000000"> = </span><span style="color: #795E26"><data-lsp lsp=\'(alias) styled&lt;PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>>(tag: React.ComponentType&lt;...>): Tagged&lt;...> (+1 overload)&#10;import styled\' >styled</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp=\'const Text: React.ComponentType&lt;PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>>\' >Text</data-lsp></span><span style="color: #000000">)&lt;{ </span><span style="color: #001080"><data-lsp lsp=\'(property) isSuccess: boolean\' >isSuccess</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">boolean</span><span style="color: #000000"> }&gt;((</span><span style="color: #001080"><data-lsp lsp=\'(parameter) props: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">> &amp; {&#10;    ...;&#10;}\' >props</data-lsp></span><span style="color: #000000">) </span><span style="color: #0000FF">=&gt;</span><span style="color: #000000"> ({</span></div><div class=\'line\'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp=\'Text color.&#10;&#10;Supports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.&#10;&#10;Defaults to `black`.&#10;&#10;(property) Style.color?: string | undefined\' >color</data-lsp>:</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp=\'(parameter) props: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">> &amp; {&#10;    ...;&#10;}\' >props</data-lsp></span><span style="color: #000000">.</span><span style="color: #001080"><data-lsp lsp=\'(property) isSuccess: boolean\' >isSuccess</data-lsp></span><span style="color: #000000"> ? </span><span style="color: #A31515">"#0f0"</span><span style="color: #000000"> : </span><span style="color: #A31515">"#f00"</span><span style="color: #000000">,</span></div><div class=\'line\'><span style="color: #000000">}));</span></div><div class=\'line\'><span style="color: #008000">// Set display name for styled components to find them easily in React Dev Tools</span></div><div class=\'line\'><span style="color: #001080"><data-lsp lsp=\'const StatusText: React.ComponentType&lt;PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">> &amp; {&#10;    ...;&#10;}>\' >StatusText</data-lsp></span><span style="color: #000000">.</span><span style="color: #001080"><data-lsp lsp=\'(property) displayName?: string | undefined\' >displayName</data-lsp></span><span style="color: #000000"> = </span><span style="color: #A31515">"StatusText"</span><span style="color: #000000">;</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #008000">// When the underlying component controls what props goes into the vDOM,</span></div><div class=\'line\'><span style="color: #008000">// it can prevent styled props from polluting the output.</span></div><div class=\'line\'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp=\'const SafeText: React.FC&lt;{&#10;    style?: StyleReference | undefined;&#10;    children?: ReactNode;&#10;}>\' >SafeText</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp=\'(alias) type FC&lt;P = {}> = FunctionComponent&lt;P>&#10;import FC\' >FC</data-lsp></span><span style="color: #000000">&lt;{ </span><span style="color: #001080"><data-lsp lsp=\'(property) style?: StyleReference | undefined\' >style</data-lsp></span><span style="color: #000000">?: </span><span style="color: #267F99"><data-lsp lsp=\'Applies one or more styles.&#10;&#10;- A string references a named style from &#10;{@link &#10;TDocumentDefinitions.styles&#10;}&#10;&#10;- An object sets the given style properties&#10;- An array of strings or objects applies the styles in the given order,&#10;  later styles overriding properties from the earlier ones&#10;&#10;Styles defined this way can be overridden by the &#10;{@link &#10;Style&#10;}&#10; properties on an element itself.&#10;&#10;(alias) type StyleReference = string | Style | (string | Style)[]&#10;import StyleReference\' >StyleReference</data-lsp></span><span style="color: #000000">; </span><span style="color: #001080"><data-lsp lsp=\'(property) children?: React.ReactNode\' >children</data-lsp></span><span style="color: #000000">?: </span><span style="color: #267F99"><data-lsp lsp=\'(alias) type ReactNode = string | number | boolean | ReactElement&lt;any, string | JSXElementConstructor&lt;any>> | Iterable&lt;ReactNode> | ReactPortal | null | undefined&#10;import ReactNode\' >ReactNode</data-lsp></span><span style="color: #000000"> }&gt; = ({</span></div><div class=\'line\'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp=\'(parameter) style: StyleReference | undefined\' >style</data-lsp></span><span style="color: #000000">,</span></div><div class=\'line\'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp=\'(parameter) children: React.ReactNode\' >children</data-lsp></span><span style="color: #000000">,</span></div><div class=\'line\'><span style="color: #000000">}) </span><span style="color: #0000FF">=&gt;</span><span style="color: #000000"> </span><span style="color: #800000">&lt;</span><span style="color: #267F99"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >pdf-text</data-lsp></span><span style="color: #000000"> </span><span style="color: #FF0000"><data-lsp lsp=\'(property) style: StyleReference | undefined\' >style</data-lsp></span><span style="color: #000000">=</span><span style="color: #0000FF">{</span><span style="color: #001080"><data-lsp lsp=\'(parameter) style: StyleReference | undefined\' >style</data-lsp></span><span style="color: #0000FF">}</span><span style="color: #800000">&gt;</span><span style="color: #0000FF">{</span><span style="color: #001080"><data-lsp lsp=\'(parameter) children: React.ReactNode\' >children</data-lsp></span><span style="color: #0000FF">}</span><span style="color: #800000">&lt;/</span><span style="color: #267F99"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >pdf-text</data-lsp></span><span style="color: #800000">&gt;</span><span style="color: #000000">;</span></div><div class=\'line\'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp=\'const StyledSafeText: React.ComponentType&lt;{&#10;    style?: StyleReference | undefined;&#10;    children?: ReactNode;&#10;} &amp; {&#10;    isSuccess: boolean;&#10;}>\' >StyledSafeText</data-lsp></span><span style="color: #000000"> = </span><span style="color: #795E26"><data-lsp lsp=\'(alias) styled&lt;{&#10;    style?: StyleReference | undefined;&#10;    children?: ReactNode;&#10;}>(tag: React.ComponentType&lt;{&#10;    style?: StyleReference | undefined;&#10;    children?: ReactNode;&#10;}>): Tagged&lt;{&#10;    style?: StyleReference | undefined;&#10;    children?: ReactNode;&#10;}> (+1 overload)&#10;import styled\' >styled</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp=\'const SafeText: React.FC&lt;{&#10;    style?: StyleReference | undefined;&#10;    children?: ReactNode;&#10;}>\' >SafeText</data-lsp></span><span style="color: #000000">)&lt;{ </span><span style="color: #001080"><data-lsp lsp=\'(property) isSuccess: boolean\' >isSuccess</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">boolean</span><span style="color: #000000"> }&gt;((</span><span style="color: #001080"><data-lsp lsp=\'(parameter) props: {&#10;    style?: StyleReference | undefined;&#10;    children?: ReactNode;&#10;} &amp; {&#10;    isSuccess: boolean;&#10;}\' >props</data-lsp></span><span style="color: #000000">) </span><span style="color: #0000FF">=&gt;</span><span style="color: #000000"> ({</span></div><div class=\'line\'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp=\'Text color.&#10;&#10;Supports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.&#10;&#10;Defaults to `black`.&#10;&#10;(property) Style.color?: string | undefined\' >color</data-lsp>:</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp=\'(parameter) props: {&#10;    style?: StyleReference | undefined;&#10;    children?: ReactNode;&#10;} &amp; {&#10;    isSuccess: boolean;&#10;}\' >props</data-lsp></span><span style="color: #000000">.</span><span style="color: #001080"><data-lsp lsp=\'(property) isSuccess: boolean\' >isSuccess</data-lsp></span><span style="color: #000000"> ? </span><span style="color: #A31515">"#0f0"</span><span style="color: #000000"> : </span><span style="color: #A31515">"#f00"</span><span style="color: #000000">,</span></div><div class=\'line\'><span style="color: #000000">}));</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp=\'const pdfNode: React.JSX.Element\' >pdfNode</data-lsp></span><span style="color: #000000"> = (</span></div><div class=\'line\'><span style="color: #000000">  </span><span style="color: #800000">&lt;&gt;</span></div><div class=\'line\'><span style="color: #000000">    </span><span style="color: #800000">&lt;</span><span style="color: #267F99"><data-lsp lsp=\'const Text: React.ComponentType&lt;PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>>\' >Text</data-lsp></span><span style="color: #800000">&gt;</span><span style="color: #000000">Hello</span><span style="color: #800000">&lt;/</span><span style="color: #267F99"><data-lsp lsp=\'const Text: React.ComponentType&lt;PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>>\' >Text</data-lsp></span><span style="color: #800000">&gt;</span></div><div class=\'line\'><span style="color: #000000">    </span><span style="color: #800000">&lt;</span><span style="color: #267F99"><data-lsp lsp=\'const StatusText: React.ComponentType&lt;PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">> &amp; {&#10;    ...;&#10;}>\' >StatusText</data-lsp></span><span style="color: #000000"> </span><span style="color: #FF0000"><data-lsp lsp=\'(property) isSuccess: true\' >isSuccess</data-lsp></span><span style="color: #800000">&gt;</span><span style="color: #000000">World!</span><span style="color: #800000">&lt;/</span><span style="color: #267F99"><data-lsp lsp=\'const StatusText: React.ComponentType&lt;PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">> &amp; {&#10;    ...;&#10;}>\' >StatusText</data-lsp></span><span style="color: #800000">&gt;</span></div><div class=\'line\'><span style="color: #000000">    </span><span style="color: #800000">&lt;</span><span style="color: #267F99"><data-lsp lsp=\'const StyledSafeText: React.ComponentType&lt;{&#10;    style?: StyleReference | undefined;&#10;    children?: ReactNode;&#10;} &amp; {&#10;    isSuccess: boolean;&#10;}>\' >StyledSafeText</data-lsp></span><span style="color: #000000"> </span><span style="color: #FF0000"><data-lsp lsp=\'(property) isSuccess: boolean\' >isSuccess</data-lsp></span><span style="color: #800000">&gt;</span><span style="color: #000000">World!</span><span style="color: #800000">&lt;/</span><span style="color: #267F99"><data-lsp lsp=\'const StyledSafeText: React.ComponentType&lt;{&#10;    style?: StyleReference | undefined;&#10;    children?: ReactNode;&#10;} &amp; {&#10;    isSuccess: boolean;&#10;}>\' >StyledSafeText</data-lsp></span><span style="color: #800000">&gt;</span></div><div class=\'line\'><span style="color: #000000">  </span><span style="color: #800000">&lt;/&gt;</span></div><div class=\'line\'><span style="color: #000000">);</span></div></code></div></pre>\n<pre class="shiki dark-plus twoslash lsp" style="background-color: #1E1E1E; color: #D4D4D4"><div class="language-id">tsx</div><div class=\'code-container\'><code><div class=\'line\'><span style="color: #6A9955">/// </span><span style="color: #808080">&lt;</span><span style="color: #569CD6">reference</span><span style="color: #6A9955"> </span><span style="color: #9CDCFE">types</span><span style="color: #D4D4D4">=</span><span style="color: #CE9178">"react-pdfmake-reconciler/react-jsx"</span><span style="color: #6A9955"> </span><span style="color: #808080">/&gt;</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> { </span><span style="color: #9CDCFE"><data-lsp lsp=\'(alias) type FC&lt;P = {}> = FunctionComponent&lt;P>&#10;import FC\' >FC</data-lsp></span><span style="color: #D4D4D4">, </span><span style="color: #9CDCFE"><data-lsp lsp=\'(alias) type ReactNode = string | number | boolean | ReactElement&lt;any, string | JSXElementConstructor&lt;any>> | Iterable&lt;ReactNode> | ReactPortal | null | undefined&#10;import ReactNode\' >ReactNode</data-lsp></span><span style="color: #D4D4D4"> } </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">"react"</span><span style="color: #D4D4D4">;</span></div><div class=\'line\'><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> { </span><span style="color: #9CDCFE"><data-lsp lsp=\'(alias) const styled: StyledFunction&#10;import styled\' >styled</data-lsp></span><span style="color: #D4D4D4"> } </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">"react-pdfmake-reconciler"</span><span style="color: #D4D4D4">;</span></div><div class=\'line\'><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> { </span><span style="color: #9CDCFE"><data-lsp lsp=\'Applies one or more styles.&#10;&#10;- A string references a named style from &#10;{@link &#10;TDocumentDefinitions.styles&#10;}&#10;&#10;- An object sets the given style properties&#10;- An array of strings or objects applies the styles in the given order,&#10;  later styles overriding properties from the earlier ones&#10;&#10;Styles defined this way can be overridden by the &#10;{@link &#10;Style&#10;}&#10; properties on an element itself.&#10;&#10;(alias) type StyleReference = string | Style | (string | Style)[]&#10;import StyleReference\' >StyleReference</data-lsp></span><span style="color: #D4D4D4"> } </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">"pdfmake/interfaces"</span><span style="color: #D4D4D4">;</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #4FC1FF"><data-lsp lsp=\'const Text: React.ComponentType&lt;PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>>\' >Text</data-lsp></span><span style="color: #D4D4D4"> = </span><span style="color: #DCDCAA"><data-lsp lsp=\'(alias) styled&lt;"pdf-text">(tag: "pdf-text"): Tagged&lt;PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;...>>> (+1 overload)&#10;import styled\' >styled</data-lsp></span><span style="color: #D4D4D4">(</span><span style="color: #CE9178">"pdf-text"</span><span style="color: #D4D4D4">)({</span></div><div class=\'line\'><span style="color: #D4D4D4">  </span><span style="color: #9CDCFE"><data-lsp lsp=\'Text color.&#10;&#10;Supports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.&#10;&#10;Defaults to `black`.&#10;&#10;(property) Style.color?: string | undefined\' >color</data-lsp>:</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">"#f00"</span><span style="color: #D4D4D4">,</span></div><div class=\'line\'><span style="color: #D4D4D4">});</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #6A9955">// Define additional props for styling.</span></div><div class=\'line\'><span style="color: #6A9955">// isSuccess can leak into pdfmake output structure here</span></div><div class=\'line\'><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #4FC1FF"><data-lsp lsp=\'const StatusText: React.ComponentType&lt;PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">> &amp; {&#10;    ...;&#10;}>\' >StatusText</data-lsp></span><span style="color: #D4D4D4"> = </span><span style="color: #DCDCAA"><data-lsp lsp=\'(alias) styled&lt;PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>>(tag: React.ComponentType&lt;...>): Tagged&lt;...> (+1 overload)&#10;import styled\' >styled</data-lsp></span><span style="color: #D4D4D4">(</span><span style="color: #9CDCFE"><data-lsp lsp=\'const Text: React.ComponentType&lt;PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>>\' >Text</data-lsp></span><span style="color: #D4D4D4">)&lt;{ </span><span style="color: #9CDCFE"><data-lsp lsp=\'(property) isSuccess: boolean\' >isSuccess</data-lsp></span><span style="color: #D4D4D4">: </span><span style="color: #4EC9B0">boolean</span><span style="color: #D4D4D4"> }&gt;((</span><span style="color: #9CDCFE"><data-lsp lsp=\'(parameter) props: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">> &amp; {&#10;    ...;&#10;}\' >props</data-lsp></span><span style="color: #D4D4D4">) </span><span style="color: #569CD6">=&gt;</span><span style="color: #D4D4D4"> ({</span></div><div class=\'line\'><span style="color: #D4D4D4">  </span><span style="color: #9CDCFE"><data-lsp lsp=\'Text color.&#10;&#10;Supports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.&#10;&#10;Defaults to `black`.&#10;&#10;(property) Style.color?: string | undefined\' >color</data-lsp>:</span><span style="color: #D4D4D4"> </span><span style="color: #9CDCFE"><data-lsp lsp=\'(parameter) props: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">> &amp; {&#10;    ...;&#10;}\' >props</data-lsp></span><span style="color: #D4D4D4">.</span><span style="color: #9CDCFE"><data-lsp lsp=\'(property) isSuccess: boolean\' >isSuccess</data-lsp></span><span style="color: #D4D4D4"> ? </span><span style="color: #CE9178">"#0f0"</span><span style="color: #D4D4D4"> : </span><span style="color: #CE9178">"#f00"</span><span style="color: #D4D4D4">,</span></div><div class=\'line\'><span style="color: #D4D4D4">}));</span></div><div class=\'line\'><span style="color: #6A9955">// Set display name for styled components to find them easily in React Dev Tools</span></div><div class=\'line\'><span style="color: #9CDCFE"><data-lsp lsp=\'const StatusText: React.ComponentType&lt;PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">> &amp; {&#10;    ...;&#10;}>\' >StatusText</data-lsp></span><span style="color: #D4D4D4">.</span><span style="color: #9CDCFE"><data-lsp lsp=\'(property) displayName?: string | undefined\' >displayName</data-lsp></span><span style="color: #D4D4D4"> = </span><span style="color: #CE9178">"StatusText"</span><span style="color: #D4D4D4">;</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #6A9955">// When the underlying component controls what props goes into the vDOM,</span></div><div class=\'line\'><span style="color: #6A9955">// it can prevent styled props from polluting the output.</span></div><div class=\'line\'><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #DCDCAA"><data-lsp lsp=\'const SafeText: React.FC&lt;{&#10;    style?: StyleReference | undefined;&#10;    children?: ReactNode;&#10;}>\' >SafeText</data-lsp></span><span style="color: #D4D4D4">: </span><span style="color: #4EC9B0"><data-lsp lsp=\'(alias) type FC&lt;P = {}> = FunctionComponent&lt;P>&#10;import FC\' >FC</data-lsp></span><span style="color: #D4D4D4">&lt;{ </span><span style="color: #9CDCFE"><data-lsp lsp=\'(property) style?: StyleReference | undefined\' >style</data-lsp></span><span style="color: #D4D4D4">?: </span><span style="color: #4EC9B0"><data-lsp lsp=\'Applies one or more styles.&#10;&#10;- A string references a named style from &#10;{@link &#10;TDocumentDefinitions.styles&#10;}&#10;&#10;- An object sets the given style properties&#10;- An array of strings or objects applies the styles in the given order,&#10;  later styles overriding properties from the earlier ones&#10;&#10;Styles defined this way can be overridden by the &#10;{@link &#10;Style&#10;}&#10; properties on an element itself.&#10;&#10;(alias) type StyleReference = string | Style | (string | Style)[]&#10;import StyleReference\' >StyleReference</data-lsp></span><span style="color: #D4D4D4">; </span><span style="color: #9CDCFE"><data-lsp lsp=\'(property) children?: React.ReactNode\' >children</data-lsp></span><span style="color: #D4D4D4">?: </span><span style="color: #4EC9B0"><data-lsp lsp=\'(alias) type ReactNode = string | number | boolean | ReactElement&lt;any, string | JSXElementConstructor&lt;any>> | Iterable&lt;ReactNode> | ReactPortal | null | undefined&#10;import ReactNode\' >ReactNode</data-lsp></span><span style="color: #D4D4D4"> }&gt; = ({</span></div><div class=\'line\'><span style="color: #D4D4D4">  </span><span style="color: #9CDCFE"><data-lsp lsp=\'(parameter) style: StyleReference | undefined\' >style</data-lsp></span><span style="color: #D4D4D4">,</span></div><div class=\'line\'><span style="color: #D4D4D4">  </span><span style="color: #9CDCFE"><data-lsp lsp=\'(parameter) children: React.ReactNode\' >children</data-lsp></span><span style="color: #D4D4D4">,</span></div><div class=\'line\'><span style="color: #D4D4D4">}) </span><span style="color: #569CD6">=&gt;</span><span style="color: #D4D4D4"> </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >pdf-text</data-lsp></span><span style="color: #D4D4D4"> </span><span style="color: #9CDCFE"><data-lsp lsp=\'(property) style: StyleReference | undefined\' >style</data-lsp></span><span style="color: #D4D4D4">=</span><span style="color: #569CD6">{</span><span style="color: #9CDCFE"><data-lsp lsp=\'(parameter) style: StyleReference | undefined\' >style</data-lsp></span><span style="color: #569CD6">}</span><span style="color: #808080">&gt;</span><span style="color: #569CD6">{</span><span style="color: #9CDCFE"><data-lsp lsp=\'(parameter) children: React.ReactNode\' >children</data-lsp></span><span style="color: #569CD6">}</span><span style="color: #808080">&lt;/</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >pdf-text</data-lsp></span><span style="color: #808080">&gt;</span><span style="color: #D4D4D4">;</span></div><div class=\'line\'><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #4FC1FF"><data-lsp lsp=\'const StyledSafeText: React.ComponentType&lt;{&#10;    style?: StyleReference | undefined;&#10;    children?: ReactNode;&#10;} &amp; {&#10;    isSuccess: boolean;&#10;}>\' >StyledSafeText</data-lsp></span><span style="color: #D4D4D4"> = </span><span style="color: #DCDCAA"><data-lsp lsp=\'(alias) styled&lt;{&#10;    style?: StyleReference | undefined;&#10;    children?: ReactNode;&#10;}>(tag: React.ComponentType&lt;{&#10;    style?: StyleReference | undefined;&#10;    children?: ReactNode;&#10;}>): Tagged&lt;{&#10;    style?: StyleReference | undefined;&#10;    children?: ReactNode;&#10;}> (+1 overload)&#10;import styled\' >styled</data-lsp></span><span style="color: #D4D4D4">(</span><span style="color: #9CDCFE"><data-lsp lsp=\'const SafeText: React.FC&lt;{&#10;    style?: StyleReference | undefined;&#10;    children?: ReactNode;&#10;}>\' >SafeText</data-lsp></span><span style="color: #D4D4D4">)&lt;{ </span><span style="color: #9CDCFE"><data-lsp lsp=\'(property) isSuccess: boolean\' >isSuccess</data-lsp></span><span style="color: #D4D4D4">: </span><span style="color: #4EC9B0">boolean</span><span style="color: #D4D4D4"> }&gt;((</span><span style="color: #9CDCFE"><data-lsp lsp=\'(parameter) props: {&#10;    style?: StyleReference | undefined;&#10;    children?: ReactNode;&#10;} &amp; {&#10;    isSuccess: boolean;&#10;}\' >props</data-lsp></span><span style="color: #D4D4D4">) </span><span style="color: #569CD6">=&gt;</span><span style="color: #D4D4D4"> ({</span></div><div class=\'line\'><span style="color: #D4D4D4">  </span><span style="color: #9CDCFE"><data-lsp lsp=\'Text color.&#10;&#10;Supports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.&#10;&#10;Defaults to `black`.&#10;&#10;(property) Style.color?: string | undefined\' >color</data-lsp>:</span><span style="color: #D4D4D4"> </span><span style="color: #9CDCFE"><data-lsp lsp=\'(parameter) props: {&#10;    style?: StyleReference | undefined;&#10;    children?: ReactNode;&#10;} &amp; {&#10;    isSuccess: boolean;&#10;}\' >props</data-lsp></span><span style="color: #D4D4D4">.</span><span style="color: #9CDCFE"><data-lsp lsp=\'(property) isSuccess: boolean\' >isSuccess</data-lsp></span><span style="color: #D4D4D4"> ? </span><span style="color: #CE9178">"#0f0"</span><span style="color: #D4D4D4"> : </span><span style="color: #CE9178">"#f00"</span><span style="color: #D4D4D4">,</span></div><div class=\'line\'><span style="color: #D4D4D4">}));</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #DCDCAA"><data-lsp lsp=\'const pdfNode: React.JSX.Element\' >pdfNode</data-lsp></span><span style="color: #D4D4D4"> = (</span></div><div class=\'line\'><span style="color: #D4D4D4">  </span><span style="color: #808080">&lt;&gt;</span></div><div class=\'line\'><span style="color: #D4D4D4">    </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp=\'const Text: React.ComponentType&lt;PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>>\' >Text</data-lsp></span><span style="color: #808080">&gt;</span><span style="color: #D4D4D4">Hello</span><span style="color: #808080">&lt;/</span><span style="color: #4EC9B0"><data-lsp lsp=\'const Text: React.ComponentType&lt;PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>>\' >Text</data-lsp></span><span style="color: #808080">&gt;</span></div><div class=\'line\'><span style="color: #D4D4D4">    </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp=\'const StatusText: React.ComponentType&lt;PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">> &amp; {&#10;    ...;&#10;}>\' >StatusText</data-lsp></span><span style="color: #D4D4D4"> </span><span style="color: #9CDCFE"><data-lsp lsp=\'(property) isSuccess: true\' >isSuccess</data-lsp></span><span style="color: #808080">&gt;</span><span style="color: #D4D4D4">World!</span><span style="color: #808080">&lt;/</span><span style="color: #4EC9B0"><data-lsp lsp=\'const StatusText: React.ComponentType&lt;PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">> &amp; {&#10;    ...;&#10;}>\' >StatusText</data-lsp></span><span style="color: #808080">&gt;</span></div><div class=\'line\'><span style="color: #D4D4D4">    </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp=\'const StyledSafeText: React.ComponentType&lt;{&#10;    style?: StyleReference | undefined;&#10;    children?: ReactNode;&#10;} &amp; {&#10;    isSuccess: boolean;&#10;}>\' >StyledSafeText</data-lsp></span><span style="color: #D4D4D4"> </span><span style="color: #9CDCFE"><data-lsp lsp=\'(property) isSuccess: boolean\' >isSuccess</data-lsp></span><span style="color: #808080">&gt;</span><span style="color: #D4D4D4">World!</span><span style="color: #808080">&lt;/</span><span style="color: #4EC9B0"><data-lsp lsp=\'const StyledSafeText: React.ComponentType&lt;{&#10;    style?: StyleReference | undefined;&#10;    children?: ReactNode;&#10;} &amp; {&#10;    isSuccess: boolean;&#10;}>\' >StyledSafeText</data-lsp></span><span style="color: #808080">&gt;</span></div><div class=\'line\'><span style="color: #D4D4D4">  </span><span style="color: #808080">&lt;/&gt;</span></div><div class=\'line\'><span style="color: #D4D4D4">);</span></div></code></div></pre>'}}),"\n",(0,l.jsx)(s.h2,{id:"theming",children:"Theming"}),"\n",(0,l.jsxs)(s.p,{children:["Override ",(0,l.jsx)(s.code,{children:"DefaultTheme"})," from the package to provide your own theme structure and access it in the styled function."]}),"\n",(0,l.jsx)(s.div,{dangerouslySetInnerHTML:{__html:'<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">tsx</div><div class=\'code-container\'><code><div class=\'line\'><span style="color: #008000">/// </span><span style="color: #800000">&lt;reference</span><span style="color: #008000"> </span><span style="color: #FF0000">types</span><span style="color: #000000">=</span><span style="color: #A31515">"react-pdfmake-reconciler/react-jsx"</span><span style="color: #008000"> </span><span style="color: #800000">/&gt;</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #AF00DB">import</span><span style="color: #000000"> { </span><span style="color: #001080"><data-lsp lsp=\'(alias) type FC&lt;P = {}> = FunctionComponent&lt;P>&#10;import FC\' >FC</data-lsp></span><span style="color: #000000">, </span><span style="color: #001080"><data-lsp lsp=\'(alias) type ReactNode = string | number | boolean | ReactElement&lt;any, string | JSXElementConstructor&lt;any>> | Iterable&lt;ReactNode> | ReactPortal | null | undefined&#10;import ReactNode\' >ReactNode</data-lsp></span><span style="color: #000000"> } </span><span style="color: #AF00DB">from</span><span style="color: #000000"> </span><span style="color: #A31515">"react"</span><span style="color: #000000">;</span></div><div class=\'line\'><span style="color: #AF00DB">import</span><span style="color: #000000"> { </span><span style="color: #001080"><data-lsp lsp=\'(alias) const styled: StyledFunction&#10;import styled\' >styled</data-lsp></span><span style="color: #000000">, </span><span style="color: #001080"><data-lsp lsp=\'(alias) const ThemeProvider: React.Provider&lt;DefaultTheme>&#10;import ThemeProvider\' >ThemeProvider</data-lsp></span><span style="color: #000000"> } </span><span style="color: #AF00DB">from</span><span style="color: #000000"> </span><span style="color: #A31515">"react-pdfmake-reconciler"</span><span style="color: #000000">;</span></div><div class=\'line\'><span style="color: #AF00DB">import</span><span style="color: #000000"> { </span><span style="color: #001080"><data-lsp lsp=\'Applies one or more styles.&#10;&#10;- A string references a named style from &#10;{@link &#10;TDocumentDefinitions.styles&#10;}&#10;&#10;- An object sets the given style properties&#10;- An array of strings or objects applies the styles in the given order,&#10;  later styles overriding properties from the earlier ones&#10;&#10;Styles defined this way can be overridden by the &#10;{@link &#10;Style&#10;}&#10; properties on an element itself.&#10;&#10;(alias) type StyleReference = string | Style | (string | Style)[]&#10;import StyleReference\' >StyleReference</data-lsp></span><span style="color: #000000"> } </span><span style="color: #AF00DB">from</span><span style="color: #000000"> </span><span style="color: #A31515">"pdfmake/interfaces"</span><span style="color: #000000">;</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #0000FF">declare</span><span style="color: #000000"> </span><span style="color: #0000FF">module</span><span style="color: #000000"> </span><span style="color: #A31515">"react-pdfmake-reconciler"</span><span style="color: #000000"> {</span></div><div class=\'line\'><span style="color: #000000">  </span><span style="color: #0000FF">interface</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp=\'interface DefaultTheme\' >DefaultTheme</data-lsp></span><span style="color: #000000"> {</span></div><div class=\'line\'><span style="color: #000000">    </span><span style="color: #008000">/** My primary color */</span></div><div class=\'line\'><span style="color: #000000">    </span><span style="color: #001080"><data-lsp lsp=\'My primary color&#10;&#10;(property) DefaultTheme.primaryColor: string\' >primaryColor</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">;</span></div><div class=\'line\'><span style="color: #000000">  }</span></div><div class=\'line\'><span style="color: #000000">}</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp=\'const Text: React.ComponentType&lt;PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>>\' >Text</data-lsp></span><span style="color: #000000"> = </span><span style="color: #795E26"><data-lsp lsp=\'(alias) styled&lt;"pdf-text">(tag: "pdf-text"): Tagged&lt;PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;...>>> (+1 overload)&#10;import styled\' >styled</data-lsp></span><span style="color: #000000">(</span><span style="color: #A31515">"pdf-text"</span><span style="color: #000000">)((</span><span style="color: #001080"><data-lsp lsp=\'(parameter) props: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >props</data-lsp></span><span style="color: #000000">, </span><span style="color: #001080"><data-lsp lsp=\'(parameter) theme: DefaultTheme\' >theme</data-lsp></span><span style="color: #000000">) </span><span style="color: #0000FF">=&gt;</span><span style="color: #000000"> ({</span></div><div class=\'line\'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp=\'Text color.&#10;&#10;Supports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.&#10;&#10;Defaults to `black`.&#10;&#10;(property) Style.color?: string | undefined\' >color</data-lsp>:</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp=\'(parameter) theme: DefaultTheme\' >theme</data-lsp></span><span style="color: #000000">.</span><span style="color: #001080"><data-lsp lsp=\'My primary color&#10;&#10;(property) DefaultTheme.primaryColor: string\' >primaryColor</data-lsp></span><span style="color: #000000">,</span></div><div class=\'line\'><span style="color: #000000">}));</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp=\'const pdfNode: React.JSX.Element\' >pdfNode</data-lsp></span><span style="color: #000000"> = (</span></div><div class=\'line\'><span style="color: #000000">  </span><span style="color: #800000">&lt;</span><span style="color: #267F99"><data-lsp lsp=\'(alias) const ThemeProvider: React.Provider&lt;DefaultTheme>&#10;import ThemeProvider\' >ThemeProvider</data-lsp></span></div><div class=\'line\'><span style="color: #000000">    </span><span style="color: #FF0000"><data-lsp lsp=\'(property) React.ProviderProps&lt;DefaultTheme>.value: DefaultTheme\' >value</data-lsp></span><span style="color: #000000">=</span><span style="color: #0000FF">{</span><span style="color: #000000FF">{</span></div><div class=\'line\'><span style="color: #000000FF">      </span><span style="color: #001080"><data-lsp lsp=\'My primary color&#10;&#10;(property) DefaultTheme.primaryColor: string\' >primaryColor</data-lsp>:</span><span style="color: #000000FF"> </span><span style="color: #A31515">"#f00"</span><span style="color: #000000FF">,</span></div><div class=\'line\'><span style="color: #000000FF">    }</span><span style="color: #0000FF">}</span></div><div class=\'line\'><span style="color: #000000">  </span><span style="color: #800000">&gt;</span></div><div class=\'line\'><span style="color: #000000">    </span><span style="color: #800000">&lt;</span><span style="color: #267F99"><data-lsp lsp=\'const Text: React.ComponentType&lt;PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>>\' >Text</data-lsp></span><span style="color: #800000">&gt;</span><span style="color: #000000">Hello</span><span style="color: #800000">&lt;/</span><span style="color: #267F99"><data-lsp lsp=\'const Text: React.ComponentType&lt;PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>>\' >Text</data-lsp></span><span style="color: #800000">&gt;</span></div><div class=\'line\'><span style="color: #000000">  </span><span style="color: #800000">&lt;/</span><span style="color: #267F99"><data-lsp lsp=\'(alias) const ThemeProvider: React.Provider&lt;DefaultTheme>&#10;import ThemeProvider\' >ThemeProvider</data-lsp></span><span style="color: #800000">&gt;</span></div><div class=\'line\'><span style="color: #000000">);</span></div></code></div></pre>\n<pre class="shiki dark-plus twoslash lsp" style="background-color: #1E1E1E; color: #D4D4D4"><div class="language-id">tsx</div><div class=\'code-container\'><code><div class=\'line\'><span style="color: #6A9955">/// </span><span style="color: #808080">&lt;</span><span style="color: #569CD6">reference</span><span style="color: #6A9955"> </span><span style="color: #9CDCFE">types</span><span style="color: #D4D4D4">=</span><span style="color: #CE9178">"react-pdfmake-reconciler/react-jsx"</span><span style="color: #6A9955"> </span><span style="color: #808080">/&gt;</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> { </span><span style="color: #9CDCFE"><data-lsp lsp=\'(alias) type FC&lt;P = {}> = FunctionComponent&lt;P>&#10;import FC\' >FC</data-lsp></span><span style="color: #D4D4D4">, </span><span style="color: #9CDCFE"><data-lsp lsp=\'(alias) type ReactNode = string | number | boolean | ReactElement&lt;any, string | JSXElementConstructor&lt;any>> | Iterable&lt;ReactNode> | ReactPortal | null | undefined&#10;import ReactNode\' >ReactNode</data-lsp></span><span style="color: #D4D4D4"> } </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">"react"</span><span style="color: #D4D4D4">;</span></div><div class=\'line\'><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> { </span><span style="color: #9CDCFE"><data-lsp lsp=\'(alias) const styled: StyledFunction&#10;import styled\' >styled</data-lsp></span><span style="color: #D4D4D4">, </span><span style="color: #9CDCFE"><data-lsp lsp=\'(alias) const ThemeProvider: React.Provider&lt;DefaultTheme>&#10;import ThemeProvider\' >ThemeProvider</data-lsp></span><span style="color: #D4D4D4"> } </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">"react-pdfmake-reconciler"</span><span style="color: #D4D4D4">;</span></div><div class=\'line\'><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> { </span><span style="color: #9CDCFE"><data-lsp lsp=\'Applies one or more styles.&#10;&#10;- A string references a named style from &#10;{@link &#10;TDocumentDefinitions.styles&#10;}&#10;&#10;- An object sets the given style properties&#10;- An array of strings or objects applies the styles in the given order,&#10;  later styles overriding properties from the earlier ones&#10;&#10;Styles defined this way can be overridden by the &#10;{@link &#10;Style&#10;}&#10; properties on an element itself.&#10;&#10;(alias) type StyleReference = string | Style | (string | Style)[]&#10;import StyleReference\' >StyleReference</data-lsp></span><span style="color: #D4D4D4"> } </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">"pdfmake/interfaces"</span><span style="color: #D4D4D4">;</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #569CD6">declare</span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">module</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">"react-pdfmake-reconciler"</span><span style="color: #D4D4D4"> {</span></div><div class=\'line\'><span style="color: #D4D4D4">  </span><span style="color: #569CD6">interface</span><span style="color: #D4D4D4"> </span><span style="color: #4EC9B0"><data-lsp lsp=\'interface DefaultTheme\' >DefaultTheme</data-lsp></span><span style="color: #D4D4D4"> {</span></div><div class=\'line\'><span style="color: #D4D4D4">    </span><span style="color: #6A9955">/** My primary color */</span></div><div class=\'line\'><span style="color: #D4D4D4">    </span><span style="color: #9CDCFE"><data-lsp lsp=\'My primary color&#10;&#10;(property) DefaultTheme.primaryColor: string\' >primaryColor</data-lsp></span><span style="color: #D4D4D4">: </span><span style="color: #4EC9B0">string</span><span style="color: #D4D4D4">;</span></div><div class=\'line\'><span style="color: #D4D4D4">  }</span></div><div class=\'line\'><span style="color: #D4D4D4">}</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #4FC1FF"><data-lsp lsp=\'const Text: React.ComponentType&lt;PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>>\' >Text</data-lsp></span><span style="color: #D4D4D4"> = </span><span style="color: #DCDCAA"><data-lsp lsp=\'(alias) styled&lt;"pdf-text">(tag: "pdf-text"): Tagged&lt;PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;...>>> (+1 overload)&#10;import styled\' >styled</data-lsp></span><span style="color: #D4D4D4">(</span><span style="color: #CE9178">"pdf-text"</span><span style="color: #D4D4D4">)((</span><span style="color: #9CDCFE"><data-lsp lsp=\'(parameter) props: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >props</data-lsp></span><span style="color: #D4D4D4">, </span><span style="color: #9CDCFE"><data-lsp lsp=\'(parameter) theme: DefaultTheme\' >theme</data-lsp></span><span style="color: #D4D4D4">) </span><span style="color: #569CD6">=&gt;</span><span style="color: #D4D4D4"> ({</span></div><div class=\'line\'><span style="color: #D4D4D4">  </span><span style="color: #9CDCFE"><data-lsp lsp=\'Text color.&#10;&#10;Supports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.&#10;&#10;Defaults to `black`.&#10;&#10;(property) Style.color?: string | undefined\' >color</data-lsp>:</span><span style="color: #D4D4D4"> </span><span style="color: #9CDCFE"><data-lsp lsp=\'(parameter) theme: DefaultTheme\' >theme</data-lsp></span><span style="color: #D4D4D4">.</span><span style="color: #9CDCFE"><data-lsp lsp=\'My primary color&#10;&#10;(property) DefaultTheme.primaryColor: string\' >primaryColor</data-lsp></span><span style="color: #D4D4D4">,</span></div><div class=\'line\'><span style="color: #D4D4D4">}));</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #DCDCAA"><data-lsp lsp=\'const pdfNode: React.JSX.Element\' >pdfNode</data-lsp></span><span style="color: #D4D4D4"> = (</span></div><div class=\'line\'><span style="color: #D4D4D4">  </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp=\'(alias) const ThemeProvider: React.Provider&lt;DefaultTheme>&#10;import ThemeProvider\' >ThemeProvider</data-lsp></span></div><div class=\'line\'><span style="color: #D4D4D4">    </span><span style="color: #9CDCFE"><data-lsp lsp=\'(property) React.ProviderProps&lt;DefaultTheme>.value: DefaultTheme\' >value</data-lsp></span><span style="color: #D4D4D4">=</span><span style="color: #569CD6">{</span><span style="color: #D4D4D4">{</span></div><div class=\'line\'><span style="color: #D4D4D4">      </span><span style="color: #9CDCFE"><data-lsp lsp=\'My primary color&#10;&#10;(property) DefaultTheme.primaryColor: string\' >primaryColor</data-lsp>:</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">"#f00"</span><span style="color: #D4D4D4">,</span></div><div class=\'line\'><span style="color: #D4D4D4">    }</span><span style="color: #569CD6">}</span></div><div class=\'line\'><span style="color: #D4D4D4">  </span><span style="color: #808080">&gt;</span></div><div class=\'line\'><span style="color: #D4D4D4">    </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp=\'const Text: React.ComponentType&lt;PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>>\' >Text</data-lsp></span><span style="color: #808080">&gt;</span><span style="color: #D4D4D4">Hello</span><span style="color: #808080">&lt;/</span><span style="color: #4EC9B0"><data-lsp lsp=\'const Text: React.ComponentType&lt;PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>>\' >Text</data-lsp></span><span style="color: #808080">&gt;</span></div><div class=\'line\'><span style="color: #D4D4D4">  </span><span style="color: #808080">&lt;/</span><span style="color: #4EC9B0"><data-lsp lsp=\'(alias) const ThemeProvider: React.Provider&lt;DefaultTheme>&#10;import ThemeProvider\' >ThemeProvider</data-lsp></span><span style="color: #808080">&gt;</span></div><div class=\'line\'><span style="color: #D4D4D4">);</span></div></code></div></pre>'}})]})}function d(t={}){const{wrapper:s}={...(0,n.a)(),...t.components};return s?(0,l.jsx)(s,{...t,children:(0,l.jsx)(i,{...t})}):i(t)}},4012:(t,s,e)=>{e.d(s,{Z:()=>p,a:()=>o});var l=e(79);const n={},a=l.createContext(n);function o(t){const s=l.useContext(a);return l.useMemo((function(){return"function"==typeof t?t(s):{...s,...t}}),[s,t])}function p(t){let s;return s=t.disableParentContext?"function"==typeof t.components?t.components(n):t.components||n:o(t.components),l.createElement(a.Provider,{value:s},t.children)}}}]);