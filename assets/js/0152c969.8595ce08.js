"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[30],{9100:(s,t,l)=>{l.r(t),l.d(t,{assets:()=>r,contentTitle:()=>n,default:()=>c,frontMatter:()=>p,metadata:()=>o,toc:()=>d});var e=l(5250),a=l(4012);const p={sidebar_position:1},n="Intrinsic elements",o={id:"jsx/intrinsics",title:"Intrinsic elements",description:"This package defines the following list of intrinsic elements.",source:"@site/docs/jsx/intrinsics.md",sourceDirName:"jsx",slug:"/jsx/intrinsics",permalink:"/react-pdfmake-reconciler/docs/jsx/intrinsics",draft:!1,unlisted:!1,editUrl:"https://github.com/danvim/react-pdfmake-reconciler/tree/master/docs/docs/jsx/intrinsics.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"JSX",permalink:"/react-pdfmake-reconciler/docs/jsx/"},next:{title:"React PDF components",permalink:"/react-pdfmake-reconciler/docs/jsx/pdf-components/"}},r={},d=[{value:"Trivial elements",id:"trivial-elements",level:2},{value:"Virtual elements",id:"virtual-elements",level:2}];function i(s){const t={code:"code",div:"div",h1:"h1",h2:"h2",p:"p",strong:"strong",...(0,a.a)(),...s.components};return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(t.h1,{id:"intrinsic-elements",children:"Intrinsic elements"}),"\n",(0,e.jsx)(t.p,{children:"This package defines the following list of intrinsic elements."}),"\n",(0,e.jsx)(t.h2,{id:"trivial-elements",children:"Trivial elements"}),"\n",(0,e.jsxs)(t.p,{children:["These are defined such that the reasonable content property is made the ",(0,e.jsx)(t.code,{children:"children"})," of the element, and that property is made the name of the element."]}),"\n",(0,e.jsx)(t.div,{dangerouslySetInnerHTML:{__html:'<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">tsx</div><div class=\'code-container\'><code><div class=\'line\'><span style="color: #008000">/// </span><span style="color: #800000">&lt;reference</span><span style="color: #008000"> </span><span style="color: #FF0000">types</span><span style="color: #000000">=</span><span style="color: #A31515">"react-pdfmake-reconciler/react-jsx"</span><span style="color: #008000"> </span><span style="color: #800000">/&gt;</span></div><div class=\'line\'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp=\'const text: React.JSX.Element\' >text</data-lsp></span><span style="color: #000000"> = </span><span style="color: #800000">&lt;</span><span style="color: #267F99"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-text</data-lsp></span><span style="color: #800000">&gt;&lt;/</span><span style="color: #267F99"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-text</data-lsp></span><span style="color: #800000">&gt;</span><span style="color: #000000">;</span></div><div class=\'meta-line\'><span class=\'popover-prefix\'>                 </span><span class=\'popover\'><div class=\'arrow\'></div>(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"&gt; | Omit&lt;ContentLink, "text"&gt; | Omit&lt;ContentAnchor, "text"&gt; | Omit&lt;ContentTocItem, "text"&gt;&gt;</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp=\'const columns: React.JSX.Element\' >columns</data-lsp></span><span style="color: #000000"> = </span><span style="color: #800000">&lt;</span><span style="color: #267F99"><data-lsp lsp=\'(property) PdfElements["pdf-columns"]: PdfPropsWithChildren&lt;Omit&lt;ContentColumns, "columns">>\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-columns</data-lsp></span><span style="color: #800000">&gt;&lt;/</span><span style="color: #267F99"><data-lsp lsp=\'(property) PdfElements["pdf-columns"]: PdfPropsWithChildren&lt;Omit&lt;ContentColumns, "columns">>\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-columns</data-lsp></span><span style="color: #800000">&gt;</span><span style="color: #000000">;</span></div><div class=\'meta-line\'><span class=\'popover-prefix\'>                     </span><span class=\'popover\'><div class=\'arrow\'></div>(property) PdfElements["pdf-columns"]: PdfPropsWithChildren&lt;Omit&lt;ContentColumns, "columns"&gt;&gt;</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp=\'const stack: React.JSX.Element\' >stack</data-lsp></span><span style="color: #000000"> = </span><span style="color: #800000">&lt;</span><span style="color: #267F99"><data-lsp lsp=\'(property) PdfElements["pdf-stack"]: PdfPropsWithChildren&lt;Omit&lt;ContentStack, "stack">>\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-stack</data-lsp></span><span style="color: #800000">&gt;&lt;/</span><span style="color: #267F99"><data-lsp lsp=\'(property) PdfElements["pdf-stack"]: PdfPropsWithChildren&lt;Omit&lt;ContentStack, "stack">>\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-stack</data-lsp></span><span style="color: #800000">&gt;</span><span style="color: #000000">;</span></div><div class=\'meta-line\'><span class=\'popover-prefix\'>                  </span><span class=\'popover\'><div class=\'arrow\'></div>(property) PdfElements["pdf-stack"]: PdfPropsWithChildren&lt;Omit&lt;ContentStack, "stack"&gt;&gt;</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp=\'const ol: React.JSX.Element\' >ol</data-lsp></span><span style="color: #000000"> = </span><span style="color: #800000">&lt;</span><span style="color: #267F99"><data-lsp lsp=\'(property) PdfElements["pdf-ol"]: PdfPropsWithChildren&lt;Omit&lt;ContentOrderedList, "ol">>\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-ol</data-lsp></span><span style="color: #800000">&gt;&lt;/</span><span style="color: #267F99"><data-lsp lsp=\'(property) PdfElements["pdf-ol"]: PdfPropsWithChildren&lt;Omit&lt;ContentOrderedList, "ol">>\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-ol</data-lsp></span><span style="color: #800000">&gt;</span><span style="color: #000000">;</span></div><div class=\'meta-line\'><span class=\'popover-prefix\'>              </span><span class=\'popover\'><div class=\'arrow\'></div>(property) PdfElements["pdf-ol"]: PdfPropsWithChildren&lt;Omit&lt;ContentOrderedList, "ol"&gt;&gt;</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp=\'const ul: React.JSX.Element\' >ul</data-lsp></span><span style="color: #000000"> = </span><span style="color: #800000">&lt;</span><span style="color: #267F99"><data-lsp lsp=\'(property) PdfElements["pdf-ul"]: PdfPropsWithChildren&lt;Omit&lt;ContentUnorderedList, "ul">>\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-ul</data-lsp></span><span style="color: #800000">&gt;&lt;/</span><span style="color: #267F99"><data-lsp lsp=\'(property) PdfElements["pdf-ul"]: PdfPropsWithChildren&lt;Omit&lt;ContentUnorderedList, "ul">>\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-ul</data-lsp></span><span style="color: #800000">&gt;</span><span style="color: #000000">;</span></div><div class=\'meta-line\'><span class=\'popover-prefix\'>              </span><span class=\'popover\'><div class=\'arrow\'></div>(property) PdfElements["pdf-ul"]: PdfPropsWithChildren&lt;Omit&lt;ContentUnorderedList, "ul"&gt;&gt;</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp=\'const table: React.JSX.Element\' >table</data-lsp></span><span style="color: #000000"> = </span><span style="color: #800000">&lt;</span><span style="color: #267F99"><data-lsp lsp=\'(property) PdfElements["pdf-table"]: PdfPropsWithChildren&lt;Omit&lt;ContentTable, "table">>\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-table</data-lsp></span><span style="color: #800000">&gt;&lt;/</span><span style="color: #267F99"><data-lsp lsp=\'(property) PdfElements["pdf-table"]: PdfPropsWithChildren&lt;Omit&lt;ContentTable, "table">>\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-table</data-lsp></span><span style="color: #800000">&gt;</span><span style="color: #000000">;</span></div><div class=\'meta-line\'><span class=\'popover-prefix\'>                  </span><span class=\'popover\'><div class=\'arrow\'></div>(property) PdfElements["pdf-table"]: PdfPropsWithChildren&lt;Omit&lt;ContentTable, "table"&gt;&gt;</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp=\'const pageReference: React.JSX.Element\' >pageReference</data-lsp></span><span style="color: #000000"> = </span><span style="color: #800000">&lt;</span><span style="color: #267F99"><data-lsp lsp=\'(property) PdfElements["pdf-pageReference"]: {&#10;    children: string;&#10;} &amp; Omit&lt;ContentPageReference, "pageReference">\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-pageReference</data-lsp></span><span style="color: #800000">&gt;</span><span style="color: #000000">ref</span><span style="color: #800000">&lt;/</span><span style="color: #267F99"><data-lsp lsp=\'(property) PdfElements["pdf-pageReference"]: {&#10;    children: string;&#10;} &amp; Omit&lt;ContentPageReference, "pageReference">\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-pageReference</data-lsp></span><span style="color: #800000">&gt;</span><span style="color: #000000">;</span></div><div class=\'meta-line\'><span class=\'popover-prefix\'>                              </span><span class=\'popover\'><div class=\'arrow\'></div>(property) PdfElements["pdf-pageReference"]: {\n    children: string;\n} & Omit&lt;ContentPageReference, "pageReference"&gt;</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp=\'const textReference: React.JSX.Element\' >textReference</data-lsp></span><span style="color: #000000"> = </span><span style="color: #800000">&lt;</span><span style="color: #267F99"><data-lsp lsp=\'(property) PdfElements["pdf-textReference"]: {&#10;    children: string;&#10;} &amp; Omit&lt;ContentTextReference, "textReference">\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-textReference</data-lsp></span><span style="color: #800000">&gt;</span><span style="color: #000000">ref</span><span style="color: #800000">&lt;/</span><span style="color: #267F99"><data-lsp lsp=\'(property) PdfElements["pdf-textReference"]: {&#10;    children: string;&#10;} &amp; Omit&lt;ContentTextReference, "textReference">\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-textReference</data-lsp></span><span style="color: #800000">&gt;</span><span style="color: #000000">;</span></div><div class=\'meta-line\'><span class=\'popover-prefix\'>                              </span><span class=\'popover\'><div class=\'arrow\'></div>(property) PdfElements["pdf-textReference"]: {\n    children: string;\n} & Omit&lt;ContentTextReference, "textReference"&gt;</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp=\'const image: React.JSX.Element\' >image</data-lsp></span><span style="color: #000000"> = </span><span style="color: #800000">&lt;</span><span style="color: #267F99"><data-lsp lsp=\'(property) PdfElements["pdf-image"]: ContentImage\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-image</data-lsp></span><span style="color: #000000"> </span><span style="color: #FF0000"><data-lsp lsp=\'Renders the given value as image.&#10;&#10;Available options:&#10;- A reference by name to an image defined in &#10;{@link &#10;TDocumentDefinitions.images&#10;}&#10;&#10;- A data URL&#10;- A remote URL via http:// or https://&#10;&#10;Supported image formats: JPEG, PNG&#10;&#10;For SVG images, use the `svg` property instead.&#10;&#10;(property) ContentImage.image: string\' >image</data-lsp></span><span style="color: #000000">=</span><span style="color: #A31515">"myImage"</span><span style="color: #000000"> </span><span style="color: #800000">/&gt;</span><span style="color: #000000">;</span></div><div class=\'meta-line\'><span class=\'popover-prefix\'>                  </span><span class=\'popover\'><div class=\'arrow\'></div>(property) PdfElements["pdf-image"]: ContentImage</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp=\'const svg: React.JSX.Element\' >svg</data-lsp></span><span style="color: #000000"> = </span><span style="color: #800000">&lt;</span><span style="color: #267F99"><data-lsp lsp=\'(property) PdfElements["pdf-svg"]: ContentSvg\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-svg</data-lsp></span><span style="color: #000000"> </span><span style="color: #FF0000"><data-lsp lsp=\'Renders the given SVG content string as an image.&#10;&#10;For images other than SVG, use the `image` property instead.&#10;&#10;Simple vectors can also be rendered using the `canvas` property instead.&#10;&#10;(property) ContentSvg.svg: string\' >svg</data-lsp></span><span style="color: #000000">=</span><span style="color: #A31515">"&lt;svg&gt;&lt;/svg&gt;"</span><span style="color: #000000"> </span><span style="color: #800000">/&gt;</span><span style="color: #000000">;</span></div><div class=\'meta-line\'><span class=\'popover-prefix\'>               </span><span class=\'popover\'><div class=\'arrow\'></div>(property) PdfElements["pdf-svg"]: ContentSvg</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp=\'const qr: React.JSX.Element\' >qr</data-lsp></span><span style="color: #000000"> = </span><span style="color: #800000">&lt;</span><span style="color: #267F99"><data-lsp lsp=\'(property) PdfElements["pdf-qr"]: ContentQr\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-qr</data-lsp></span><span style="color: #000000"> </span><span style="color: #FF0000"><data-lsp lsp=\'Renders the given string as a QR code.&#10;&#10;(property) ContentQr.qr: string\' >qr</data-lsp></span><span style="color: #000000">=</span><span style="color: #A31515">"hello"</span><span style="color: #000000"> </span><span style="color: #800000">/&gt;</span><span style="color: #000000">;</span></div><div class=\'meta-line\'><span class=\'popover-prefix\'>              </span><span class=\'popover\'><div class=\'arrow\'></div>(property) PdfElements["pdf-qr"]: ContentQr</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp=\'const canvas: React.JSX.Element\' >canvas</data-lsp></span><span style="color: #000000"> = </span><span style="color: #800000">&lt;</span><span style="color: #267F99"><data-lsp lsp=\'(property) PdfElements["pdf-canvas"]: ContentCanvas\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-canvas</data-lsp></span><span style="color: #000000"> </span><span style="color: #FF0000"><data-lsp lsp=\'Renders the given vector elements on a canvas.&#10;&#10;Complex vectors can be rendered from an SVG image using the `svg` property instead.&#10;&#10;(property) ContentCanvas.canvas: CanvasElement[]\' >canvas</data-lsp></span><span style="color: #000000">=</span><span style="color: #0000FF">{</span><span style="color: #000000FF">[]</span><span style="color: #0000FF">}</span><span style="color: #000000"> </span><span style="color: #800000">/&gt;</span><span style="color: #000000">;</span></div><div class=\'meta-line\'><span class=\'popover-prefix\'>                    </span><span class=\'popover\'><div class=\'arrow\'></div>(property) PdfElements["pdf-canvas"]: ContentCanvas</span></div></code></div></pre>\n<pre class="shiki dark-plus twoslash lsp" style="background-color: #1E1E1E; color: #D4D4D4"><div class="language-id">tsx</div><div class=\'code-container\'><code><div class=\'line\'><span style="color: #6A9955">/// </span><span style="color: #808080">&lt;</span><span style="color: #569CD6">reference</span><span style="color: #6A9955"> </span><span style="color: #9CDCFE">types</span><span style="color: #D4D4D4">=</span><span style="color: #CE9178">"react-pdfmake-reconciler/react-jsx"</span><span style="color: #6A9955"> </span><span style="color: #808080">/&gt;</span></div><div class=\'line\'><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #4FC1FF"><data-lsp lsp=\'const text: React.JSX.Element\' >text</data-lsp></span><span style="color: #D4D4D4"> = </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-text</data-lsp></span><span style="color: #808080">&gt;&lt;/</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-text</data-lsp></span><span style="color: #808080">&gt;</span><span style="color: #D4D4D4">;</span></div><div class=\'meta-line\'><span class=\'popover-prefix\'>                 </span><span class=\'popover\'><div class=\'arrow\'></div>(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"&gt; | Omit&lt;ContentLink, "text"&gt; | Omit&lt;ContentAnchor, "text"&gt; | Omit&lt;ContentTocItem, "text"&gt;&gt;</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #4FC1FF"><data-lsp lsp=\'const columns: React.JSX.Element\' >columns</data-lsp></span><span style="color: #D4D4D4"> = </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) PdfElements["pdf-columns"]: PdfPropsWithChildren&lt;Omit&lt;ContentColumns, "columns">>\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-columns</data-lsp></span><span style="color: #808080">&gt;&lt;/</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) PdfElements["pdf-columns"]: PdfPropsWithChildren&lt;Omit&lt;ContentColumns, "columns">>\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-columns</data-lsp></span><span style="color: #808080">&gt;</span><span style="color: #D4D4D4">;</span></div><div class=\'meta-line\'><span class=\'popover-prefix\'>                     </span><span class=\'popover\'><div class=\'arrow\'></div>(property) PdfElements["pdf-columns"]: PdfPropsWithChildren&lt;Omit&lt;ContentColumns, "columns"&gt;&gt;</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #4FC1FF"><data-lsp lsp=\'const stack: React.JSX.Element\' >stack</data-lsp></span><span style="color: #D4D4D4"> = </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) PdfElements["pdf-stack"]: PdfPropsWithChildren&lt;Omit&lt;ContentStack, "stack">>\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-stack</data-lsp></span><span style="color: #808080">&gt;&lt;/</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) PdfElements["pdf-stack"]: PdfPropsWithChildren&lt;Omit&lt;ContentStack, "stack">>\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-stack</data-lsp></span><span style="color: #808080">&gt;</span><span style="color: #D4D4D4">;</span></div><div class=\'meta-line\'><span class=\'popover-prefix\'>                  </span><span class=\'popover\'><div class=\'arrow\'></div>(property) PdfElements["pdf-stack"]: PdfPropsWithChildren&lt;Omit&lt;ContentStack, "stack"&gt;&gt;</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #4FC1FF"><data-lsp lsp=\'const ol: React.JSX.Element\' >ol</data-lsp></span><span style="color: #D4D4D4"> = </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) PdfElements["pdf-ol"]: PdfPropsWithChildren&lt;Omit&lt;ContentOrderedList, "ol">>\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-ol</data-lsp></span><span style="color: #808080">&gt;&lt;/</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) PdfElements["pdf-ol"]: PdfPropsWithChildren&lt;Omit&lt;ContentOrderedList, "ol">>\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-ol</data-lsp></span><span style="color: #808080">&gt;</span><span style="color: #D4D4D4">;</span></div><div class=\'meta-line\'><span class=\'popover-prefix\'>              </span><span class=\'popover\'><div class=\'arrow\'></div>(property) PdfElements["pdf-ol"]: PdfPropsWithChildren&lt;Omit&lt;ContentOrderedList, "ol"&gt;&gt;</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #4FC1FF"><data-lsp lsp=\'const ul: React.JSX.Element\' >ul</data-lsp></span><span style="color: #D4D4D4"> = </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) PdfElements["pdf-ul"]: PdfPropsWithChildren&lt;Omit&lt;ContentUnorderedList, "ul">>\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-ul</data-lsp></span><span style="color: #808080">&gt;&lt;/</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) PdfElements["pdf-ul"]: PdfPropsWithChildren&lt;Omit&lt;ContentUnorderedList, "ul">>\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-ul</data-lsp></span><span style="color: #808080">&gt;</span><span style="color: #D4D4D4">;</span></div><div class=\'meta-line\'><span class=\'popover-prefix\'>              </span><span class=\'popover\'><div class=\'arrow\'></div>(property) PdfElements["pdf-ul"]: PdfPropsWithChildren&lt;Omit&lt;ContentUnorderedList, "ul"&gt;&gt;</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #4FC1FF"><data-lsp lsp=\'const table: React.JSX.Element\' >table</data-lsp></span><span style="color: #D4D4D4"> = </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) PdfElements["pdf-table"]: PdfPropsWithChildren&lt;Omit&lt;ContentTable, "table">>\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-table</data-lsp></span><span style="color: #808080">&gt;&lt;/</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) PdfElements["pdf-table"]: PdfPropsWithChildren&lt;Omit&lt;ContentTable, "table">>\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-table</data-lsp></span><span style="color: #808080">&gt;</span><span style="color: #D4D4D4">;</span></div><div class=\'meta-line\'><span class=\'popover-prefix\'>                  </span><span class=\'popover\'><div class=\'arrow\'></div>(property) PdfElements["pdf-table"]: PdfPropsWithChildren&lt;Omit&lt;ContentTable, "table"&gt;&gt;</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #4FC1FF"><data-lsp lsp=\'const pageReference: React.JSX.Element\' >pageReference</data-lsp></span><span style="color: #D4D4D4"> = </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) PdfElements["pdf-pageReference"]: {&#10;    children: string;&#10;} &amp; Omit&lt;ContentPageReference, "pageReference">\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-pageReference</data-lsp></span><span style="color: #808080">&gt;</span><span style="color: #D4D4D4">ref</span><span style="color: #808080">&lt;/</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) PdfElements["pdf-pageReference"]: {&#10;    children: string;&#10;} &amp; Omit&lt;ContentPageReference, "pageReference">\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-pageReference</data-lsp></span><span style="color: #808080">&gt;</span><span style="color: #D4D4D4">;</span></div><div class=\'meta-line\'><span class=\'popover-prefix\'>                              </span><span class=\'popover\'><div class=\'arrow\'></div>(property) PdfElements["pdf-pageReference"]: {\n    children: string;\n} & Omit&lt;ContentPageReference, "pageReference"&gt;</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #4FC1FF"><data-lsp lsp=\'const textReference: React.JSX.Element\' >textReference</data-lsp></span><span style="color: #D4D4D4"> = </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) PdfElements["pdf-textReference"]: {&#10;    children: string;&#10;} &amp; Omit&lt;ContentTextReference, "textReference">\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-textReference</data-lsp></span><span style="color: #808080">&gt;</span><span style="color: #D4D4D4">ref</span><span style="color: #808080">&lt;/</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) PdfElements["pdf-textReference"]: {&#10;    children: string;&#10;} &amp; Omit&lt;ContentTextReference, "textReference">\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-textReference</data-lsp></span><span style="color: #808080">&gt;</span><span style="color: #D4D4D4">;</span></div><div class=\'meta-line\'><span class=\'popover-prefix\'>                              </span><span class=\'popover\'><div class=\'arrow\'></div>(property) PdfElements["pdf-textReference"]: {\n    children: string;\n} & Omit&lt;ContentTextReference, "textReference"&gt;</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #4FC1FF"><data-lsp lsp=\'const image: React.JSX.Element\' >image</data-lsp></span><span style="color: #D4D4D4"> = </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) PdfElements["pdf-image"]: ContentImage\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-image</data-lsp></span><span style="color: #D4D4D4"> </span><span style="color: #9CDCFE"><data-lsp lsp=\'Renders the given value as image.&#10;&#10;Available options:&#10;- A reference by name to an image defined in &#10;{@link &#10;TDocumentDefinitions.images&#10;}&#10;&#10;- A data URL&#10;- A remote URL via http:// or https://&#10;&#10;Supported image formats: JPEG, PNG&#10;&#10;For SVG images, use the `svg` property instead.&#10;&#10;(property) ContentImage.image: string\' >image</data-lsp></span><span style="color: #D4D4D4">=</span><span style="color: #CE9178">"myImage"</span><span style="color: #D4D4D4"> </span><span style="color: #808080">/&gt;</span><span style="color: #D4D4D4">;</span></div><div class=\'meta-line\'><span class=\'popover-prefix\'>                  </span><span class=\'popover\'><div class=\'arrow\'></div>(property) PdfElements["pdf-image"]: ContentImage</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #4FC1FF"><data-lsp lsp=\'const svg: React.JSX.Element\' >svg</data-lsp></span><span style="color: #D4D4D4"> = </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) PdfElements["pdf-svg"]: ContentSvg\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-svg</data-lsp></span><span style="color: #D4D4D4"> </span><span style="color: #9CDCFE"><data-lsp lsp=\'Renders the given SVG content string as an image.&#10;&#10;For images other than SVG, use the `image` property instead.&#10;&#10;Simple vectors can also be rendered using the `canvas` property instead.&#10;&#10;(property) ContentSvg.svg: string\' >svg</data-lsp></span><span style="color: #D4D4D4">=</span><span style="color: #CE9178">"&lt;svg&gt;&lt;/svg&gt;"</span><span style="color: #D4D4D4"> </span><span style="color: #808080">/&gt;</span><span style="color: #D4D4D4">;</span></div><div class=\'meta-line\'><span class=\'popover-prefix\'>               </span><span class=\'popover\'><div class=\'arrow\'></div>(property) PdfElements["pdf-svg"]: ContentSvg</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #4FC1FF"><data-lsp lsp=\'const qr: React.JSX.Element\' >qr</data-lsp></span><span style="color: #D4D4D4"> = </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) PdfElements["pdf-qr"]: ContentQr\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-qr</data-lsp></span><span style="color: #D4D4D4"> </span><span style="color: #9CDCFE"><data-lsp lsp=\'Renders the given string as a QR code.&#10;&#10;(property) ContentQr.qr: string\' >qr</data-lsp></span><span style="color: #D4D4D4">=</span><span style="color: #CE9178">"hello"</span><span style="color: #D4D4D4"> </span><span style="color: #808080">/&gt;</span><span style="color: #D4D4D4">;</span></div><div class=\'meta-line\'><span class=\'popover-prefix\'>              </span><span class=\'popover\'><div class=\'arrow\'></div>(property) PdfElements["pdf-qr"]: ContentQr</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #4FC1FF"><data-lsp lsp=\'const canvas: React.JSX.Element\' >canvas</data-lsp></span><span style="color: #D4D4D4"> = </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) PdfElements["pdf-canvas"]: ContentCanvas\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-canvas</data-lsp></span><span style="color: #D4D4D4"> </span><span style="color: #9CDCFE"><data-lsp lsp=\'Renders the given vector elements on a canvas.&#10;&#10;Complex vectors can be rendered from an SVG image using the `svg` property instead.&#10;&#10;(property) ContentCanvas.canvas: CanvasElement[]\' >canvas</data-lsp></span><span style="color: #D4D4D4">=</span><span style="color: #569CD6">{</span><span style="color: #D4D4D4">[]</span><span style="color: #569CD6">}</span><span style="color: #D4D4D4"> </span><span style="color: #808080">/&gt;</span><span style="color: #D4D4D4">;</span></div><div class=\'meta-line\'><span class=\'popover-prefix\'>                    </span><span class=\'popover\'><div class=\'arrow\'></div>(property) PdfElements["pdf-canvas"]: ContentCanvas</span></div></code></div></pre>'}}),"\n",(0,e.jsx)(t.h2,{id:"virtual-elements",children:"Virtual elements"}),"\n",(0,e.jsxs)(t.p,{children:["In addition to the above intrinsic elements, there are also these which are categorized as ",(0,e.jsx)(t.strong,{children:"virtual elements"}),". These are, in one way or another, specially treated by the renderer where the content key doesn't match the name, or they do not correlate to a rendered content object."]}),"\n",(0,e.jsx)(t.div,{dangerouslySetInnerHTML:{__html:'<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">tsx</div><div class=\'code-container\'><code><div class=\'line\'><span style="color: #008000">/// </span><span style="color: #800000">&lt;reference</span><span style="color: #008000"> </span><span style="color: #FF0000">types</span><span style="color: #000000">=</span><span style="color: #A31515">"react-pdfmake-reconciler/react-jsx"</span><span style="color: #008000"> </span><span style="color: #800000">/&gt;</span></div><div class=\'line\'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp=\'const array: React.JSX.Element\' >array</data-lsp></span><span style="color: #000000"> = </span><span style="color: #800000">&lt;</span><span style="color: #267F99"><data-lsp lsp=\'Maps content array.&#10;&#10;(property) VirtualPdfElements["pdf-array"]: PdfPropsWithChildren&lt;object>\' >pdf-array</data-lsp></span><span style="color: #800000">&gt;&lt;/</span><span style="color: #267F99"><data-lsp lsp=\'Maps content array.&#10;&#10;(property) VirtualPdfElements["pdf-array"]: PdfPropsWithChildren&lt;object>\' >pdf-array</data-lsp></span><span style="color: #800000">&gt;</span><span style="color: #000000">;</span></div><div class=\'meta-line\'><span class=\'popover-prefix\'>                  </span><span class=\'popover\'><div class=\'arrow\'></div>(property) VirtualPdfElements["pdf-array"]: PdfPropsWithChildren&lt;object&gt;</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp=\'const cell: React.JSX.Element\' >cell</data-lsp></span><span style="color: #000000"> = (</span></div><div class=\'line\'><span style="color: #000000">  </span><span style="color: #800000">&lt;</span><span style="color: #267F99"><data-lsp lsp=\'Type-safe way to pass cell-related properties to child element.&#10;&#10;(property) VirtualPdfElements["pdf-cell"]: PassThroughPdfProps&lt;TableCellProperties>\' >pdf-cell</data-lsp></span><span style="color: #800000">&gt;</span></div><div class=\'meta-line\'><span class=\'popover-prefix\'>      </span><span class=\'popover\'><div class=\'arrow\'></div>(property) VirtualPdfElements["pdf-cell"]: PassThroughPdfProps&lt;TableCellProperties&gt;</span></div><div class=\'line\'><span style="color: #000000">    </span><span style="color: #800000">&lt;</span><span style="color: #267F99"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >pdf-text</data-lsp></span><span style="color: #800000">&gt;&lt;/</span><span style="color: #267F99"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >pdf-text</data-lsp></span><span style="color: #800000">&gt;</span></div><div class=\'line\'><span style="color: #000000">  </span><span style="color: #800000">&lt;/</span><span style="color: #267F99"><data-lsp lsp=\'Type-safe way to pass cell-related properties to child element.&#10;&#10;(property) VirtualPdfElements["pdf-cell"]: PassThroughPdfProps&lt;TableCellProperties>\' >pdf-cell</data-lsp></span><span style="color: #800000">&gt;</span></div><div class=\'line\'><span style="color: #000000">);</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp=\'const column: React.JSX.Element\' >column</data-lsp></span><span style="color: #000000"> = (</span></div><div class=\'line\'><span style="color: #000000">  </span><span style="color: #800000">&lt;</span><span style="color: #267F99"><data-lsp lsp=\'Type-safe way to pass column-related properties to child element.&#10;&#10;(property) VirtualPdfElements["pdf-column"]: PassThroughPdfProps&lt;ColumnProperties>\' >pdf-column</data-lsp></span><span style="color: #800000">&gt;</span></div><div class=\'meta-line\'><span class=\'popover-prefix\'>       </span><span class=\'popover\'><div class=\'arrow\'></div>(property) VirtualPdfElements["pdf-column"]: PassThroughPdfProps&lt;ColumnProperties&gt;</span></div><div class=\'line\'><span style="color: #000000">    </span><span style="color: #800000">&lt;</span><span style="color: #267F99"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >pdf-text</data-lsp></span><span style="color: #800000">&gt;&lt;/</span><span style="color: #267F99"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >pdf-text</data-lsp></span><span style="color: #800000">&gt;</span></div><div class=\'line\'><span style="color: #000000">  </span><span style="color: #800000">&lt;/</span><span style="color: #267F99"><data-lsp lsp=\'Type-safe way to pass column-related properties to child element.&#10;&#10;(property) VirtualPdfElements["pdf-column"]: PassThroughPdfProps&lt;ColumnProperties>\' >pdf-column</data-lsp></span><span style="color: #800000">&gt;</span></div><div class=\'line\'><span style="color: #000000">);</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp=\'const li: React.JSX.Element\' >li</data-lsp></span><span style="color: #000000"> = (</span></div><div class=\'line\'><span style="color: #000000">  </span><span style="color: #800000">&lt;</span><span style="color: #267F99"><data-lsp lsp=\'Type-safe way to pass list item-related properties to child element.&#10;&#10;(property) VirtualPdfElements["pdf-li"]: PassThroughPdfProps&lt;OrderedListElementProperties | UnorderedListElementProperties>\' >pdf-li</data-lsp></span><span style="color: #800000">&gt;</span></div><div class=\'meta-line\'><span class=\'popover-prefix\'>     </span><span class=\'popover\'><div class=\'arrow\'></div>(property) VirtualPdfElements["pdf-li"]: PassThroughPdfProps&lt;OrderedListElementProperties | UnorderedListElementProperties&gt;</span></div><div class=\'line\'><span style="color: #000000">    </span><span style="color: #800000">&lt;</span><span style="color: #267F99"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >pdf-text</data-lsp></span><span style="color: #800000">&gt;&lt;/</span><span style="color: #267F99"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >pdf-text</data-lsp></span><span style="color: #800000">&gt;</span></div><div class=\'line\'><span style="color: #000000">  </span><span style="color: #800000">&lt;/</span><span style="color: #267F99"><data-lsp lsp=\'Type-safe way to pass list item-related properties to child element.&#10;&#10;(property) VirtualPdfElements["pdf-li"]: PassThroughPdfProps&lt;OrderedListElementProperties | UnorderedListElementProperties>\' >pdf-li</data-lsp></span><span style="color: #800000">&gt;</span></div><div class=\'line\'><span style="color: #000000">);</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp=\'const tbody: React.JSX.Element\' >tbody</data-lsp></span><span style="color: #000000"> = </span><span style="color: #800000">&lt;</span><span style="color: #267F99"><data-lsp lsp=\'(property) VirtualPdfElements["pdf-tbody"]: PdfPropsWithChildren&lt;Omit&lt;Table, "body">>\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-tbody</data-lsp></span><span style="color: #800000">&gt;</span><span style="color: #0000FF">{</span><span style="color: #000000FF">[]</span><span style="color: #0000FF">}</span><span style="color: #800000">&lt;/</span><span style="color: #267F99"><data-lsp lsp=\'(property) VirtualPdfElements["pdf-tbody"]: PdfPropsWithChildren&lt;Omit&lt;Table, "body">>\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-tbody</data-lsp></span><span style="color: #800000">&gt;</span><span style="color: #000000">;</span></div><div class=\'meta-line\'><span class=\'popover-prefix\'>                  </span><span class=\'popover\'><div class=\'arrow\'></div>(property) VirtualPdfElements["pdf-tbody"]: PdfPropsWithChildren&lt;Omit&lt;Table, "body"&gt;&gt;</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp=\'const toc: React.JSX.Element\' >toc</data-lsp></span><span style="color: #000000"> = </span><span style="color: #800000">&lt;</span><span style="color: #267F99"><data-lsp lsp=\'(property) VirtualPdfElements["pdf-toc"]: PdfPropsWithChildren&lt;Omit&lt;TableOfContent, "title">>\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-toc</data-lsp></span><span style="color: #800000">&gt;&lt;/</span><span style="color: #267F99"><data-lsp lsp=\'(property) VirtualPdfElements["pdf-toc"]: PdfPropsWithChildren&lt;Omit&lt;TableOfContent, "title">>\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-toc</data-lsp></span><span style="color: #800000">&gt;</span><span style="color: #000000">;</span></div><div class=\'meta-line\'><span class=\'popover-prefix\'>               </span><span class=\'popover\'><div class=\'arrow\'></div>(property) VirtualPdfElements["pdf-toc"]: PdfPropsWithChildren&lt;Omit&lt;TableOfContent, "title"&gt;&gt;</span></div></code></div></pre>\n<pre class="shiki dark-plus twoslash lsp" style="background-color: #1E1E1E; color: #D4D4D4"><div class="language-id">tsx</div><div class=\'code-container\'><code><div class=\'line\'><span style="color: #6A9955">/// </span><span style="color: #808080">&lt;</span><span style="color: #569CD6">reference</span><span style="color: #6A9955"> </span><span style="color: #9CDCFE">types</span><span style="color: #D4D4D4">=</span><span style="color: #CE9178">"react-pdfmake-reconciler/react-jsx"</span><span style="color: #6A9955"> </span><span style="color: #808080">/&gt;</span></div><div class=\'line\'><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #4FC1FF"><data-lsp lsp=\'const array: React.JSX.Element\' >array</data-lsp></span><span style="color: #D4D4D4"> = </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp=\'Maps content array.&#10;&#10;(property) VirtualPdfElements["pdf-array"]: PdfPropsWithChildren&lt;object>\' >pdf-array</data-lsp></span><span style="color: #808080">&gt;&lt;/</span><span style="color: #4EC9B0"><data-lsp lsp=\'Maps content array.&#10;&#10;(property) VirtualPdfElements["pdf-array"]: PdfPropsWithChildren&lt;object>\' >pdf-array</data-lsp></span><span style="color: #808080">&gt;</span><span style="color: #D4D4D4">;</span></div><div class=\'meta-line\'><span class=\'popover-prefix\'>                  </span><span class=\'popover\'><div class=\'arrow\'></div>(property) VirtualPdfElements["pdf-array"]: PdfPropsWithChildren&lt;object&gt;</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #DCDCAA"><data-lsp lsp=\'const cell: React.JSX.Element\' >cell</data-lsp></span><span style="color: #D4D4D4"> = (</span></div><div class=\'line\'><span style="color: #D4D4D4">  </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp=\'Type-safe way to pass cell-related properties to child element.&#10;&#10;(property) VirtualPdfElements["pdf-cell"]: PassThroughPdfProps&lt;TableCellProperties>\' >pdf-cell</data-lsp></span><span style="color: #808080">&gt;</span></div><div class=\'meta-line\'><span class=\'popover-prefix\'>      </span><span class=\'popover\'><div class=\'arrow\'></div>(property) VirtualPdfElements["pdf-cell"]: PassThroughPdfProps&lt;TableCellProperties&gt;</span></div><div class=\'line\'><span style="color: #D4D4D4">    </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >pdf-text</data-lsp></span><span style="color: #808080">&gt;&lt;/</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >pdf-text</data-lsp></span><span style="color: #808080">&gt;</span></div><div class=\'line\'><span style="color: #D4D4D4">  </span><span style="color: #808080">&lt;/</span><span style="color: #4EC9B0"><data-lsp lsp=\'Type-safe way to pass cell-related properties to child element.&#10;&#10;(property) VirtualPdfElements["pdf-cell"]: PassThroughPdfProps&lt;TableCellProperties>\' >pdf-cell</data-lsp></span><span style="color: #808080">&gt;</span></div><div class=\'line\'><span style="color: #D4D4D4">);</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #DCDCAA"><data-lsp lsp=\'const column: React.JSX.Element\' >column</data-lsp></span><span style="color: #D4D4D4"> = (</span></div><div class=\'line\'><span style="color: #D4D4D4">  </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp=\'Type-safe way to pass column-related properties to child element.&#10;&#10;(property) VirtualPdfElements["pdf-column"]: PassThroughPdfProps&lt;ColumnProperties>\' >pdf-column</data-lsp></span><span style="color: #808080">&gt;</span></div><div class=\'meta-line\'><span class=\'popover-prefix\'>       </span><span class=\'popover\'><div class=\'arrow\'></div>(property) VirtualPdfElements["pdf-column"]: PassThroughPdfProps&lt;ColumnProperties&gt;</span></div><div class=\'line\'><span style="color: #D4D4D4">    </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >pdf-text</data-lsp></span><span style="color: #808080">&gt;&lt;/</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >pdf-text</data-lsp></span><span style="color: #808080">&gt;</span></div><div class=\'line\'><span style="color: #D4D4D4">  </span><span style="color: #808080">&lt;/</span><span style="color: #4EC9B0"><data-lsp lsp=\'Type-safe way to pass column-related properties to child element.&#10;&#10;(property) VirtualPdfElements["pdf-column"]: PassThroughPdfProps&lt;ColumnProperties>\' >pdf-column</data-lsp></span><span style="color: #808080">&gt;</span></div><div class=\'line\'><span style="color: #D4D4D4">);</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #DCDCAA"><data-lsp lsp=\'const li: React.JSX.Element\' >li</data-lsp></span><span style="color: #D4D4D4"> = (</span></div><div class=\'line\'><span style="color: #D4D4D4">  </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp=\'Type-safe way to pass list item-related properties to child element.&#10;&#10;(property) VirtualPdfElements["pdf-li"]: PassThroughPdfProps&lt;OrderedListElementProperties | UnorderedListElementProperties>\' >pdf-li</data-lsp></span><span style="color: #808080">&gt;</span></div><div class=\'meta-line\'><span class=\'popover-prefix\'>     </span><span class=\'popover\'><div class=\'arrow\'></div>(property) VirtualPdfElements["pdf-li"]: PassThroughPdfProps&lt;OrderedListElementProperties | UnorderedListElementProperties&gt;</span></div><div class=\'line\'><span style="color: #D4D4D4">    </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >pdf-text</data-lsp></span><span style="color: #808080">&gt;&lt;/</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >pdf-text</data-lsp></span><span style="color: #808080">&gt;</span></div><div class=\'line\'><span style="color: #D4D4D4">  </span><span style="color: #808080">&lt;/</span><span style="color: #4EC9B0"><data-lsp lsp=\'Type-safe way to pass list item-related properties to child element.&#10;&#10;(property) VirtualPdfElements["pdf-li"]: PassThroughPdfProps&lt;OrderedListElementProperties | UnorderedListElementProperties>\' >pdf-li</data-lsp></span><span style="color: #808080">&gt;</span></div><div class=\'line\'><span style="color: #D4D4D4">);</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #4FC1FF"><data-lsp lsp=\'const tbody: React.JSX.Element\' >tbody</data-lsp></span><span style="color: #D4D4D4"> = </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) VirtualPdfElements["pdf-tbody"]: PdfPropsWithChildren&lt;Omit&lt;Table, "body">>\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-tbody</data-lsp></span><span style="color: #808080">&gt;</span><span style="color: #569CD6">{</span><span style="color: #D4D4D4">[]</span><span style="color: #569CD6">}</span><span style="color: #808080">&lt;/</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) VirtualPdfElements["pdf-tbody"]: PdfPropsWithChildren&lt;Omit&lt;Table, "body">>\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-tbody</data-lsp></span><span style="color: #808080">&gt;</span><span style="color: #D4D4D4">;</span></div><div class=\'meta-line\'><span class=\'popover-prefix\'>                  </span><span class=\'popover\'><div class=\'arrow\'></div>(property) VirtualPdfElements["pdf-tbody"]: PdfPropsWithChildren&lt;Omit&lt;Table, "body"&gt;&gt;</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #4FC1FF"><data-lsp lsp=\'const toc: React.JSX.Element\' >toc</data-lsp></span><span style="color: #D4D4D4"> = </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) VirtualPdfElements["pdf-toc"]: PdfPropsWithChildren&lt;Omit&lt;TableOfContent, "title">>\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-toc</data-lsp></span><span style="color: #808080">&gt;&lt;/</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) VirtualPdfElements["pdf-toc"]: PdfPropsWithChildren&lt;Omit&lt;TableOfContent, "title">>\' style=\'border-bottom: solid 2px lightgrey;\'>pdf-toc</data-lsp></span><span style="color: #808080">&gt;</span><span style="color: #D4D4D4">;</span></div><div class=\'meta-line\'><span class=\'popover-prefix\'>               </span><span class=\'popover\'><div class=\'arrow\'></div>(property) VirtualPdfElements["pdf-toc"]: PdfPropsWithChildren&lt;Omit&lt;TableOfContent, "title"&gt;&gt;</span></div></code></div></pre>'}})]})}function c(s={}){const{wrapper:t}={...(0,a.a)(),...s.components};return t?(0,e.jsx)(t,{...s,children:(0,e.jsx)(i,{...s})}):i(s)}},4012:(s,t,l)=>{l.d(t,{Z:()=>o,a:()=>n});var e=l(79);const a={},p=e.createContext(a);function n(s){const t=e.useContext(p);return e.useMemo((function(){return"function"==typeof s?s(t):{...t,...s}}),[t,s])}function o(s){let t;return t=s.disableParentContext?"function"==typeof s.components?s.components(a):s.components||a:n(s.components),e.createElement(p.Provider,{value:t},s.children)}}}]);