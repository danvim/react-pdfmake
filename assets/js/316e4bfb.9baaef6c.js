(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[146],{9351:(s,t,e)=>{var n={"./Heading.json":[5621,621],"./PdfDocument.json":[5720,720],"./PdfFooter.json":[4740,740],"./PdfHeader.json":[9508,508],"./PdfPreview.json":[54,54],"./PdfTable.json":[5762,762],"./plugin-route-context-module-100.json":[8462,462],"./styled.json":[9721,721]};function a(s){if(!e.o(n,s))return Promise.resolve().then((()=>{var t=new Error("Cannot find module '"+s+"'");throw t.code="MODULE_NOT_FOUND",t}));var t=n[s],a=t[0];return e.e(t[1]).then((()=>e.t(a,19)))}a.keys=()=>Object.keys(n),a.id=9351,s.exports=a},4792:(s,t,e)=>{"use strict";e.r(t),e.d(t,{assets:()=>L,contentTitle:()=>B,default:()=>W,frontMatter:()=>j,metadata:()=>H,toc:()=>O});var n=e(5250),a=e(4012),l=e(79),o=e(603),p=e(9131),r=e(2673);const c=function(s){return void 0===s&&(s={}),{content:[],onUpdate:()=>{},otherDocumentDefinitions:{},...s}},i=(0,l.createContext)({updateDocumentDefinitions:()=>{},headerContainer:c(),footerContainer:c()});i.displayName="PdfContext";const d=i.Provider,y=()=>(0,l.useContext)(i),C="pdf-",D={},v={},m={supportsMutation:!1,supportsPersistence:!0,supportsHydration:!1,createInstance:(s,t)=>{if("pdf-array"===s)return[];const{children:e,...n}=t;return{$__reactPdfMakeType:s,...n}},createTextInstance:s=>s,appendInitialChild:(s,t)=>{x(s,t)},finalizeInitialChildren:()=>!1,prepareUpdate:()=>!0,shouldSetTextContent:()=>!1,getRootHostContext:()=>D,getChildHostContext:()=>v,getPublicInstance:s=>s,prepareForCommit:()=>null,resetAfterCommit:()=>{},preparePortalMount:()=>{},scheduleTimeout:globalThis.setTimeout,cancelTimeout:globalThis.clearTimeout,beforeActiveInstanceBlur:()=>{},afterActiveInstanceBlur:()=>{},prepareScopeUpdate:()=>{},getInstanceFromScope:()=>null,detachDeletedInstance:()=>{},noTimeout:-1,isPrimaryRenderer:!0,getCurrentEventPriority:()=>r.DefaultEventPriority,getInstanceFromNode:()=>null,cloneInstance:(s,t,e,n,a,l,o)=>{const{children:p,...r}=a,c=u(e),i=o?p:void 0;if(null===c){if("pdf-array"===e&&Array.isArray(p))return i??[];throw new Error("Unexpected branch during cloneInstance")}return{$__reactPdfMakeType:e,[c]:i,...r}},createContainerChildSet:()=>[],appendChildToContainerChildSet:(s,t)=>{s.push(t)},finalizeContainerChildren:(s,t)=>{const e=1===t.length?t[0]:t;s.content=e,s.onUpdate({...s.otherDocumentDefinitions,content:e})},replaceContainerChildren:()=>{},cloneHiddenInstance:()=>{throw new Error("Clone hidden instance not implemented")},cloneHiddenTextInstance:()=>{throw new Error("Clone hidden text instance not implemented")}},x=(s,t)=>{const e=F(t);if("object"!=typeof s)throw new Error("Cannot append to text instance");if(Array.isArray(s))return void s.push(e);const n=s.$__reactPdfMakeType,a=u(n);if(null===a)return;const l=P(s);if(void 0===l){if("body"===a||"columns"===a||"stack"===a)return void(s[a]=[e]);s[a]=e}else Array.isArray(l)?s[a]=[...l,e]:s[a]=[l,e]},u=s=>{if("pdf-array"===s)return null;const t=(s=>{if(0!==s.indexOf(C))throw new Error("Unsupported element: "+s);return s.slice(4)})(s);return"tbody"===t?"body":"toc"===t?"title":t},f=s=>"object"==typeof s&&null!==s&&!Array.isArray(s),P=s=>{const t=s.$__reactPdfMakeType,e=u(t);if(null!==e)return s[e]},F=s=>{if(f(s)){const t=s.$__reactPdfMakeType;if("pdf-cell"===t||"pdf-column"===t||"pdf-li"===t){const t=P(s);if(void 0===t||!f(t))return console.log("This element requires a single PDF element as children. Received: ",t),s;const{$__reactPdfMakeType:e,...n}=s,a=u(s.$__reactPdfMakeType);return null!==a&&delete n[a],{...n,...t}}}return s},h=p(m);h.injectIntoDevTools({findFiberByHostInstance:()=>null,bundleType:1,version:"0.0.4",rendererPackageName:"react-pdfmake-reconciler"});const M={render:(s,t)=>{const e=c({onUpdate:t}),a=c(),l=c(),o=h.createContainer(e,0,null,!0,!1,"",(()=>{}),null);return h.updateContainer((0,n.jsx)(d,{value:{updateDocumentDefinitions:s=>{e.otherDocumentDefinitions={...e.otherDocumentDefinitions,...s},t({...e.otherDocumentDefinitions,content:e.content})},headerContainer:a,footerContainer:l},children:s}),o,null),{container:e,root:o,unmount:()=>{h.updateContainer(null,o,null)}}},renderOnce:s=>{const{container:t,unmount:e}=M.render(s,(()=>{}));h.flushSync();const n=t.content;return e(),{...t.otherDocumentDefinitions,content:n}}},T={Roboto:{normal:"https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/fonts/Roboto/Roboto-Regular.ttf",bold:"https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/fonts/Roboto/Roboto-Medium.ttf",italics:"https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/fonts/Roboto/Roboto-Italic.ttf",bolditalics:"https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/fonts/Roboto/Roboto-MediumItalic.ttf"}},g=s=>{let{children:t,tableLayouts:e,fonts:a,...l}=s;const o=E(t),p=R(o,e,a);return(0,n.jsx)("iframe",{src:null!==p?p:"data/html,<p>Loading...</p>",...l})},R=(s,t,e)=>{const[n,a]=(0,l.useState)(null),p=(0,l.useMemo)((()=>function(s,t){let e;return function(){for(var n=arguments.length,a=new Array(n),l=0;l<n;l++)a[l]=arguments[l];clearTimeout(e),e=setTimeout((()=>{s(...a)}),t)}}((s=>{o.createPdf(s,t,e??T).getBlob((s=>{a(URL.createObjectURL(s))}))}),50)),[t,e]);return(0,l.useEffect)((()=>{p(s)}),[s,p]),n},E=s=>{const[t,e]=(0,l.useState)({content:[]});return(0,l.useEffect)((()=>{const{unmount:t}=M.render(s,e);return t}),[s]),t};const b=s=>{let{rows:t,layout:e,...a}=s;return(0,n.jsx)("pdf-table",{layout:e,children:(0,n.jsx)("pdf-tbody",{...a,children:t.map(((s,t)=>(0,n.jsx)("pdf-array",{children:s.map(((s,t)=>(0,n.jsx)(l.Fragment,{children:s},t)))},t)))})})},w=s=>{let{children:t,...e}=s;const{updateDocumentDefinitions:n}=y();return(0,l.useEffect)((()=>{n(e)}),[e,n]),t};w.displayName="PdfDocument";const A=(s,t,e)=>{const n=e=>{let{children:n}=e;const{updateDocumentDefinitions:a,[s]:o}=y();return(0,l.useEffect)((()=>{a("function"==typeof n?{[t]:function(){return M.renderOnce("function"==typeof n?n(...arguments):n).content}}:{[t]:o.content})}),[n,o.content,a]),"function"==typeof n?null:h.createPortal(n,o,null,null)};return n.displayName=e,n},k=(A("headerContainer","header","PdfHeader"),A("footerContainer","footer","PdfFooter"),(0,l.createContext)({}));k.Provider;var S=e(426);const j={},B="PdfPreview",H={id:"jsx/util-components/pdf-preview",title:"PdfPreview",description:"Test out PDF JSX in your browser and inspect with React Development Tools. This component runs the full React update loop as mentioned in PdfRenderer. So it will react to the typical rerendering signals (state update, parent rerender, etc.).",source:"@site/docs/jsx/util-components/pdf-preview.mdx",sourceDirName:"jsx/util-components",slug:"/jsx/util-components/pdf-preview",permalink:"/react-pdfmake-reconciler/docs/jsx/util-components/pdf-preview",draft:!1,unlisted:!1,editUrl:"https://github.com/danvim/react-pdfmake-reconciler/tree/master/docs/docs/jsx/util-components/pdf-preview.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"React Utility components",permalink:"/react-pdfmake-reconciler/docs/jsx/util-components/"},next:{title:"Styled",permalink:"/react-pdfmake-reconciler/docs/styled"}},L={},O=[{value:"Props",id:"props",level:2},{value:"Example",id:"example",level:2},{value:"Regarding React Context",id:"regarding-react-context",level:2}];function I(s){const t={a:"a",code:"code",div:"div",h1:"h1",h2:"h2",p:"p","pdf-text":"pdf-text",...(0,a.a)(),...s.components},e=t["pdf-text"];return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"pdfpreview",children:"PdfPreview"}),"\n",(0,n.jsxs)(t.p,{children:["Test out PDF JSX in your browser and inspect with React Development Tools. This component runs the full React update loop as mentioned in ",(0,n.jsx)(t.a,{href:"../../renderer#render-to-react-loop",children:"PdfRenderer"}),". So it will react to the typical rerendering signals (state update, parent rerender, etc.)."]}),"\n",(0,n.jsx)(t.h2,{id:"props",children:"Props"}),"\n",(0,n.jsx)(S.n,{name:"PdfPreview"}),"\n",(0,n.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,n.jsx)(t.div,{dangerouslySetInnerHTML:{__html:'<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">tsx</div><div class=\'code-container\'><code><div class=\'line\'><span style="color: #AF00DB">import</span><span style="color: #000000"> { </span><span style="color: #001080"><data-lsp lsp=\'(alias) type FC&lt;P = {}> = FunctionComponent&lt;P>&#10;import FC\' >FC</data-lsp></span><span style="color: #000000">, </span><span style="color: #001080"><data-lsp lsp=\'(alias) const StrictMode: ExoticComponent&lt;{&#10;    children?: ReactNode | undefined;&#10;}>&#10;import StrictMode\' >StrictMode</data-lsp></span><span style="color: #000000"> } </span><span style="color: #AF00DB">from</span><span style="color: #000000"> </span><span style="color: #A31515">"react"</span><span style="color: #000000">;</span></div><div class=\'line\'><span style="color: #AF00DB">import</span><span style="color: #000000"> { </span><span style="color: #001080"><data-lsp lsp=\'(alias) const PdfPreview: FC&lt;PdfPreviewProps>&#10;import PdfPreview\' >PdfPreview</data-lsp></span><span style="color: #000000"> } </span><span style="color: #AF00DB">from</span><span style="color: #000000"> </span><span style="color: #A31515">"react-pdfmake-reconciler"</span><span style="color: #000000">;</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #AF00DB">export</span><span style="color: #000000"> </span><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp=\'const App: React.FC\' >App</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp=\'(alias) type FC&lt;P = {}> = FunctionComponent&lt;P>&#10;import FC\' >FC</data-lsp></span><span style="color: #000000"> = () </span><span style="color: #0000FF">=&gt;</span><span style="color: #000000"> (</span></div><div class=\'line\'><span style="color: #000000">  </span><span style="color: #800000">&lt;<data-lsp lsp=\'(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>\' >div</data-lsp>></span></div><div class=\'line\'><span style="color: #000000">    </span><span style="color: #800000">&lt;</span><span style="color: #267F99"><data-lsp lsp=\'(alias) const PdfPreview: FC&lt;PdfPreviewProps>&#10;import PdfPreview\' >PdfPreview</data-lsp></span><span style="color: #800000">&gt;</span></div><div class=\'line\'><span style="color: #000000">      </span><span style="color: #0000FF">{</span><span style="color: #008000">/* Optional */</span><span style="color: #0000FF">}</span></div><div class=\'line\'><span style="color: #000000">      </span><span style="color: #800000">&lt;</span><span style="color: #267F99"><data-lsp lsp=\'(alias) const StrictMode: ExoticComponent&lt;{&#10;    children?: ReactNode | undefined;&#10;}>&#10;import StrictMode\' >StrictMode</data-lsp></span><span style="color: #800000">&gt;</span></div><div class=\'line\'><span style="color: #000000">        </span><span style="color: #0000FF">{</span><span style="color: #008000">/* Only use components that resolves to pdf-* components from here on out. DOM elements won&apos;t work. */</span><span style="color: #0000FF">}</span></div><div class=\'line\'><span style="color: #000000">        </span><span style="color: #800000">&lt;</span><span style="color: #267F99"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >pdf-text</data-lsp></span><span style="color: #800000">&gt;</span><span style="color: #000000">Hello World!</span><span style="color: #800000">&lt;/</span><span style="color: #267F99"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >pdf-text</data-lsp></span><span style="color: #800000">&gt;</span></div><div class=\'line\'><span style="color: #000000">      </span><span style="color: #800000">&lt;/</span><span style="color: #267F99"><data-lsp lsp=\'(alias) const StrictMode: ExoticComponent&lt;{&#10;    children?: ReactNode | undefined;&#10;}>&#10;import StrictMode\' >StrictMode</data-lsp></span><span style="color: #800000">&gt;</span></div><div class=\'line\'><span style="color: #000000">    </span><span style="color: #800000">&lt;/</span><span style="color: #267F99"><data-lsp lsp=\'(alias) const PdfPreview: FC&lt;PdfPreviewProps>&#10;import PdfPreview\' >PdfPreview</data-lsp></span><span style="color: #800000">&gt;</span></div><div class=\'line\'><span style="color: #000000">  </span><span style="color: #800000">&lt;/<data-lsp lsp=\'(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>\' >div</data-lsp>></span></div><div class=\'line\'><span style="color: #000000">);</span></div></code></div></pre>\n<pre class="shiki dark-plus twoslash lsp" style="background-color: #1E1E1E; color: #D4D4D4"><div class="language-id">tsx</div><div class=\'code-container\'><code><div class=\'line\'><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> { </span><span style="color: #9CDCFE"><data-lsp lsp=\'(alias) type FC&lt;P = {}> = FunctionComponent&lt;P>&#10;import FC\' >FC</data-lsp></span><span style="color: #D4D4D4">, </span><span style="color: #9CDCFE"><data-lsp lsp=\'(alias) const StrictMode: ExoticComponent&lt;{&#10;    children?: ReactNode | undefined;&#10;}>&#10;import StrictMode\' >StrictMode</data-lsp></span><span style="color: #D4D4D4"> } </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">"react"</span><span style="color: #D4D4D4">;</span></div><div class=\'line\'><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> { </span><span style="color: #9CDCFE"><data-lsp lsp=\'(alias) const PdfPreview: FC&lt;PdfPreviewProps>&#10;import PdfPreview\' >PdfPreview</data-lsp></span><span style="color: #D4D4D4"> } </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">"react-pdfmake-reconciler"</span><span style="color: #D4D4D4">;</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #C586C0">export</span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #DCDCAA"><data-lsp lsp=\'const App: React.FC\' >App</data-lsp></span><span style="color: #D4D4D4">: </span><span style="color: #4EC9B0"><data-lsp lsp=\'(alias) type FC&lt;P = {}> = FunctionComponent&lt;P>&#10;import FC\' >FC</data-lsp></span><span style="color: #D4D4D4"> = () </span><span style="color: #569CD6">=&gt;</span><span style="color: #D4D4D4"> (</span></div><div class=\'line\'><span style="color: #D4D4D4">  </span><span style="color: #808080">&lt;</span><span style="color: #569CD6"><data-lsp lsp=\'(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>\' >div</data-lsp></span><span style="color: #808080">&gt;</span></div><div class=\'line\'><span style="color: #D4D4D4">    </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp=\'(alias) const PdfPreview: FC&lt;PdfPreviewProps>&#10;import PdfPreview\' >PdfPreview</data-lsp></span><span style="color: #808080">&gt;</span></div><div class=\'line\'><span style="color: #D4D4D4">      </span><span style="color: #569CD6">{</span><span style="color: #6A9955">/* Optional */</span><span style="color: #569CD6">}</span></div><div class=\'line\'><span style="color: #D4D4D4">      </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp=\'(alias) const StrictMode: ExoticComponent&lt;{&#10;    children?: ReactNode | undefined;&#10;}>&#10;import StrictMode\' >StrictMode</data-lsp></span><span style="color: #808080">&gt;</span></div><div class=\'line\'><span style="color: #D4D4D4">        </span><span style="color: #569CD6">{</span><span style="color: #6A9955">/* Only use components that resolves to pdf-* components from here on out. DOM elements won&apos;t work. */</span><span style="color: #569CD6">}</span></div><div class=\'line\'><span style="color: #D4D4D4">        </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >pdf-text</data-lsp></span><span style="color: #808080">&gt;</span><span style="color: #D4D4D4">Hello World!</span><span style="color: #808080">&lt;/</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >pdf-text</data-lsp></span><span style="color: #808080">&gt;</span></div><div class=\'line\'><span style="color: #D4D4D4">      </span><span style="color: #808080">&lt;/</span><span style="color: #4EC9B0"><data-lsp lsp=\'(alias) const StrictMode: ExoticComponent&lt;{&#10;    children?: ReactNode | undefined;&#10;}>&#10;import StrictMode\' >StrictMode</data-lsp></span><span style="color: #808080">&gt;</span></div><div class=\'line\'><span style="color: #D4D4D4">    </span><span style="color: #808080">&lt;/</span><span style="color: #4EC9B0"><data-lsp lsp=\'(alias) const PdfPreview: FC&lt;PdfPreviewProps>&#10;import PdfPreview\' >PdfPreview</data-lsp></span><span style="color: #808080">&gt;</span></div><div class=\'line\'><span style="color: #D4D4D4">  </span><span style="color: #808080">&lt;/</span><span style="color: #569CD6"><data-lsp lsp=\'(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>\' >div</data-lsp></span><span style="color: #808080">&gt;</span></div><div class=\'line\'><span style="color: #D4D4D4">);</span></div></code></div></pre>'}}),"\n",(0,n.jsx)(t.p,{children:"The PDF is then mounted onto your React app as an iframe. This only works well when you are debugging your PDF setup on a desktop browser. Try opening your React Development Tools, you should see the PDF section being mounted at the very bottom of the tree."}),"\n",(0,n.jsx)(t.p,{children:"You should see something like this:"}),"\n",(0,n.jsx)(t.div,{dangerouslySetInnerHTML:{__html:'<pre class="shiki light-plus" style="background-color: #FFFFFF; color: #000000"><div class=\'code-container\'><code><div class=\'line\'><span style="color: undefined">PdfContext.Provider</span></div><div class=\'line\'><span style="color: undefined">  \u2514 Y \u2b05\ufe0f The PdfTable component</span></div><div class=\'line\'><span style="color: undefined">    \u251c Fragment key="0-0"</span></div><div class=\'line\'><span style="color: undefined">    \u251c Fragment key="0-1"</span></div><div class=\'line\'><span style="color: undefined">    \u251c Fragment key="1-0"</span></div><div class=\'line\'><span style="color: undefined">    \u2514 Fragment key="1-1"</span></div></code></div></pre>\n<pre class="shiki dark-plus" style="background-color: #1E1E1E; color: #D4D4D4"><div class=\'code-container\'><code><div class=\'line\'><span style="color: undefined">PdfContext.Provider</span></div><div class=\'line\'><span style="color: undefined">  \u2514 Y \u2b05\ufe0f The PdfTable component</span></div><div class=\'line\'><span style="color: undefined">    \u251c Fragment key="0-0"</span></div><div class=\'line\'><span style="color: undefined">    \u251c Fragment key="0-1"</span></div><div class=\'line\'><span style="color: undefined">    \u251c Fragment key="1-0"</span></div><div class=\'line\'><span style="color: undefined">    \u2514 Fragment key="1-1"</span></div></code></div></pre>'}}),"\n",(0,n.jsx)(g,{style:{width:"100%",height:500},children:(0,n.jsxs)(l.StrictMode,{children:[(0,n.jsx)("pdf-text",{children:"Hello world!"}),(0,n.jsx)(b,{rows:[[(0,n.jsx)(e,{children:"Heading 1"}),(0,n.jsx)(e,{children:"Heading 2"})],[(0,n.jsx)(e,{children:"Cell 1"}),(0,n.jsx)(e,{children:"Cell 2"})]]})]})}),"\n",(0,n.jsx)(t.h2,{id:"regarding-react-context",children:"Regarding React Context"}),"\n",(0,n.jsxs)(t.p,{children:["React Context does not penetrate through ",(0,n.jsx)(t.code,{children:"<PdfPreview>"}),". If you need to pass in values within your Context, consider reapplying the Context inside."]}),"\n",(0,n.jsx)(t.div,{dangerouslySetInnerHTML:{__html:'<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">tsx</div><div class=\'code-container\'><code><div class=\'line dim\'><span style="color: #008000">// @filename: App.tsx</span></div><div class=\'line dim\'><span style="color: #AF00DB">import</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp=\'(alias) namespace React&#10;import React\' >React</data-lsp></span><span style="color: #000000">, { </span><span style="color: #001080"><data-lsp lsp=\'(alias) type FC&lt;P = {}> = FunctionComponent&lt;P>&#10;import FC\' >FC</data-lsp></span><span style="color: #000000"> } </span><span style="color: #AF00DB">from</span><span style="color: #000000"> </span><span style="color: #A31515">"react"</span><span style="color: #000000">;</span></div><div class=\'line dim\'><span style="color: #AF00DB">import</span><span style="color: #000000"> { </span><span style="color: #001080"><data-lsp lsp=\'(alias) const MyContext: React.Context&lt;MyContextType>&#10;import MyContext\' >MyContext</data-lsp></span><span style="color: #000000"> } </span><span style="color: #AF00DB">from</span><span style="color: #000000"> </span><span style="color: #A31515">"./MyContext"</span><span style="color: #000000">;</span></div><div class=\'line dim\'><span style="color: #AF00DB">import</span><span style="color: #000000"> { </span><span style="color: #001080"><data-lsp lsp=\'(alias) const PreviewWrapper: React.FC&#10;import PreviewWrapper\' >PreviewWrapper</data-lsp></span><span style="color: #000000"> } </span><span style="color: #AF00DB">from</span><span style="color: #000000"> </span><span style="color: #A31515">"./PreviewWrapper"</span><span style="color: #000000">;</span></div><div class=\'line dim\'>&nbsp;</div><div class=\'line dim\'><span style="color: #AF00DB">export</span><span style="color: #000000"> </span><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp=\'const App: React.FC\' >App</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp=\'(alias) type FC&lt;P = {}> = FunctionComponent&lt;P>&#10;import FC\' >FC</data-lsp></span><span style="color: #000000"> = () </span><span style="color: #0000FF">=&gt;</span><span style="color: #000000"> (</span></div><div class=\'line dim\'><span style="color: #000000">  </span><span style="color: #800000">&lt;<data-lsp lsp=\'(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>\' >div</data-lsp>></span></div><div class=\'line highlight\'><span style="color: #000000">    </span><span style="color: #0000FF">{</span><span style="color: #008000">/* Normal app Context */</span><span style="color: #0000FF">}</span></div><div class=\'line highlight\'><span style="color: #000000">    </span><span style="color: #800000">&lt;</span><span style="color: #267F99"><data-lsp lsp=\'(alias) const MyContext: React.Context&lt;MyContextType>&#10;import MyContext\' >MyContext</data-lsp>.<data-lsp lsp=\'(property) React.Context&lt;MyContextType>.Provider: React.Provider&lt;MyContextType>\' >Provider</data-lsp></span><span style="color: #000000"> </span><span style="color: #FF0000"><data-lsp lsp=\'(property) React.ProviderProps&lt;MyContextType>.value: MyContextType\' >value</data-lsp></span><span style="color: #000000">=</span><span style="color: #0000FF">{</span><span style="color: #000000FF">{ </span><span style="color: #001080"><data-lsp lsp=\'(property) MyContextType.bestSnack: string | null\' >bestSnack</data-lsp>:</span><span style="color: #000000FF"> </span><span style="color: #A31515">"chips"</span><span style="color: #000000FF"> }</span><span style="color: #0000FF">}</span><span style="color: #800000">&gt;</span></div><div class=\'line highlight\'><span style="color: #000000">      </span><span style="color: #800000">&lt;</span><span style="color: #267F99"><data-lsp lsp=\'(alias) const PreviewWrapper: React.FC&#10;import PreviewWrapper\' >PreviewWrapper</data-lsp></span><span style="color: #000000"> </span><span style="color: #800000">/&gt;</span></div><div class=\'line highlight\'><span style="color: #000000">    </span><span style="color: #800000">&lt;/</span><span style="color: #267F99"><data-lsp lsp=\'(alias) const MyContext: React.Context&lt;MyContextType>&#10;import MyContext\' >MyContext</data-lsp>.<data-lsp lsp=\'(property) React.Context&lt;MyContextType>.Provider: React.Provider&lt;MyContextType>\' >Provider</data-lsp></span><span style="color: #800000">&gt;</span></div><div class=\'line dim\'><span style="color: #000000">  </span><span style="color: #800000">&lt;/<data-lsp lsp=\'(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>\' >div</data-lsp>></span></div><div class=\'line dim\'><span style="color: #000000">);</span></div><div class=\'line dim\'>&nbsp;</div><div class=\'line dim\'><span style="color: #008000">// @filename: PreviewWrapper.tsx</span></div><div class=\'line dim\'><span style="color: #AF00DB">import</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp=\'(alias) namespace React&#10;import React\' >React</data-lsp></span><span style="color: #000000">, { </span><span style="color: #001080"><data-lsp lsp=\'(alias) type FC&lt;P = {}> = FunctionComponent&lt;P>&#10;import FC\' >FC</data-lsp></span><span style="color: #000000">, </span><span style="color: #001080"><data-lsp lsp=\'(alias) const StrictMode: ExoticComponent&lt;{&#10;    children?: ReactNode | undefined;&#10;}>&#10;import StrictMode\' >StrictMode</data-lsp></span><span style="color: #000000">, </span><span style="color: #001080"><data-lsp lsp=\'Accepts a context object (the value returned from `React.createContext`) and returns the current&#10;context value, as given by the nearest context provider for the given context.&#10;&#10;(alias) function useContext&lt;T>(context: Context&lt;T>): T&#10;import useContext\' >useContext</data-lsp></span><span style="color: #000000"> } </span><span style="color: #AF00DB">from</span><span style="color: #000000"> </span><span style="color: #A31515">"react"</span><span style="color: #000000">;</span></div><div class=\'line dim\'><span style="color: #AF00DB">import</span><span style="color: #000000"> { </span><span style="color: #001080"><data-lsp lsp=\'(alias) const PdfPreview: FC&lt;PdfPreviewProps>&#10;import PdfPreview\' >PdfPreview</data-lsp></span><span style="color: #000000"> } </span><span style="color: #AF00DB">from</span><span style="color: #000000"> </span><span style="color: #A31515">"react-pdfmake-reconciler"</span><span style="color: #000000">;</span></div><div class=\'line dim\'><span style="color: #AF00DB">import</span><span style="color: #000000"> { </span><span style="color: #001080"><data-lsp lsp=\'(alias) const MyContext: React.Context&lt;MyContextType>&#10;import MyContext\' >MyContext</data-lsp></span><span style="color: #000000"> } </span><span style="color: #AF00DB">from</span><span style="color: #000000"> </span><span style="color: #A31515">"./MyContext"</span><span style="color: #000000">;</span></div><div class=\'line dim\'><span style="color: #AF00DB">import</span><span style="color: #000000"> { </span><span style="color: #001080"><data-lsp lsp=\'(alias) const PdfSnack: React.FC&#10;import PdfSnack\' >PdfSnack</data-lsp></span><span style="color: #000000"> } </span><span style="color: #AF00DB">from</span><span style="color: #000000"> </span><span style="color: #A31515">"./PdfSnack"</span><span style="color: #000000">;</span></div><div class=\'line dim\'>&nbsp;</div><div class=\'line dim\'><span style="color: #AF00DB">export</span><span style="color: #000000"> </span><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp=\'const PreviewWrapper: React.FC\' >PreviewWrapper</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp=\'(alias) type FC&lt;P = {}> = FunctionComponent&lt;P>&#10;import FC\' >FC</data-lsp></span><span style="color: #000000"> = () </span><span style="color: #0000FF">=&gt;</span><span style="color: #000000"> {</span></div><div class=\'line dim\'><span style="color: #000000">  </span><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp=\'const myContext: MyContextType\' >myContext</data-lsp></span><span style="color: #000000"> = </span><span style="color: #795E26"><data-lsp lsp=\'Accepts a context object (the value returned from `React.createContext`) and returns the current&#10;context value, as given by the nearest context provider for the given context.&#10;&#10;(alias) useContext&lt;MyContextType>(context: React.Context&lt;MyContextType>): MyContextType&#10;import useContext\' >useContext</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp=\'(alias) const MyContext: React.Context&lt;MyContextType>&#10;import MyContext\' >MyContext</data-lsp></span><span style="color: #000000">);</span></div><div class=\'line dim\'>&nbsp;</div><div class=\'line dim\'><span style="color: #000000">  </span><span style="color: #AF00DB">return</span><span style="color: #000000"> (</span></div><div class=\'line dim\'><span style="color: #000000">    </span><span style="color: #800000">&lt;</span><span style="color: #267F99"><data-lsp lsp=\'(alias) const PdfPreview: FC&lt;PdfPreviewProps>&#10;import PdfPreview\' >PdfPreview</data-lsp></span><span style="color: #800000">&gt;</span></div><div class=\'line dim\'><span style="color: #000000">      </span><span style="color: #800000">&lt;</span><span style="color: #267F99"><data-lsp lsp=\'(alias) const StrictMode: ExoticComponent&lt;{&#10;    children?: ReactNode | undefined;&#10;}>&#10;import StrictMode\' >StrictMode</data-lsp></span><span style="color: #800000">&gt;</span></div><div class=\'line highlight\'><span style="color: #000000">        </span><span style="color: #0000FF">{</span><span style="color: #008000">/* Forward needed Context for PDF rendering */</span><span style="color: #0000FF">}</span></div><div class=\'line highlight\'><span style="color: #000000">        </span><span style="color: #800000">&lt;</span><span style="color: #267F99"><data-lsp lsp=\'(alias) const MyContext: React.Context&lt;MyContextType>&#10;import MyContext\' >MyContext</data-lsp>.<data-lsp lsp=\'(property) React.Context&lt;MyContextType>.Provider: React.Provider&lt;MyContextType>\' >Provider</data-lsp></span><span style="color: #000000"> </span><span style="color: #FF0000"><data-lsp lsp=\'(property) React.ProviderProps&lt;MyContextType>.value: MyContextType\' >value</data-lsp></span><span style="color: #000000">=</span><span style="color: #0000FF">{</span><span style="color: #001080"><data-lsp lsp=\'const myContext: MyContextType\' >myContext</data-lsp></span><span style="color: #0000FF">}</span><span style="color: #800000">&gt;</span></div><div class=\'line highlight\'><span style="color: #000000">          </span><span style="color: #800000">&lt;</span><span style="color: #267F99"><data-lsp lsp=\'(alias) const PdfSnack: React.FC&#10;import PdfSnack\' >PdfSnack</data-lsp></span><span style="color: #000000"> </span><span style="color: #800000">/&gt;</span></div><div class=\'line highlight\'><span style="color: #000000">        </span><span style="color: #800000">&lt;/</span><span style="color: #267F99"><data-lsp lsp=\'(alias) const MyContext: React.Context&lt;MyContextType>&#10;import MyContext\' >MyContext</data-lsp>.<data-lsp lsp=\'(property) React.Context&lt;MyContextType>.Provider: React.Provider&lt;MyContextType>\' >Provider</data-lsp></span><span style="color: #800000">&gt;</span></div><div class=\'line dim\'><span style="color: #000000">      </span><span style="color: #800000">&lt;/</span><span style="color: #267F99"><data-lsp lsp=\'(alias) const StrictMode: ExoticComponent&lt;{&#10;    children?: ReactNode | undefined;&#10;}>&#10;import StrictMode\' >StrictMode</data-lsp></span><span style="color: #800000">&gt;</span></div><div class=\'line dim\'><span style="color: #000000">    </span><span style="color: #800000">&lt;/</span><span style="color: #267F99"><data-lsp lsp=\'(alias) const PdfPreview: FC&lt;PdfPreviewProps>&#10;import PdfPreview\' >PdfPreview</data-lsp></span><span style="color: #800000">&gt;</span></div><div class=\'line dim\'><span style="color: #000000">  );</span></div><div class=\'line dim\'><span style="color: #000000">};</span></div><div class=\'line dim\'>&nbsp;</div><div class=\'line dim\'><span style="color: #008000">// @filename: PdfSnack.tsx</span></div><div class=\'line dim\'><span style="color: #AF00DB">import</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp=\'(alias) namespace React&#10;import React\' >React</data-lsp></span><span style="color: #000000">, { </span><span style="color: #001080"><data-lsp lsp=\'(alias) type FC&lt;P = {}> = FunctionComponent&lt;P>&#10;import FC\' >FC</data-lsp></span><span style="color: #000000">, </span><span style="color: #001080"><data-lsp lsp=\'Accepts a context object (the value returned from `React.createContext`) and returns the current&#10;context value, as given by the nearest context provider for the given context.&#10;&#10;(alias) function useContext&lt;T>(context: Context&lt;T>): T&#10;import useContext\' >useContext</data-lsp></span><span style="color: #000000"> } </span><span style="color: #AF00DB">from</span><span style="color: #000000"> </span><span style="color: #A31515">"react"</span><span style="color: #000000">;</span></div><div class=\'line dim\'><span style="color: #AF00DB">import</span><span style="color: #000000"> { </span><span style="color: #001080"><data-lsp lsp=\'(alias) const MyContext: React.Context&lt;MyContextType>&#10;import MyContext\' >MyContext</data-lsp></span><span style="color: #000000"> } </span><span style="color: #AF00DB">from</span><span style="color: #000000"> </span><span style="color: #A31515">"./MyContext"</span><span style="color: #000000">;</span></div><div class=\'line dim\'>&nbsp;</div><div class=\'line dim\'><span style="color: #AF00DB">export</span><span style="color: #000000"> </span><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp=\'const PdfSnack: React.FC\' >PdfSnack</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp=\'(alias) type FC&lt;P = {}> = FunctionComponent&lt;P>&#10;import FC\' >FC</data-lsp></span><span style="color: #000000"> = () </span><span style="color: #0000FF">=&gt;</span><span style="color: #000000"> {</span></div><div class=\'line dim\'><span style="color: #000000">  </span><span style="color: #0000FF">const</span><span style="color: #000000"> { </span><span style="color: #0070C1"><data-lsp lsp=\'const bestSnack: string | null\' >bestSnack</data-lsp></span><span style="color: #000000"> } = </span><span style="color: #795E26"><data-lsp lsp=\'Accepts a context object (the value returned from `React.createContext`) and returns the current&#10;context value, as given by the nearest context provider for the given context.&#10;&#10;(alias) useContext&lt;MyContextType>(context: React.Context&lt;MyContextType>): MyContextType&#10;import useContext\' >useContext</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp=\'(alias) const MyContext: React.Context&lt;MyContextType>&#10;import MyContext\' >MyContext</data-lsp></span><span style="color: #000000">);</span></div><div class=\'line dim\'>&nbsp;</div><div class=\'line dim\'><span style="color: #000000">  </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #800000">&lt;</span><span style="color: #267F99"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >pdf-text</data-lsp></span><span style="color: #800000">&gt;</span><span style="color: #0000FF">{</span><span style="color: #001080"><data-lsp lsp=\'const bestSnack: string | null\' >bestSnack</data-lsp></span><span style="color: #0000FF">}</span><span style="color: #800000">&lt;/</span><span style="color: #267F99"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >pdf-text</data-lsp></span><span style="color: #800000">&gt;</span><span style="color: #000000">;</span></div><div class=\'line dim\'><span style="color: #000000">};</span></div><div class=\'line dim\'>&nbsp;</div><div class=\'line dim\'><span style="color: #008000">// @filename: MyContext.tsx</span></div><div class=\'line dim\'><span style="color: #AF00DB">import</span><span style="color: #000000"> { </span><span style="color: #001080"><data-lsp lsp=\'(alias) function createContext&lt;T>(defaultValue: T): Context&lt;T>&#10;import createContext\' >createContext</data-lsp></span><span style="color: #000000">, </span><span style="color: #001080"><data-lsp lsp=\'Accepts a context object (the value returned from `React.createContext`) and returns the current&#10;context value, as given by the nearest context provider for the given context.&#10;&#10;(alias) function useContext&lt;T>(context: Context&lt;T>): T&#10;import useContext\' >useContext</data-lsp></span><span style="color: #000000"> } </span><span style="color: #AF00DB">from</span><span style="color: #000000"> </span><span style="color: #A31515">"react"</span><span style="color: #000000">;</span></div><div class=\'line dim\'>&nbsp;</div><div class=\'line dim\'><span style="color: #0000FF">interface</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp=\'interface MyContextType\' >MyContextType</data-lsp></span><span style="color: #000000"> {</span></div><div class=\'line dim\'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp=\'(property) MyContextType.bestSnack: string | null\' >bestSnack</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000"> | </span><span style="color: #267F99">null</span><span style="color: #000000">;</span></div><div class=\'line dim\'><span style="color: #000000">}</span></div><div class=\'line dim\'>&nbsp;</div><div class=\'line dim\'><span style="color: #AF00DB">export</span><span style="color: #000000"> </span><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp=\'const MyContext: React.Context&lt;MyContextType>\' >MyContext</data-lsp></span><span style="color: #000000"> = </span><span style="color: #795E26"><data-lsp lsp=\'(alias) createContext&lt;MyContextType>(defaultValue: MyContextType): React.Context&lt;MyContextType>&#10;import createContext\' >createContext</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp=\'interface MyContextType\' >MyContextType</data-lsp></span><span style="color: #000000">&gt;({</span></div><div class=\'line dim\'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp=\'(property) MyContextType.bestSnack: string | null\' >bestSnack</data-lsp>:</span><span style="color: #000000"> </span><span style="color: #0000FF">null</span><span style="color: #000000">,</span></div><div class=\'line dim\'><span style="color: #000000">});</span></div></code></div></pre>\n<pre class="shiki dark-plus twoslash lsp" style="background-color: #1E1E1E; color: #D4D4D4"><div class="language-id">tsx</div><div class=\'code-container\'><code><div class=\'line dim\'><span style="color: #6A9955">// @filename: App.tsx</span></div><div class=\'line dim\'><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> </span><span style="color: #9CDCFE"><data-lsp lsp=\'(alias) namespace React&#10;import React\' >React</data-lsp></span><span style="color: #D4D4D4">, { </span><span style="color: #9CDCFE"><data-lsp lsp=\'(alias) type FC&lt;P = {}> = FunctionComponent&lt;P>&#10;import FC\' >FC</data-lsp></span><span style="color: #D4D4D4"> } </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">"react"</span><span style="color: #D4D4D4">;</span></div><div class=\'line dim\'><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> { </span><span style="color: #9CDCFE"><data-lsp lsp=\'(alias) const MyContext: React.Context&lt;MyContextType>&#10;import MyContext\' >MyContext</data-lsp></span><span style="color: #D4D4D4"> } </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">"./MyContext"</span><span style="color: #D4D4D4">;</span></div><div class=\'line dim\'><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> { </span><span style="color: #9CDCFE"><data-lsp lsp=\'(alias) const PreviewWrapper: React.FC&#10;import PreviewWrapper\' >PreviewWrapper</data-lsp></span><span style="color: #D4D4D4"> } </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">"./PreviewWrapper"</span><span style="color: #D4D4D4">;</span></div><div class=\'line dim\'>&nbsp;</div><div class=\'line dim\'><span style="color: #C586C0">export</span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #DCDCAA"><data-lsp lsp=\'const App: React.FC\' >App</data-lsp></span><span style="color: #D4D4D4">: </span><span style="color: #4EC9B0"><data-lsp lsp=\'(alias) type FC&lt;P = {}> = FunctionComponent&lt;P>&#10;import FC\' >FC</data-lsp></span><span style="color: #D4D4D4"> = () </span><span style="color: #569CD6">=&gt;</span><span style="color: #D4D4D4"> (</span></div><div class=\'line dim\'><span style="color: #D4D4D4">  </span><span style="color: #808080">&lt;</span><span style="color: #569CD6"><data-lsp lsp=\'(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>\' >div</data-lsp></span><span style="color: #808080">&gt;</span></div><div class=\'line highlight\'><span style="color: #D4D4D4">    </span><span style="color: #569CD6">{</span><span style="color: #6A9955">/* Normal app Context */</span><span style="color: #569CD6">}</span></div><div class=\'line highlight\'><span style="color: #D4D4D4">    </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp=\'(alias) const MyContext: React.Context&lt;MyContextType>&#10;import MyContext\' >MyContext</data-lsp>.<data-lsp lsp=\'(property) React.Context&lt;MyContextType>.Provider: React.Provider&lt;MyContextType>\' >Provider</data-lsp></span><span style="color: #D4D4D4"> </span><span style="color: #9CDCFE"><data-lsp lsp=\'(property) React.ProviderProps&lt;MyContextType>.value: MyContextType\' >value</data-lsp></span><span style="color: #D4D4D4">=</span><span style="color: #569CD6">{</span><span style="color: #D4D4D4">{ </span><span style="color: #9CDCFE"><data-lsp lsp=\'(property) MyContextType.bestSnack: string | null\' >bestSnack</data-lsp>:</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">"chips"</span><span style="color: #D4D4D4"> }</span><span style="color: #569CD6">}</span><span style="color: #808080">&gt;</span></div><div class=\'line highlight\'><span style="color: #D4D4D4">      </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp=\'(alias) const PreviewWrapper: React.FC&#10;import PreviewWrapper\' >PreviewWrapper</data-lsp></span><span style="color: #D4D4D4"> </span><span style="color: #808080">/&gt;</span></div><div class=\'line highlight\'><span style="color: #D4D4D4">    </span><span style="color: #808080">&lt;/</span><span style="color: #4EC9B0"><data-lsp lsp=\'(alias) const MyContext: React.Context&lt;MyContextType>&#10;import MyContext\' >MyContext</data-lsp>.<data-lsp lsp=\'(property) React.Context&lt;MyContextType>.Provider: React.Provider&lt;MyContextType>\' >Provider</data-lsp></span><span style="color: #808080">&gt;</span></div><div class=\'line dim\'><span style="color: #D4D4D4">  </span><span style="color: #808080">&lt;/</span><span style="color: #569CD6"><data-lsp lsp=\'(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>\' >div</data-lsp></span><span style="color: #808080">&gt;</span></div><div class=\'line dim\'><span style="color: #D4D4D4">);</span></div><div class=\'line dim\'>&nbsp;</div><div class=\'line dim\'><span style="color: #6A9955">// @filename: PreviewWrapper.tsx</span></div><div class=\'line dim\'><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> </span><span style="color: #9CDCFE"><data-lsp lsp=\'(alias) namespace React&#10;import React\' >React</data-lsp></span><span style="color: #D4D4D4">, { </span><span style="color: #9CDCFE"><data-lsp lsp=\'(alias) type FC&lt;P = {}> = FunctionComponent&lt;P>&#10;import FC\' >FC</data-lsp></span><span style="color: #D4D4D4">, </span><span style="color: #9CDCFE"><data-lsp lsp=\'(alias) const StrictMode: ExoticComponent&lt;{&#10;    children?: ReactNode | undefined;&#10;}>&#10;import StrictMode\' >StrictMode</data-lsp></span><span style="color: #D4D4D4">, </span><span style="color: #9CDCFE"><data-lsp lsp=\'Accepts a context object (the value returned from `React.createContext`) and returns the current&#10;context value, as given by the nearest context provider for the given context.&#10;&#10;(alias) function useContext&lt;T>(context: Context&lt;T>): T&#10;import useContext\' >useContext</data-lsp></span><span style="color: #D4D4D4"> } </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">"react"</span><span style="color: #D4D4D4">;</span></div><div class=\'line dim\'><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> { </span><span style="color: #9CDCFE"><data-lsp lsp=\'(alias) const PdfPreview: FC&lt;PdfPreviewProps>&#10;import PdfPreview\' >PdfPreview</data-lsp></span><span style="color: #D4D4D4"> } </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">"react-pdfmake-reconciler"</span><span style="color: #D4D4D4">;</span></div><div class=\'line dim\'><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> { </span><span style="color: #9CDCFE"><data-lsp lsp=\'(alias) const MyContext: React.Context&lt;MyContextType>&#10;import MyContext\' >MyContext</data-lsp></span><span style="color: #D4D4D4"> } </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">"./MyContext"</span><span style="color: #D4D4D4">;</span></div><div class=\'line dim\'><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> { </span><span style="color: #9CDCFE"><data-lsp lsp=\'(alias) const PdfSnack: React.FC&#10;import PdfSnack\' >PdfSnack</data-lsp></span><span style="color: #D4D4D4"> } </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">"./PdfSnack"</span><span style="color: #D4D4D4">;</span></div><div class=\'line dim\'>&nbsp;</div><div class=\'line dim\'><span style="color: #C586C0">export</span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #DCDCAA"><data-lsp lsp=\'const PreviewWrapper: React.FC\' >PreviewWrapper</data-lsp></span><span style="color: #D4D4D4">: </span><span style="color: #4EC9B0"><data-lsp lsp=\'(alias) type FC&lt;P = {}> = FunctionComponent&lt;P>&#10;import FC\' >FC</data-lsp></span><span style="color: #D4D4D4"> = () </span><span style="color: #569CD6">=&gt;</span><span style="color: #D4D4D4"> {</span></div><div class=\'line dim\'><span style="color: #D4D4D4">  </span><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #4FC1FF"><data-lsp lsp=\'const myContext: MyContextType\' >myContext</data-lsp></span><span style="color: #D4D4D4"> = </span><span style="color: #DCDCAA"><data-lsp lsp=\'Accepts a context object (the value returned from `React.createContext`) and returns the current&#10;context value, as given by the nearest context provider for the given context.&#10;&#10;(alias) useContext&lt;MyContextType>(context: React.Context&lt;MyContextType>): MyContextType&#10;import useContext\' >useContext</data-lsp></span><span style="color: #D4D4D4">(</span><span style="color: #9CDCFE"><data-lsp lsp=\'(alias) const MyContext: React.Context&lt;MyContextType>&#10;import MyContext\' >MyContext</data-lsp></span><span style="color: #D4D4D4">);</span></div><div class=\'line dim\'>&nbsp;</div><div class=\'line dim\'><span style="color: #D4D4D4">  </span><span style="color: #C586C0">return</span><span style="color: #D4D4D4"> (</span></div><div class=\'line dim\'><span style="color: #D4D4D4">    </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp=\'(alias) const PdfPreview: FC&lt;PdfPreviewProps>&#10;import PdfPreview\' >PdfPreview</data-lsp></span><span style="color: #808080">&gt;</span></div><div class=\'line dim\'><span style="color: #D4D4D4">      </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp=\'(alias) const StrictMode: ExoticComponent&lt;{&#10;    children?: ReactNode | undefined;&#10;}>&#10;import StrictMode\' >StrictMode</data-lsp></span><span style="color: #808080">&gt;</span></div><div class=\'line highlight\'><span style="color: #D4D4D4">        </span><span style="color: #569CD6">{</span><span style="color: #6A9955">/* Forward needed Context for PDF rendering */</span><span style="color: #569CD6">}</span></div><div class=\'line highlight\'><span style="color: #D4D4D4">        </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp=\'(alias) const MyContext: React.Context&lt;MyContextType>&#10;import MyContext\' >MyContext</data-lsp>.<data-lsp lsp=\'(property) React.Context&lt;MyContextType>.Provider: React.Provider&lt;MyContextType>\' >Provider</data-lsp></span><span style="color: #D4D4D4"> </span><span style="color: #9CDCFE"><data-lsp lsp=\'(property) React.ProviderProps&lt;MyContextType>.value: MyContextType\' >value</data-lsp></span><span style="color: #D4D4D4">=</span><span style="color: #569CD6">{</span><span style="color: #9CDCFE"><data-lsp lsp=\'const myContext: MyContextType\' >myContext</data-lsp></span><span style="color: #569CD6">}</span><span style="color: #808080">&gt;</span></div><div class=\'line highlight\'><span style="color: #D4D4D4">          </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp=\'(alias) const PdfSnack: React.FC&#10;import PdfSnack\' >PdfSnack</data-lsp></span><span style="color: #D4D4D4"> </span><span style="color: #808080">/&gt;</span></div><div class=\'line highlight\'><span style="color: #D4D4D4">        </span><span style="color: #808080">&lt;/</span><span style="color: #4EC9B0"><data-lsp lsp=\'(alias) const MyContext: React.Context&lt;MyContextType>&#10;import MyContext\' >MyContext</data-lsp>.<data-lsp lsp=\'(property) React.Context&lt;MyContextType>.Provider: React.Provider&lt;MyContextType>\' >Provider</data-lsp></span><span style="color: #808080">&gt;</span></div><div class=\'line dim\'><span style="color: #D4D4D4">      </span><span style="color: #808080">&lt;/</span><span style="color: #4EC9B0"><data-lsp lsp=\'(alias) const StrictMode: ExoticComponent&lt;{&#10;    children?: ReactNode | undefined;&#10;}>&#10;import StrictMode\' >StrictMode</data-lsp></span><span style="color: #808080">&gt;</span></div><div class=\'line dim\'><span style="color: #D4D4D4">    </span><span style="color: #808080">&lt;/</span><span style="color: #4EC9B0"><data-lsp lsp=\'(alias) const PdfPreview: FC&lt;PdfPreviewProps>&#10;import PdfPreview\' >PdfPreview</data-lsp></span><span style="color: #808080">&gt;</span></div><div class=\'line dim\'><span style="color: #D4D4D4">  );</span></div><div class=\'line dim\'><span style="color: #D4D4D4">};</span></div><div class=\'line dim\'>&nbsp;</div><div class=\'line dim\'><span style="color: #6A9955">// @filename: PdfSnack.tsx</span></div><div class=\'line dim\'><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> </span><span style="color: #9CDCFE"><data-lsp lsp=\'(alias) namespace React&#10;import React\' >React</data-lsp></span><span style="color: #D4D4D4">, { </span><span style="color: #9CDCFE"><data-lsp lsp=\'(alias) type FC&lt;P = {}> = FunctionComponent&lt;P>&#10;import FC\' >FC</data-lsp></span><span style="color: #D4D4D4">, </span><span style="color: #9CDCFE"><data-lsp lsp=\'Accepts a context object (the value returned from `React.createContext`) and returns the current&#10;context value, as given by the nearest context provider for the given context.&#10;&#10;(alias) function useContext&lt;T>(context: Context&lt;T>): T&#10;import useContext\' >useContext</data-lsp></span><span style="color: #D4D4D4"> } </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">"react"</span><span style="color: #D4D4D4">;</span></div><div class=\'line dim\'><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> { </span><span style="color: #9CDCFE"><data-lsp lsp=\'(alias) const MyContext: React.Context&lt;MyContextType>&#10;import MyContext\' >MyContext</data-lsp></span><span style="color: #D4D4D4"> } </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">"./MyContext"</span><span style="color: #D4D4D4">;</span></div><div class=\'line dim\'>&nbsp;</div><div class=\'line dim\'><span style="color: #C586C0">export</span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #DCDCAA"><data-lsp lsp=\'const PdfSnack: React.FC\' >PdfSnack</data-lsp></span><span style="color: #D4D4D4">: </span><span style="color: #4EC9B0"><data-lsp lsp=\'(alias) type FC&lt;P = {}> = FunctionComponent&lt;P>&#10;import FC\' >FC</data-lsp></span><span style="color: #D4D4D4"> = () </span><span style="color: #569CD6">=&gt;</span><span style="color: #D4D4D4"> {</span></div><div class=\'line dim\'><span style="color: #D4D4D4">  </span><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> { </span><span style="color: #4FC1FF"><data-lsp lsp=\'const bestSnack: string | null\' >bestSnack</data-lsp></span><span style="color: #D4D4D4"> } = </span><span style="color: #DCDCAA"><data-lsp lsp=\'Accepts a context object (the value returned from `React.createContext`) and returns the current&#10;context value, as given by the nearest context provider for the given context.&#10;&#10;(alias) useContext&lt;MyContextType>(context: React.Context&lt;MyContextType>): MyContextType&#10;import useContext\' >useContext</data-lsp></span><span style="color: #D4D4D4">(</span><span style="color: #9CDCFE"><data-lsp lsp=\'(alias) const MyContext: React.Context&lt;MyContextType>&#10;import MyContext\' >MyContext</data-lsp></span><span style="color: #D4D4D4">);</span></div><div class=\'line dim\'>&nbsp;</div><div class=\'line dim\'><span style="color: #D4D4D4">  </span><span style="color: #C586C0">return</span><span style="color: #D4D4D4"> </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >pdf-text</data-lsp></span><span style="color: #808080">&gt;</span><span style="color: #569CD6">{</span><span style="color: #9CDCFE"><data-lsp lsp=\'const bestSnack: string | null\' >bestSnack</data-lsp></span><span style="color: #569CD6">}</span><span style="color: #808080">&lt;/</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >pdf-text</data-lsp></span><span style="color: #808080">&gt;</span><span style="color: #D4D4D4">;</span></div><div class=\'line dim\'><span style="color: #D4D4D4">};</span></div><div class=\'line dim\'>&nbsp;</div><div class=\'line dim\'><span style="color: #6A9955">// @filename: MyContext.tsx</span></div><div class=\'line dim\'><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> { </span><span style="color: #9CDCFE"><data-lsp lsp=\'(alias) function createContext&lt;T>(defaultValue: T): Context&lt;T>&#10;import createContext\' >createContext</data-lsp></span><span style="color: #D4D4D4">, </span><span style="color: #9CDCFE"><data-lsp lsp=\'Accepts a context object (the value returned from `React.createContext`) and returns the current&#10;context value, as given by the nearest context provider for the given context.&#10;&#10;(alias) function useContext&lt;T>(context: Context&lt;T>): T&#10;import useContext\' >useContext</data-lsp></span><span style="color: #D4D4D4"> } </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">"react"</span><span style="color: #D4D4D4">;</span></div><div class=\'line dim\'>&nbsp;</div><div class=\'line dim\'><span style="color: #569CD6">interface</span><span style="color: #D4D4D4"> </span><span style="color: #4EC9B0"><data-lsp lsp=\'interface MyContextType\' >MyContextType</data-lsp></span><span style="color: #D4D4D4"> {</span></div><div class=\'line dim\'><span style="color: #D4D4D4">  </span><span style="color: #9CDCFE"><data-lsp lsp=\'(property) MyContextType.bestSnack: string | null\' >bestSnack</data-lsp></span><span style="color: #D4D4D4">: </span><span style="color: #4EC9B0">string</span><span style="color: #D4D4D4"> | </span><span style="color: #4EC9B0">null</span><span style="color: #D4D4D4">;</span></div><div class=\'line dim\'><span style="color: #D4D4D4">}</span></div><div class=\'line dim\'>&nbsp;</div><div class=\'line dim\'><span style="color: #C586C0">export</span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #4FC1FF"><data-lsp lsp=\'const MyContext: React.Context&lt;MyContextType>\' >MyContext</data-lsp></span><span style="color: #D4D4D4"> = </span><span style="color: #DCDCAA"><data-lsp lsp=\'(alias) createContext&lt;MyContextType>(defaultValue: MyContextType): React.Context&lt;MyContextType>&#10;import createContext\' >createContext</data-lsp></span><span style="color: #D4D4D4">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp=\'interface MyContextType\' >MyContextType</data-lsp></span><span style="color: #D4D4D4">&gt;({</span></div><div class=\'line dim\'><span style="color: #D4D4D4">  </span><span style="color: #9CDCFE"><data-lsp lsp=\'(property) MyContextType.bestSnack: string | null\' >bestSnack</data-lsp>:</span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">null</span><span style="color: #D4D4D4">,</span></div><div class=\'line dim\'><span style="color: #D4D4D4">});</span></div></code></div></pre>'}})]})}function W(s={}){const{wrapper:t}={...(0,a.a)(),...s.components};return t?(0,n.jsx)(t,{...s,children:(0,n.jsx)(I,{...s})}):I(s)}},426:(s,t,e)=>{"use strict";e.d(t,{n:()=>l});var n=e(1240),a=e(5250);const l=s=>{let{name:t}=s;const e=(0,n.U)(t);if(!e)return null;const l=Object.entries(e),o=[],p=new Set,r=[];for(const[n,a]of l)a.parent?.fileName.includes("@types/react")?(o.push([n,a]),p.add(a.parent.name)):r.push([n,a]);return(0,a.jsxs)(a.Fragment,{children:[p.size>0&&(0,a.jsxs)("p",{children:["This type also extends: ",Array.from(p).join(", ")]}),(0,a.jsxs)("table",{children:[(0,a.jsx)("thead",{children:(0,a.jsxs)("tr",{children:[(0,a.jsx)("th",{children:"Name"}),(0,a.jsx)("th",{children:"Type"}),(0,a.jsx)("th",{children:"Required"}),(0,a.jsx)("th",{children:"Description"})]})}),(0,a.jsx)("tbody",{children:r.map((s=>{let[t,e]=s;return(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)("code",{children:t})}),(0,a.jsx)("td",{children:(0,a.jsx)("code",{children:e.type?.name})}),(0,a.jsx)("td",{children:e.required?"Yes":"No"}),(0,a.jsx)("td",{children:e.description})]},t)}))})]})]})}}}]);