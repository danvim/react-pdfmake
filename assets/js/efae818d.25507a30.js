(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[991],{9351:(s,t,e)=>{var a={"./Heading.json":[5621,621],"./PdfDocument.json":[5720,720],"./PdfFooter.json":[4740,740],"./PdfHeader.json":[9508,508],"./PdfPreview.json":[54,54],"./PdfTable.json":[5762,762],"./plugin-route-context-module-100.json":[8462,462]};function n(s){if(!e.o(a,s))return Promise.resolve().then((()=>{var t=new Error("Cannot find module '"+s+"'");throw t.code="MODULE_NOT_FOUND",t}));var t=a[s],n=t[0];return e.e(t[1]).then((()=>e.t(n,19)))}n.keys=()=>Object.keys(a),n.id=9351,s.exports=n},1824:(s,t,e)=>{"use strict";e.r(t),e.d(t,{assets:()=>d,contentTitle:()=>p,default:()=>y,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var a=e(1527),n=e(8627),l=e(3388);const o={sidebar_position:2,sidebar_label:"<PdfHeader>"},p="<PdfHeader>",r={id:"jsx/pdf-components/pdf-header",title:"&lt;PdfHeader>",description:"Props",source:"@site/docs/jsx/pdf-components/pdf-header.mdx",sourceDirName:"jsx/pdf-components",slug:"/jsx/pdf-components/pdf-header",permalink:"/react-pdfmake-reconciler/docs/jsx/pdf-components/pdf-header",draft:!1,unlisted:!1,editUrl:"https://github.com/danvim/react-pdfmake-reconciler/tree/master/docs/docs/jsx/pdf-components/pdf-header.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,sidebar_label:"<PdfHeader>"},sidebar:"tutorialSidebar",previous:{title:"<PdfDocument>",permalink:"/react-pdfmake-reconciler/docs/jsx/pdf-components/pdf-document"},next:{title:"<PdfFooter>",permalink:"/react-pdfmake-reconciler/docs/jsx/pdf-components/pdf-footer"}},d={},c=[{value:"Props",id:"props",level:2},{value:"Example",id:"example",level:2}];function i(s){const t={div:"div",h1:"h1",h2:"h2",...(0,n.a)(),...s.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"pdfheader",children:"<PdfHeader>"}),"\n",(0,a.jsx)(t.h2,{id:"props",children:"Props"}),"\n",(0,a.jsx)(l.n,{name:"PdfHeader"}),"\n",(0,a.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,a.jsx)(t.div,{dangerouslySetInnerHTML:{__html:'<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">tsx</div><div class=\'code-container\'><code><div class=\'line\'><span style="color: #AF00DB">import</span><span style="color: #000000"> { </span><span style="color: #001080"><data-lsp lsp=\'(alias) const PdfHeader: React.FC&lt;PdfMarginContentProps>&#10;import PdfHeader\' >PdfHeader</data-lsp></span><span style="color: #000000"> } </span><span style="color: #AF00DB">from</span><span style="color: #000000"> </span><span style="color: #A31515">"react-pdfmake-reconciler"</span><span style="color: #000000">;</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp=\'const staticHeader: React.JSX.Element\' >staticHeader</data-lsp></span><span style="color: #000000"> = (</span></div><div class=\'line\'><span style="color: #000000">  </span><span style="color: #800000">&lt;</span><span style="color: #267F99"><data-lsp lsp=\'(alias) const PdfHeader: React.FC&lt;PdfMarginContentProps>&#10;import PdfHeader\' >PdfHeader</data-lsp></span><span style="color: #800000">&gt;</span></div><div class=\'line\'><span style="color: #000000">    </span><span style="color: #800000">&lt;</span><span style="color: #267F99"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >pdf-text</data-lsp></span><span style="color: #800000">&gt;</span><span style="color: #000000">Hello world!</span><span style="color: #800000">&lt;/</span><span style="color: #267F99"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >pdf-text</data-lsp></span><span style="color: #800000">&gt;</span></div><div class=\'line\'><span style="color: #000000">  </span><span style="color: #800000">&lt;/</span><span style="color: #267F99"><data-lsp lsp=\'(alias) const PdfHeader: React.FC&lt;PdfMarginContentProps>&#10;import PdfHeader\' >PdfHeader</data-lsp></span><span style="color: #800000">&gt;</span></div><div class=\'line\'><span style="color: #000000">);</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp=\'const dynamicHeader: React.JSX.Element\' >dynamicHeader</data-lsp></span><span style="color: #000000"> = (</span></div><div class=\'line\'><span style="color: #000000">  </span><span style="color: #800000">&lt;</span><span style="color: #267F99"><data-lsp lsp=\'(alias) const PdfHeader: React.FC&lt;PdfMarginContentProps>&#10;import PdfHeader\' >PdfHeader</data-lsp></span><span style="color: #800000">&gt;</span></div><div class=\'line\'><span style="color: #000000">    </span><span style="color: #0000FF">{</span><span style="color: #000000FF">(</span><span style="color: #001080"><data-lsp lsp=\'(parameter) currentPage: number\' >currentPage</data-lsp></span><span style="color: #000000FF">, </span><span style="color: #001080"><data-lsp lsp=\'(parameter) pageCount: number\' >pageCount</data-lsp></span><span style="color: #000000FF">, </span><span style="color: #001080"><data-lsp lsp=\'(parameter) pageSize: ContextPageSize\' >pageSize</data-lsp></span><span style="color: #000000FF">) </span><span style="color: #0000FF">=&gt;</span><span style="color: #000000FF"> (</span></div><div class=\'line\'><span style="color: #000000FF">      </span><span style="color: #800000">&lt;</span><span style="color: #267F99"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >pdf-text</data-lsp></span><span style="color: #800000">&gt;</span></div><div class=\'line\'><span style="color: #000000FF">        Page </span><span style="color: #0000FF">{</span><span style="color: #001080"><data-lsp lsp=\'(parameter) currentPage: number\' >currentPage</data-lsp></span><span style="color: #0000FF">}</span><span style="color: #000000FF"> / </span><span style="color: #0000FF">{</span><span style="color: #001080"><data-lsp lsp=\'(parameter) pageCount: number\' >pageCount</data-lsp></span><span style="color: #0000FF">}</span></div><div class=\'line\'><span style="color: #000000FF">      </span><span style="color: #800000">&lt;/</span><span style="color: #267F99"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >pdf-text</data-lsp></span><span style="color: #800000">&gt;</span></div><div class=\'line\'><span style="color: #000000FF">    )</span><span style="color: #0000FF">}</span></div><div class=\'line\'><span style="color: #000000">  </span><span style="color: #800000">&lt;/</span><span style="color: #267F99"><data-lsp lsp=\'(alias) const PdfHeader: React.FC&lt;PdfMarginContentProps>&#10;import PdfHeader\' >PdfHeader</data-lsp></span><span style="color: #800000">&gt;</span></div><div class=\'line\'><span style="color: #000000">);</span></div></code></div></pre>\n<pre class="shiki dark-plus twoslash lsp" style="background-color: #1E1E1E; color: #D4D4D4"><div class="language-id">tsx</div><div class=\'code-container\'><code><div class=\'line\'><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> { </span><span style="color: #9CDCFE"><data-lsp lsp=\'(alias) const PdfHeader: React.FC&lt;PdfMarginContentProps>&#10;import PdfHeader\' >PdfHeader</data-lsp></span><span style="color: #D4D4D4"> } </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">"react-pdfmake-reconciler"</span><span style="color: #D4D4D4">;</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #DCDCAA"><data-lsp lsp=\'const staticHeader: React.JSX.Element\' >staticHeader</data-lsp></span><span style="color: #D4D4D4"> = (</span></div><div class=\'line\'><span style="color: #D4D4D4">  </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp=\'(alias) const PdfHeader: React.FC&lt;PdfMarginContentProps>&#10;import PdfHeader\' >PdfHeader</data-lsp></span><span style="color: #808080">&gt;</span></div><div class=\'line\'><span style="color: #D4D4D4">    </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >pdf-text</data-lsp></span><span style="color: #808080">&gt;</span><span style="color: #D4D4D4">Hello world!</span><span style="color: #808080">&lt;/</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >pdf-text</data-lsp></span><span style="color: #808080">&gt;</span></div><div class=\'line\'><span style="color: #D4D4D4">  </span><span style="color: #808080">&lt;/</span><span style="color: #4EC9B0"><data-lsp lsp=\'(alias) const PdfHeader: React.FC&lt;PdfMarginContentProps>&#10;import PdfHeader\' >PdfHeader</data-lsp></span><span style="color: #808080">&gt;</span></div><div class=\'line\'><span style="color: #D4D4D4">);</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #DCDCAA"><data-lsp lsp=\'const dynamicHeader: React.JSX.Element\' >dynamicHeader</data-lsp></span><span style="color: #D4D4D4"> = (</span></div><div class=\'line\'><span style="color: #D4D4D4">  </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp=\'(alias) const PdfHeader: React.FC&lt;PdfMarginContentProps>&#10;import PdfHeader\' >PdfHeader</data-lsp></span><span style="color: #808080">&gt;</span></div><div class=\'line\'><span style="color: #D4D4D4">    </span><span style="color: #569CD6">{</span><span style="color: #D4D4D4">(</span><span style="color: #9CDCFE"><data-lsp lsp=\'(parameter) currentPage: number\' >currentPage</data-lsp></span><span style="color: #D4D4D4">, </span><span style="color: #9CDCFE"><data-lsp lsp=\'(parameter) pageCount: number\' >pageCount</data-lsp></span><span style="color: #D4D4D4">, </span><span style="color: #9CDCFE"><data-lsp lsp=\'(parameter) pageSize: ContextPageSize\' >pageSize</data-lsp></span><span style="color: #D4D4D4">) </span><span style="color: #569CD6">=&gt;</span><span style="color: #D4D4D4"> (</span></div><div class=\'line\'><span style="color: #D4D4D4">      </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >pdf-text</data-lsp></span><span style="color: #808080">&gt;</span></div><div class=\'line\'><span style="color: #D4D4D4">        Page </span><span style="color: #569CD6">{</span><span style="color: #9CDCFE"><data-lsp lsp=\'(parameter) currentPage: number\' >currentPage</data-lsp></span><span style="color: #569CD6">}</span><span style="color: #D4D4D4"> / </span><span style="color: #569CD6">{</span><span style="color: #9CDCFE"><data-lsp lsp=\'(parameter) pageCount: number\' >pageCount</data-lsp></span><span style="color: #569CD6">}</span></div><div class=\'line\'><span style="color: #D4D4D4">      </span><span style="color: #808080">&lt;/</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >pdf-text</data-lsp></span><span style="color: #808080">&gt;</span></div><div class=\'line\'><span style="color: #D4D4D4">    )</span><span style="color: #569CD6">}</span></div><div class=\'line\'><span style="color: #D4D4D4">  </span><span style="color: #808080">&lt;/</span><span style="color: #4EC9B0"><data-lsp lsp=\'(alias) const PdfHeader: React.FC&lt;PdfMarginContentProps>&#10;import PdfHeader\' >PdfHeader</data-lsp></span><span style="color: #808080">&gt;</span></div><div class=\'line\'><span style="color: #D4D4D4">);</span></div></code></div></pre>'}})]})}function y(s={}){const{wrapper:t}={...(0,n.a)(),...s.components};return t?(0,a.jsx)(t,{...s,children:(0,a.jsx)(i,{...s})}):i(s)}},7358:(s,t,e)=>{"use strict";e.d(t,{U:()=>n});var a=e(959);const n=s=>{const[t,n]=(0,a.useState)(null);return(0,a.useEffect)((()=>{let t=!1;return e(9351)(`./${s}.json`).then((s=>{t||(t=!0,n(s.default))})).catch(console.error),()=>{t=!0}}),[s]),t}},3388:(s,t,e)=>{"use strict";e.d(t,{n:()=>l});var a=e(7358),n=e(1527);const l=s=>{let{name:t}=s;const e=(0,a.U)(t);if(!e)return null;const l=Object.entries(e),o=[],p=new Set,r=[];for(const[a,n]of l)n.parent?.fileName.includes("@types/react")?(o.push([a,n]),p.add(n.parent.name)):r.push([a,n]);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)("p",{children:["This type also extends: ",Array.from(p).join(", ")]}),(0,n.jsxs)("table",{children:[(0,n.jsx)("thead",{children:(0,n.jsxs)("tr",{children:[(0,n.jsx)("th",{children:"Name"}),(0,n.jsx)("th",{children:"Type"}),(0,n.jsx)("th",{children:"Required"}),(0,n.jsx)("th",{children:"Description"})]})}),(0,n.jsx)("tbody",{children:r.map((s=>{let[t,e]=s;return(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)("code",{children:t})}),(0,n.jsx)("td",{children:(0,n.jsx)("code",{children:e.type?.name})}),(0,n.jsx)("td",{children:e.required?"Yes":"No"}),(0,n.jsx)("td",{children:e.description})]},t)}))})]})]})}},8627:(s,t,e)=>{"use strict";e.d(t,{Z:()=>p,a:()=>o});var a=e(959);const n={},l=a.createContext(n);function o(s){const t=a.useContext(l);return a.useMemo((function(){return"function"==typeof s?s(t):{...t,...s}}),[t,s])}function p(s){let t;return t=s.disableParentContext?"function"==typeof s.components?s.components(n):s.components||n:o(s.components),a.createElement(l.Provider,{value:t},s.children)}}}]);