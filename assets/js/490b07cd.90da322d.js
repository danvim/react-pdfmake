"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[692],{5909:(s,n,o)=>{o.r(n),o.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>p,toc:()=>d});var e=o(1527),t=o(8627);const a={sidebar_position:2},l="PdfRenderer",p={id:"renderer",title:"PdfRenderer",description:"Render to React loop",source:"@site/docs/renderer.md",sourceDirName:".",slug:"/renderer",permalink:"/react-pdfmake-reconciler/docs/renderer",draft:!1,unlisted:!1,editUrl:"https://github.com/danvim/react-pdfmake-reconciler/tree/master/docs/docs/renderer.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/react-pdfmake-reconciler/docs/intro"},next:{title:"JSX",permalink:"/react-pdfmake-reconciler/docs/jsx/"}},r={},d=[{value:"Render to React loop",id:"render-to-react-loop",level:2},{value:"Static render",id:"static-render",level:2},{value:"Full example",id:"full-example",level:2}];function i(s){const n={div:"div",h1:"h1",h2:"h2",...(0,t.a)(),...s.components};return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.h1,{id:"pdfrenderer",children:"PdfRenderer"}),"\n",(0,e.jsx)(n.h2,{id:"render-to-react-loop",children:"Render to React loop"}),"\n",(0,e.jsx)(n.div,{dangerouslySetInnerHTML:{__html:'<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">tsx</div><div class=\'code-container\'><code><div class=\'line\'><span style="color: #AF00DB">import</span><span style="color: #000000"> { </span><span style="color: #001080"><data-lsp lsp=\'(alias) const PdfRenderer: {&#10;    render: (reactElement: PdfNode, onUpdate: DocumentUpdateHandler) => {&#10;        container: Container;&#10;        root: any;&#10;        unmount: () => void;&#10;    };&#10;    renderOnce: (renderElement: PdfNode) => TDocumentDefinitions;&#10;}&#10;import PdfRenderer\' >PdfRenderer</data-lsp></span><span style="color: #000000"> } </span><span style="color: #AF00DB">from</span><span style="color: #000000"> </span><span style="color: #A31515">"react-pdfmake-reconciler"</span><span style="color: #000000">;</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #0000FF">const</span><span style="color: #000000"> { </span><span style="color: #0070C1"><data-lsp lsp=\'const unmount: () => void\' >unmount</data-lsp></span><span style="color: #000000"> } = </span><span style="color: #001080"><data-lsp lsp=\'(alias) const PdfRenderer: {&#10;    render: (reactElement: PdfNode, onUpdate: DocumentUpdateHandler) => {&#10;        container: Container;&#10;        root: any;&#10;        unmount: () => void;&#10;    };&#10;    renderOnce: (renderElement: PdfNode) => TDocumentDefinitions;&#10;}&#10;import PdfRenderer\' >PdfRenderer</data-lsp></span><span style="color: #000000">.</span><span style="color: #795E26"><data-lsp lsp=\'(property) render: (reactElement: React.ReactNode, onUpdate: DocumentUpdateHandler) => {&#10;    container: Container;&#10;    root: any;&#10;    unmount: () => void;&#10;}\' >render</data-lsp></span><span style="color: #000000">(</span></div><div class=\'line\'><span style="color: #000000">  </span><span style="color: #800000">&lt;</span><span style="color: #267F99"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >pdf-text</data-lsp></span><span style="color: #800000">&gt;</span><span style="color: #000000">Hello world!</span><span style="color: #800000">&lt;/</span><span style="color: #267F99"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >pdf-text</data-lsp></span><span style="color: #800000">&gt;</span><span style="color: #000000">,</span></div><div class=\'line\'><span style="color: #000000">  (</span><span style="color: #001080"><data-lsp lsp=\'(parameter) updatedDoc: TDocumentDefinitions\' >updatedDoc</data-lsp></span><span style="color: #000000">) </span><span style="color: #0000FF">=&gt;</span><span style="color: #000000"> {</span></div><div class=\'line\'><span style="color: #000000">    </span><span style="color: #001080"><data-lsp lsp=\'The `console` module provides a simple debugging console that is similar to the&#10;JavaScript console mechanism provided by web browsers.&#10;&#10;The module exports two specific components:&#10;&#10;* A `Console` class with methods such as `console.log()`, `console.error()` and`console.warn()` that can be used to write to any Node.js stream.&#10;* A global `console` instance configured to write to `process.stdout` and `process.stderr`. The global `console` can be used without calling`require(&apos;console&apos;)`.&#10;&#10;_**Warning**_: The global console object&apos;s methods are neither consistently&#10;synchronous like the browser APIs they resemble, nor are they consistently&#10;asynchronous like all other Node.js streams. See the `note on process I/O` for&#10;more information.&#10;&#10;Example using the global `console`:&#10;&#10;```js&#10;console.log(&apos;hello world&apos;);&#10;// Prints: hello world, to stdout&#10;console.log(&apos;hello %s&apos;, &apos;world&apos;);&#10;// Prints: hello world, to stdout&#10;console.error(new Error(&apos;Whoops, something bad happened&apos;));&#10;// Prints error message and stack trace to stderr:&#10;//   Error: Whoops, something bad happened&#10;//     at [eval]:5:15&#10;//     at Script.runInThisContext (node:vm:132:18)&#10;//     at Object.runInThisContext (node:vm:309:38)&#10;//     at node:internal/process/execution:77:19&#10;//     at [eval]-wrapper:6:22&#10;//     at evalScript (node:internal/process/execution:76:60)&#10;//     at node:internal/main/eval_string:23:3&#10;&#10;const name = &apos;Will Robinson&apos;;&#10;console.warn(`Danger ${name}! Danger!`);&#10;// Prints: Danger Will Robinson! Danger!, to stderr&#10;```&#10;&#10;Example using the `Console` class:&#10;&#10;```js&#10;const out = getStreamSomehow();&#10;const err = getStreamSomehow();&#10;const myConsole = new console.Console(out, err);&#10;&#10;myConsole.log(&apos;hello world&apos;);&#10;// Prints: hello world, to out&#10;myConsole.log(&apos;hello %s&apos;, &apos;world&apos;);&#10;// Prints: hello world, to out&#10;myConsole.error(new Error(&apos;Whoops, something bad happened&apos;));&#10;// Prints: [Error: Whoops, something bad happened], to err&#10;&#10;const name = &apos;Will Robinson&apos;;&#10;myConsole.warn(`Danger ${name}! Danger!`);&#10;// Prints: Danger Will Robinson! Danger!, to err&#10;```&#10;&#10;namespace console&#10;var console: Console\' >console</data-lsp></span><span style="color: #000000">.</span><span style="color: #795E26"><data-lsp lsp=\'Prints to `stdout` with newline. Multiple arguments can be passed, with the&#10;first used as the primary message and all additional used as substitution&#10;values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).&#10;&#10;```js&#10;const count = 5;&#10;console.log(&apos;count: %d&apos;, count);&#10;// Prints: count: 5, to stdout&#10;console.log(&apos;count:&apos;, count);&#10;// Prints: count: 5, to stdout&#10;```&#10;&#10;See `util.format()` for more information.&#10;&#10;(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\' >log</data-lsp></span><span style="color: #000000">(</span><span style="color: #A31515">"updated"</span><span style="color: #000000">);</span></div><div class=\'line\'><span style="color: #000000">  },</span></div><div class=\'line\'><span style="color: #000000">);</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #008000">// When unmounting</span></div><div class=\'line\'><span style="color: #795E26"><data-lsp lsp=\'const unmount: () => void\' >unmount</data-lsp></span><span style="color: #000000">();</span></div></code></div></pre>\n<pre class="shiki dark-plus twoslash lsp" style="background-color: #1E1E1E; color: #D4D4D4"><div class="language-id">tsx</div><div class=\'code-container\'><code><div class=\'line\'><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> { </span><span style="color: #9CDCFE"><data-lsp lsp=\'(alias) const PdfRenderer: {&#10;    render: (reactElement: PdfNode, onUpdate: DocumentUpdateHandler) => {&#10;        container: Container;&#10;        root: any;&#10;        unmount: () => void;&#10;    };&#10;    renderOnce: (renderElement: PdfNode) => TDocumentDefinitions;&#10;}&#10;import PdfRenderer\' >PdfRenderer</data-lsp></span><span style="color: #D4D4D4"> } </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">"react-pdfmake-reconciler"</span><span style="color: #D4D4D4">;</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> { </span><span style="color: #4FC1FF"><data-lsp lsp=\'const unmount: () => void\' >unmount</data-lsp></span><span style="color: #D4D4D4"> } = </span><span style="color: #9CDCFE"><data-lsp lsp=\'(alias) const PdfRenderer: {&#10;    render: (reactElement: PdfNode, onUpdate: DocumentUpdateHandler) => {&#10;        container: Container;&#10;        root: any;&#10;        unmount: () => void;&#10;    };&#10;    renderOnce: (renderElement: PdfNode) => TDocumentDefinitions;&#10;}&#10;import PdfRenderer\' >PdfRenderer</data-lsp></span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA"><data-lsp lsp=\'(property) render: (reactElement: React.ReactNode, onUpdate: DocumentUpdateHandler) => {&#10;    container: Container;&#10;    root: any;&#10;    unmount: () => void;&#10;}\' >render</data-lsp></span><span style="color: #D4D4D4">(</span></div><div class=\'line\'><span style="color: #D4D4D4">  </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >pdf-text</data-lsp></span><span style="color: #808080">&gt;</span><span style="color: #D4D4D4">Hello world!</span><span style="color: #808080">&lt;/</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >pdf-text</data-lsp></span><span style="color: #808080">&gt;</span><span style="color: #D4D4D4">,</span></div><div class=\'line\'><span style="color: #D4D4D4">  (</span><span style="color: #9CDCFE"><data-lsp lsp=\'(parameter) updatedDoc: TDocumentDefinitions\' >updatedDoc</data-lsp></span><span style="color: #D4D4D4">) </span><span style="color: #569CD6">=&gt;</span><span style="color: #D4D4D4"> {</span></div><div class=\'line\'><span style="color: #D4D4D4">    </span><span style="color: #9CDCFE"><data-lsp lsp=\'The `console` module provides a simple debugging console that is similar to the&#10;JavaScript console mechanism provided by web browsers.&#10;&#10;The module exports two specific components:&#10;&#10;* A `Console` class with methods such as `console.log()`, `console.error()` and`console.warn()` that can be used to write to any Node.js stream.&#10;* A global `console` instance configured to write to `process.stdout` and `process.stderr`. The global `console` can be used without calling`require(&apos;console&apos;)`.&#10;&#10;_**Warning**_: The global console object&apos;s methods are neither consistently&#10;synchronous like the browser APIs they resemble, nor are they consistently&#10;asynchronous like all other Node.js streams. See the `note on process I/O` for&#10;more information.&#10;&#10;Example using the global `console`:&#10;&#10;```js&#10;console.log(&apos;hello world&apos;);&#10;// Prints: hello world, to stdout&#10;console.log(&apos;hello %s&apos;, &apos;world&apos;);&#10;// Prints: hello world, to stdout&#10;console.error(new Error(&apos;Whoops, something bad happened&apos;));&#10;// Prints error message and stack trace to stderr:&#10;//   Error: Whoops, something bad happened&#10;//     at [eval]:5:15&#10;//     at Script.runInThisContext (node:vm:132:18)&#10;//     at Object.runInThisContext (node:vm:309:38)&#10;//     at node:internal/process/execution:77:19&#10;//     at [eval]-wrapper:6:22&#10;//     at evalScript (node:internal/process/execution:76:60)&#10;//     at node:internal/main/eval_string:23:3&#10;&#10;const name = &apos;Will Robinson&apos;;&#10;console.warn(`Danger ${name}! Danger!`);&#10;// Prints: Danger Will Robinson! Danger!, to stderr&#10;```&#10;&#10;Example using the `Console` class:&#10;&#10;```js&#10;const out = getStreamSomehow();&#10;const err = getStreamSomehow();&#10;const myConsole = new console.Console(out, err);&#10;&#10;myConsole.log(&apos;hello world&apos;);&#10;// Prints: hello world, to out&#10;myConsole.log(&apos;hello %s&apos;, &apos;world&apos;);&#10;// Prints: hello world, to out&#10;myConsole.error(new Error(&apos;Whoops, something bad happened&apos;));&#10;// Prints: [Error: Whoops, something bad happened], to err&#10;&#10;const name = &apos;Will Robinson&apos;;&#10;myConsole.warn(`Danger ${name}! Danger!`);&#10;// Prints: Danger Will Robinson! Danger!, to err&#10;```&#10;&#10;namespace console&#10;var console: Console\' >console</data-lsp></span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA"><data-lsp lsp=\'Prints to `stdout` with newline. Multiple arguments can be passed, with the&#10;first used as the primary message and all additional used as substitution&#10;values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).&#10;&#10;```js&#10;const count = 5;&#10;console.log(&apos;count: %d&apos;, count);&#10;// Prints: count: 5, to stdout&#10;console.log(&apos;count:&apos;, count);&#10;// Prints: count: 5, to stdout&#10;```&#10;&#10;See `util.format()` for more information.&#10;&#10;(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\' >log</data-lsp></span><span style="color: #D4D4D4">(</span><span style="color: #CE9178">"updated"</span><span style="color: #D4D4D4">);</span></div><div class=\'line\'><span style="color: #D4D4D4">  },</span></div><div class=\'line\'><span style="color: #D4D4D4">);</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #6A9955">// When unmounting</span></div><div class=\'line\'><span style="color: #DCDCAA"><data-lsp lsp=\'const unmount: () => void\' >unmount</data-lsp></span><span style="color: #D4D4D4">();</span></div></code></div></pre>'}}),"\n",(0,e.jsx)(n.h2,{id:"static-render",children:"Static render"}),"\n",(0,e.jsx)(n.div,{dangerouslySetInnerHTML:{__html:'<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">tsx</div><div class=\'code-container\'><code><div class=\'line\'><span style="color: #AF00DB">import</span><span style="color: #000000"> { </span><span style="color: #001080"><data-lsp lsp=\'(alias) const PdfRenderer: {&#10;    render: (reactElement: PdfNode, onUpdate: DocumentUpdateHandler) => {&#10;        container: Container;&#10;        root: any;&#10;        unmount: () => void;&#10;    };&#10;    renderOnce: (renderElement: PdfNode) => TDocumentDefinitions;&#10;}&#10;import PdfRenderer\' >PdfRenderer</data-lsp></span><span style="color: #000000"> } </span><span style="color: #AF00DB">from</span><span style="color: #000000"> </span><span style="color: #A31515">"react-pdfmake-reconciler"</span><span style="color: #000000">;</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp=\'const doc: TDocumentDefinitions\' >doc</data-lsp></span><span style="color: #000000"> = </span><span style="color: #001080"><data-lsp lsp=\'(alias) const PdfRenderer: {&#10;    render: (reactElement: PdfNode, onUpdate: DocumentUpdateHandler) => {&#10;        container: Container;&#10;        root: any;&#10;        unmount: () => void;&#10;    };&#10;    renderOnce: (renderElement: PdfNode) => TDocumentDefinitions;&#10;}&#10;import PdfRenderer\' >PdfRenderer</data-lsp></span><span style="color: #000000">.</span><span style="color: #795E26"><data-lsp lsp=\'(property) renderOnce: (renderElement: React.ReactNode) => TDocumentDefinitions\' >renderOnce</data-lsp></span><span style="color: #000000">(</span><span style="color: #800000">&lt;</span><span style="color: #267F99"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >pdf-text</data-lsp></span><span style="color: #800000">&gt;</span><span style="color: #000000">Hello world!</span><span style="color: #800000">&lt;/</span><span style="color: #267F99"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >pdf-text</data-lsp></span><span style="color: #800000">&gt;</span><span style="color: #000000">);</span></div></code></div></pre>\n<pre class="shiki dark-plus twoslash lsp" style="background-color: #1E1E1E; color: #D4D4D4"><div class="language-id">tsx</div><div class=\'code-container\'><code><div class=\'line\'><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> { </span><span style="color: #9CDCFE"><data-lsp lsp=\'(alias) const PdfRenderer: {&#10;    render: (reactElement: PdfNode, onUpdate: DocumentUpdateHandler) => {&#10;        container: Container;&#10;        root: any;&#10;        unmount: () => void;&#10;    };&#10;    renderOnce: (renderElement: PdfNode) => TDocumentDefinitions;&#10;}&#10;import PdfRenderer\' >PdfRenderer</data-lsp></span><span style="color: #D4D4D4"> } </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">"react-pdfmake-reconciler"</span><span style="color: #D4D4D4">;</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #4FC1FF"><data-lsp lsp=\'const doc: TDocumentDefinitions\' >doc</data-lsp></span><span style="color: #D4D4D4"> = </span><span style="color: #9CDCFE"><data-lsp lsp=\'(alias) const PdfRenderer: {&#10;    render: (reactElement: PdfNode, onUpdate: DocumentUpdateHandler) => {&#10;        container: Container;&#10;        root: any;&#10;        unmount: () => void;&#10;    };&#10;    renderOnce: (renderElement: PdfNode) => TDocumentDefinitions;&#10;}&#10;import PdfRenderer\' >PdfRenderer</data-lsp></span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA"><data-lsp lsp=\'(property) renderOnce: (renderElement: React.ReactNode) => TDocumentDefinitions\' >renderOnce</data-lsp></span><span style="color: #D4D4D4">(</span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >pdf-text</data-lsp></span><span style="color: #808080">&gt;</span><span style="color: #D4D4D4">Hello world!</span><span style="color: #808080">&lt;/</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >pdf-text</data-lsp></span><span style="color: #808080">&gt;</span><span style="color: #D4D4D4">);</span></div></code></div></pre>'}}),"\n",(0,e.jsx)(n.h2,{id:"full-example",children:"Full example"}),"\n",(0,e.jsx)(n.div,{dangerouslySetInnerHTML:{__html:'<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">tsx</div><div class=\'code-container\'><code><div class=\'line\'><span style="color: #AF00DB">import</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp=\'import pdfMake\' >pdfMake</data-lsp></span><span style="color: #000000"> </span><span style="color: #AF00DB">from</span><span style="color: #000000"> </span><span style="color: #A31515">"pdfmake/build/pdfmake.js"</span><span style="color: #000000">;</span></div><div class=\'line\'><span style="color: #AF00DB">import</span><span style="color: #000000"> </span><span style="color: #AF00DB">type</span><span style="color: #000000"> {</span></div><div class=\'line\'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp=\'(alias) interface BufferOptions&#10;import BufferOptions\' >BufferOptions</data-lsp></span><span style="color: #000000">,</span></div><div class=\'line\'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp=\'Complete definition of a PDF document.&#10;&#10;(alias) interface TDocumentDefinitions&#10;import TDocumentDefinitions\' >TDocumentDefinitions</data-lsp></span><span style="color: #000000">,</span></div><div class=\'line\'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp=\'Dictionary of font families that can be referenced by their key.&#10;&#10;(alias) interface TFontDictionary&#10;import TFontDictionary\' >TFontDictionary</data-lsp></span><span style="color: #000000">,</span></div><div class=\'line\'><span style="color: #000000">} </span><span style="color: #AF00DB">from</span><span style="color: #000000"> </span><span style="color: #A31515">"pdfmake/interfaces"</span><span style="color: #000000">;</span></div><div class=\'line\'><span style="color: #AF00DB">import</span><span style="color: #000000"> { </span><span style="color: #001080"><data-lsp lsp=\'(alias) const PdfRenderer: {&#10;    render: (reactElement: PdfNode, onUpdate: DocumentUpdateHandler) => {&#10;        container: Container;&#10;        root: any;&#10;        unmount: () => void;&#10;    };&#10;    renderOnce: (renderElement: PdfNode) => TDocumentDefinitions;&#10;}&#10;import PdfRenderer\' >PdfRenderer</data-lsp></span><span style="color: #000000"> } </span><span style="color: #AF00DB">from</span><span style="color: #000000"> </span><span style="color: #A31515">"react-pdfmake-reconciler"</span><span style="color: #000000">;</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp=\'const doc: TDocumentDefinitions\' >doc</data-lsp></span><span style="color: #000000"> = </span><span style="color: #001080"><data-lsp lsp=\'(alias) const PdfRenderer: {&#10;    render: (reactElement: PdfNode, onUpdate: DocumentUpdateHandler) => {&#10;        container: Container;&#10;        root: any;&#10;        unmount: () => void;&#10;    };&#10;    renderOnce: (renderElement: PdfNode) => TDocumentDefinitions;&#10;}&#10;import PdfRenderer\' >PdfRenderer</data-lsp></span><span style="color: #000000">.</span><span style="color: #795E26"><data-lsp lsp=\'(property) renderOnce: (renderElement: React.ReactNode) => TDocumentDefinitions\' >renderOnce</data-lsp></span><span style="color: #000000">(</span><span style="color: #800000">&lt;</span><span style="color: #267F99"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >pdf-text</data-lsp></span><span style="color: #800000">&gt;</span><span style="color: #000000">Hello world!</span><span style="color: #800000">&lt;/</span><span style="color: #267F99"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >pdf-text</data-lsp></span><span style="color: #800000">&gt;</span><span style="color: #000000">);</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp=\'const defaultFonts: TFontDictionary\' >defaultFonts</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp=\'Dictionary of font families that can be referenced by their key.&#10;&#10;(alias) interface TFontDictionary&#10;import TFontDictionary\' >TFontDictionary</data-lsp></span><span style="color: #000000"> = {</span></div><div class=\'line\'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp=\'(property) Roboto: {&#10;    normal: string;&#10;    bold: string;&#10;    italics: string;&#10;    bolditalics: string;&#10;}\' >Roboto</data-lsp>:</span><span style="color: #000000"> {</span></div><div class=\'line\'><span style="color: #000000">    </span><span style="color: #001080"><data-lsp lsp=\'Font variant that is neither bold nor italic.&#10;&#10;(property) TFontFamilyTypes.normal?: PDFKit.Mixins.PDFFontSource | undefined\' >normal</data-lsp>:</span></div><div class=\'line\'><span style="color: #000000">      </span><span style="color: #A31515">"https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/fonts/Roboto/Roboto-Regular.ttf"</span><span style="color: #000000">,</span></div><div class=\'line\'><span style="color: #000000">    </span><span style="color: #001080"><data-lsp lsp=\'Font variant that is bold.&#10;&#10;(property) TFontFamilyTypes.bold?: PDFKit.Mixins.PDFFontSource | undefined\' >bold</data-lsp>:</span><span style="color: #000000"> </span><span style="color: #A31515">"https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/fonts/Roboto/Roboto-Medium.ttf"</span><span style="color: #000000">,</span></div><div class=\'line\'><span style="color: #000000">    </span><span style="color: #001080"><data-lsp lsp=\'Font variant that is italic.&#10;&#10;(property) TFontFamilyTypes.italics?: PDFKit.Mixins.PDFFontSource | undefined\' >italics</data-lsp>:</span></div><div class=\'line\'><span style="color: #000000">      </span><span style="color: #A31515">"https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/fonts/Roboto/Roboto-Italic.ttf"</span><span style="color: #000000">,</span></div><div class=\'line\'><span style="color: #000000">    </span><span style="color: #001080"><data-lsp lsp=\'Font variant that is bold and italic.&#10;&#10;(property) TFontFamilyTypes.bolditalics?: PDFKit.Mixins.PDFFontSource | undefined\' >bolditalics</data-lsp>:</span></div><div class=\'line\'><span style="color: #000000">      </span><span style="color: #A31515">"https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/fonts/Roboto/Roboto-MediumItalic.ttf"</span><span style="color: #000000">,</span></div><div class=\'line\'><span style="color: #000000">  },</span></div><div class=\'line\'><span style="color: #000000">};</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #001080"><data-lsp lsp=\'import pdfMake\' >pdfMake</data-lsp></span><span style="color: #000000">.</span><span style="color: #795E26"><data-lsp lsp=\'function createPdf(documentDefinitions: TDocumentDefinitions, tableLayouts?: {&#10;    [name: string]: CustomTableLayout;&#10;} | undefined, fonts?: TFontDictionary | undefined, vfs?: {&#10;    ...;&#10;} | undefined): pdfMake.TCreatedPdf\' >createPdf</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp=\'const doc: TDocumentDefinitions\' >doc</data-lsp></span><span style="color: #000000">, </span><span style="color: #0000FF"><data-lsp lsp=\'var undefined\' >undefined</data-lsp></span><span style="color: #000000">, </span><span style="color: #001080"><data-lsp lsp=\'const defaultFonts: TFontDictionary\' >defaultFonts</data-lsp></span><span style="color: #000000">).</span><span style="color: #795E26"><data-lsp lsp=\'(method) TCreatedPdf.download(defaultFileName: string, cb?: (() => void) | undefined, options?: BufferOptions | undefined): void (+1 overload)\' >download</data-lsp></span><span style="color: #000000">(</span><span style="color: #A31515">"myDocument.pdf"</span><span style="color: #000000">);</span></div></code></div></pre>\n<pre class="shiki dark-plus twoslash lsp" style="background-color: #1E1E1E; color: #D4D4D4"><div class="language-id">tsx</div><div class=\'code-container\'><code><div class=\'line\'><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> </span><span style="color: #9CDCFE"><data-lsp lsp=\'import pdfMake\' >pdfMake</data-lsp></span><span style="color: #D4D4D4"> </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">"pdfmake/build/pdfmake.js"</span><span style="color: #D4D4D4">;</span></div><div class=\'line\'><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> </span><span style="color: #C586C0">type</span><span style="color: #D4D4D4"> {</span></div><div class=\'line\'><span style="color: #D4D4D4">  </span><span style="color: #9CDCFE"><data-lsp lsp=\'(alias) interface BufferOptions&#10;import BufferOptions\' >BufferOptions</data-lsp></span><span style="color: #D4D4D4">,</span></div><div class=\'line\'><span style="color: #D4D4D4">  </span><span style="color: #9CDCFE"><data-lsp lsp=\'Complete definition of a PDF document.&#10;&#10;(alias) interface TDocumentDefinitions&#10;import TDocumentDefinitions\' >TDocumentDefinitions</data-lsp></span><span style="color: #D4D4D4">,</span></div><div class=\'line\'><span style="color: #D4D4D4">  </span><span style="color: #9CDCFE"><data-lsp lsp=\'Dictionary of font families that can be referenced by their key.&#10;&#10;(alias) interface TFontDictionary&#10;import TFontDictionary\' >TFontDictionary</data-lsp></span><span style="color: #D4D4D4">,</span></div><div class=\'line\'><span style="color: #D4D4D4">} </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">"pdfmake/interfaces"</span><span style="color: #D4D4D4">;</span></div><div class=\'line\'><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> { </span><span style="color: #9CDCFE"><data-lsp lsp=\'(alias) const PdfRenderer: {&#10;    render: (reactElement: PdfNode, onUpdate: DocumentUpdateHandler) => {&#10;        container: Container;&#10;        root: any;&#10;        unmount: () => void;&#10;    };&#10;    renderOnce: (renderElement: PdfNode) => TDocumentDefinitions;&#10;}&#10;import PdfRenderer\' >PdfRenderer</data-lsp></span><span style="color: #D4D4D4"> } </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">"react-pdfmake-reconciler"</span><span style="color: #D4D4D4">;</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #4FC1FF"><data-lsp lsp=\'const doc: TDocumentDefinitions\' >doc</data-lsp></span><span style="color: #D4D4D4"> = </span><span style="color: #9CDCFE"><data-lsp lsp=\'(alias) const PdfRenderer: {&#10;    render: (reactElement: PdfNode, onUpdate: DocumentUpdateHandler) => {&#10;        container: Container;&#10;        root: any;&#10;        unmount: () => void;&#10;    };&#10;    renderOnce: (renderElement: PdfNode) => TDocumentDefinitions;&#10;}&#10;import PdfRenderer\' >PdfRenderer</data-lsp></span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA"><data-lsp lsp=\'(property) renderOnce: (renderElement: React.ReactNode) => TDocumentDefinitions\' >renderOnce</data-lsp></span><span style="color: #D4D4D4">(</span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >pdf-text</data-lsp></span><span style="color: #808080">&gt;</span><span style="color: #D4D4D4">Hello world!</span><span style="color: #808080">&lt;/</span><span style="color: #4EC9B0"><data-lsp lsp=\'(property) PdfElements["pdf-text"]: PdfPropsWithChildren&lt;Omit&lt;ContentText, "text"> | Omit&lt;ContentLink, "text"> | Omit&lt;ContentAnchor, "text"> | Omit&lt;ContentTocItem, "text">>\' >pdf-text</data-lsp></span><span style="color: #808080">&gt;</span><span style="color: #D4D4D4">);</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #4FC1FF"><data-lsp lsp=\'const defaultFonts: TFontDictionary\' >defaultFonts</data-lsp></span><span style="color: #D4D4D4">: </span><span style="color: #4EC9B0"><data-lsp lsp=\'Dictionary of font families that can be referenced by their key.&#10;&#10;(alias) interface TFontDictionary&#10;import TFontDictionary\' >TFontDictionary</data-lsp></span><span style="color: #D4D4D4"> = {</span></div><div class=\'line\'><span style="color: #D4D4D4">  </span><span style="color: #9CDCFE"><data-lsp lsp=\'(property) Roboto: {&#10;    normal: string;&#10;    bold: string;&#10;    italics: string;&#10;    bolditalics: string;&#10;}\' >Roboto</data-lsp>:</span><span style="color: #D4D4D4"> {</span></div><div class=\'line\'><span style="color: #D4D4D4">    </span><span style="color: #9CDCFE"><data-lsp lsp=\'Font variant that is neither bold nor italic.&#10;&#10;(property) TFontFamilyTypes.normal?: PDFKit.Mixins.PDFFontSource | undefined\' >normal</data-lsp>:</span></div><div class=\'line\'><span style="color: #D4D4D4">      </span><span style="color: #CE9178">"https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/fonts/Roboto/Roboto-Regular.ttf"</span><span style="color: #D4D4D4">,</span></div><div class=\'line\'><span style="color: #D4D4D4">    </span><span style="color: #9CDCFE"><data-lsp lsp=\'Font variant that is bold.&#10;&#10;(property) TFontFamilyTypes.bold?: PDFKit.Mixins.PDFFontSource | undefined\' >bold</data-lsp>:</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">"https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/fonts/Roboto/Roboto-Medium.ttf"</span><span style="color: #D4D4D4">,</span></div><div class=\'line\'><span style="color: #D4D4D4">    </span><span style="color: #9CDCFE"><data-lsp lsp=\'Font variant that is italic.&#10;&#10;(property) TFontFamilyTypes.italics?: PDFKit.Mixins.PDFFontSource | undefined\' >italics</data-lsp>:</span></div><div class=\'line\'><span style="color: #D4D4D4">      </span><span style="color: #CE9178">"https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/fonts/Roboto/Roboto-Italic.ttf"</span><span style="color: #D4D4D4">,</span></div><div class=\'line\'><span style="color: #D4D4D4">    </span><span style="color: #9CDCFE"><data-lsp lsp=\'Font variant that is bold and italic.&#10;&#10;(property) TFontFamilyTypes.bolditalics?: PDFKit.Mixins.PDFFontSource | undefined\' >bolditalics</data-lsp>:</span></div><div class=\'line\'><span style="color: #D4D4D4">      </span><span style="color: #CE9178">"https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/fonts/Roboto/Roboto-MediumItalic.ttf"</span><span style="color: #D4D4D4">,</span></div><div class=\'line\'><span style="color: #D4D4D4">  },</span></div><div class=\'line\'><span style="color: #D4D4D4">};</span></div><div class=\'line\'>&nbsp;</div><div class=\'line\'><span style="color: #9CDCFE"><data-lsp lsp=\'import pdfMake\' >pdfMake</data-lsp></span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA"><data-lsp lsp=\'function createPdf(documentDefinitions: TDocumentDefinitions, tableLayouts?: {&#10;    [name: string]: CustomTableLayout;&#10;} | undefined, fonts?: TFontDictionary | undefined, vfs?: {&#10;    ...;&#10;} | undefined): pdfMake.TCreatedPdf\' >createPdf</data-lsp></span><span style="color: #D4D4D4">(</span><span style="color: #9CDCFE"><data-lsp lsp=\'const doc: TDocumentDefinitions\' >doc</data-lsp></span><span style="color: #D4D4D4">, </span><span style="color: #569CD6"><data-lsp lsp=\'var undefined\' >undefined</data-lsp></span><span style="color: #D4D4D4">, </span><span style="color: #9CDCFE"><data-lsp lsp=\'const defaultFonts: TFontDictionary\' >defaultFonts</data-lsp></span><span style="color: #D4D4D4">).</span><span style="color: #DCDCAA"><data-lsp lsp=\'(method) TCreatedPdf.download(defaultFileName: string, cb?: (() => void) | undefined, options?: BufferOptions | undefined): void (+1 overload)\' >download</data-lsp></span><span style="color: #D4D4D4">(</span><span style="color: #CE9178">"myDocument.pdf"</span><span style="color: #D4D4D4">);</span></div></code></div></pre>'}})]})}function c(s={}){const{wrapper:n}={...(0,t.a)(),...s.components};return n?(0,e.jsx)(n,{...s,children:(0,e.jsx)(i,{...s})}):i(s)}},8627:(s,n,o)=>{o.d(n,{Z:()=>p,a:()=>l});var e=o(959);const t={},a=e.createContext(t);function l(s){const n=e.useContext(a);return e.useMemo((function(){return"function"==typeof s?s(n):{...n,...s}}),[n,s])}function p(s){let n;return n=s.disableParentContext?"function"==typeof s.components?s.components(t):s.components||t:l(s.components),e.createElement(a.Provider,{value:n},s.children)}}}]);