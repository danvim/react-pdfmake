{"searchDocs":[{"title":"JSX","type":0,"sectionRef":"#","url":"/react-pdfmake-reconciler/docs/jsx","content":"JSX This package exports the following JSX elements and React components. These are used in conjunction with PdfRenderer to build a pdfmake document definition object.","keywords":"","version":"Next"},{"title":"React PDF components","type":0,"sectionRef":"#","url":"/react-pdfmake-reconciler/docs/jsx/pdf-components","content":"React PDF components These components result in &lt;pdf-*&gt; intrinsic elements, and should be used for PDF rendering.","keywords":"","version":"Next"},{"title":"React Utility components","type":0,"sectionRef":"#","url":"/react-pdfmake-reconciler/docs/jsx/util-components","content":"React Utility components These components are used outside PDF nodes.","keywords":"","version":"Next"},{"title":"PdfDocument","type":0,"sectionRef":"#","url":"/react-pdfmake-reconciler/docs/jsx/pdf-components/pdf-document","content":"","keywords":"","version":"Next"},{"title":"Props​","type":1,"pageTitle":"PdfDocument","url":"/react-pdfmake-reconciler/docs/jsx/pdf-components/pdf-document#props","content":"   ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"PdfDocument","url":"/react-pdfmake-reconciler/docs/jsx/pdf-components/pdf-document#example","content":" tsx import { PdfDocument } from &quot;react-pdfmake-reconciler&quot;; const doc = ( &lt;PdfDocument pageOrientation=&quot;landscape&quot; pageSize=&quot;A4&quot;&gt; &lt;pdf-text&gt;Hello world!&lt;/pdf-text&gt; &lt;/PdfDocument&gt; ); tsx import { PdfDocument } from &quot;react-pdfmake-reconciler&quot;; const doc = ( &lt;PdfDocument pageOrientation=&quot;landscape&quot; pageSize=&quot;A4&quot;&gt; &lt;pdf-text&gt;Hello world!&lt;/pdf-text&gt; &lt;/PdfDocument&gt; ); ","version":"Next","tagName":"h2"},{"title":"Playground","type":0,"sectionRef":"#","url":"/react-pdfmake-reconciler/docs/playground","content":"Playground A playground is available on Stackblitz.","keywords":"","version":"Next"},{"title":"PdfTable","type":0,"sectionRef":"#","url":"/react-pdfmake-reconciler/docs/jsx/pdf-components/pdf-table","content":"","keywords":"","version":"Next"},{"title":"Props​","type":1,"pageTitle":"PdfTable","url":"/react-pdfmake-reconciler/docs/jsx/pdf-components/pdf-table#props","content":"   ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"PdfTable","url":"/react-pdfmake-reconciler/docs/jsx/pdf-components/pdf-table#example","content":" tsx import { PdfTable } from &quot;react-pdfmake-reconciler&quot;; const table = ( &lt;PdfTable rows={[ [&lt;pdf-text&gt;Header 1&lt;/pdf-text&gt;, &lt;pdf-text&gt;Header 2&lt;/pdf-text&gt;], [ &lt;pdf-cell border={[true, true, true, true]}&gt; &lt;pdf-text&gt;Cell 1&lt;/pdf-text&gt; &lt;/pdf-cell&gt;, &lt;pdf-text&gt;Cell 2&lt;/pdf-text&gt;, ], ]} /&gt; ); tsx import { PdfTable } from &quot;react-pdfmake-reconciler&quot;; const table = ( &lt;PdfTable rows={[ [&lt;pdf-text&gt;Header 1&lt;/pdf-text&gt;, &lt;pdf-text&gt;Header 2&lt;/pdf-text&gt;], [ &lt;pdf-cell border={[true, true, true, true]}&gt; &lt;pdf-text&gt;Cell 1&lt;/pdf-text&gt; &lt;/pdf-cell&gt;, &lt;pdf-text&gt;Cell 2&lt;/pdf-text&gt;, ], ]} /&gt; ); ","version":"Next","tagName":"h2"},{"title":"PdfHeader & PdfFooter","type":0,"sectionRef":"#","url":"/react-pdfmake-reconciler/docs/jsx/pdf-components/pdf-header-footer","content":"","keywords":"","version":"Next"},{"title":"PdfHeader Props​","type":1,"pageTitle":"PdfHeader & PdfFooter","url":"/react-pdfmake-reconciler/docs/jsx/pdf-components/pdf-header-footer#pdfheader-props","content":"   ","version":"Next","tagName":"h2"},{"title":"PdfFooter Props​","type":1,"pageTitle":"PdfHeader & PdfFooter","url":"/react-pdfmake-reconciler/docs/jsx/pdf-components/pdf-header-footer#pdffooter-props","content":"   ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"PdfHeader & PdfFooter","url":"/react-pdfmake-reconciler/docs/jsx/pdf-components/pdf-header-footer#example","content":" tsx import { PdfHeader, PdfFooter } from &quot;react-pdfmake-reconciler&quot;; const staticHeader = ( &lt;PdfHeader&gt; &lt;pdf-text&gt;Hello world!&lt;/pdf-text&gt; &lt;/PdfHeader&gt; ); const dynamicFooter = ( &lt;PdfFooter&gt; {(currentPage, pageCount, pageSize) =&gt; ( &lt;pdf-text&gt; Page {currentPage} / {pageCount} &lt;/pdf-text&gt; )} &lt;/PdfFooter&gt; ); tsx import { PdfHeader, PdfFooter } from &quot;react-pdfmake-reconciler&quot;; const staticHeader = ( &lt;PdfHeader&gt; &lt;pdf-text&gt;Hello world!&lt;/pdf-text&gt; &lt;/PdfHeader&gt; ); const dynamicFooter = ( &lt;PdfFooter&gt; {(currentPage, pageCount, pageSize) =&gt; ( &lt;pdf-text&gt; Page {currentPage} / {pageCount} &lt;/pdf-text&gt; )} &lt;/PdfFooter&gt; );  ","version":"Next","tagName":"h2"},{"title":"Regarding React Context​","type":1,"pageTitle":"PdfHeader & PdfFooter","url":"/react-pdfmake-reconciler/docs/jsx/pdf-components/pdf-header-footer#regarding-react-context","content":" The way how dynamic content is that the renderer statically renders the function separately, so Context doesn't penetrate into dynamic content, just like PdfRenderer. See also for workaround. ","version":"Next","tagName":"h2"},{"title":"PdfRenderer","type":0,"sectionRef":"#","url":"/react-pdfmake-reconciler/docs/renderer","content":"","keywords":"","version":"Next"},{"title":"Render to React loop​","type":1,"pageTitle":"PdfRenderer","url":"/react-pdfmake-reconciler/docs/renderer#render-to-react-loop","content":" tsx import { PdfRenderer } from &quot;react-pdfmake-reconciler&quot;; const { unmount } = PdfRenderer.render( &lt;pdf-text&gt;Hello world!&lt;/pdf-text&gt;, (updatedDoc) =&gt; { console.log(&quot;updated&quot;); }, ); // When unmounting unmount(); tsx import { PdfRenderer } from &quot;react-pdfmake-reconciler&quot;; const { unmount } = PdfRenderer.render( &lt;pdf-text&gt;Hello world!&lt;/pdf-text&gt;, (updatedDoc) =&gt; { console.log(&quot;updated&quot;); }, ); // When unmounting unmount();  ","version":"Next","tagName":"h2"},{"title":"Static render​","type":1,"pageTitle":"PdfRenderer","url":"/react-pdfmake-reconciler/docs/renderer#static-render","content":" tsx import { PdfRenderer } from &quot;react-pdfmake-reconciler&quot;; const doc = PdfRenderer.renderOnce(&lt;pdf-text&gt;Hello world!&lt;/pdf-text&gt;); tsx import { PdfRenderer } from &quot;react-pdfmake-reconciler&quot;; const doc = PdfRenderer.renderOnce(&lt;pdf-text&gt;Hello world!&lt;/pdf-text&gt;);  ","version":"Next","tagName":"h2"},{"title":"Full example​","type":1,"pageTitle":"PdfRenderer","url":"/react-pdfmake-reconciler/docs/renderer#full-example","content":" tsx import pdfMake from &quot;pdfmake/build/pdfmake.js&quot;; import type { BufferOptions, TDocumentDefinitions, TFontDictionary, } from &quot;pdfmake/interfaces&quot;; import { PdfRenderer } from &quot;react-pdfmake-reconciler&quot;; const doc = PdfRenderer.renderOnce(&lt;pdf-text&gt;Hello world!&lt;/pdf-text&gt;); const defaultFonts: TFontDictionary = { Roboto: { normal: &quot;https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/fonts/Roboto/Roboto-Regular.ttf&quot;, bold: &quot;https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/fonts/Roboto/Roboto-Medium.ttf&quot;, italics: &quot;https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/fonts/Roboto/Roboto-Italic.ttf&quot;, bolditalics: &quot;https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/fonts/Roboto/Roboto-MediumItalic.ttf&quot;, }, }; pdfMake.createPdf(doc, undefined, defaultFonts).download(&quot;myDocument.pdf&quot;); tsx import pdfMake from &quot;pdfmake/build/pdfmake.js&quot;; import type { BufferOptions, TDocumentDefinitions, TFontDictionary, } from &quot;pdfmake/interfaces&quot;; import { PdfRenderer } from &quot;react-pdfmake-reconciler&quot;; const doc = PdfRenderer.renderOnce(&lt;pdf-text&gt;Hello world!&lt;/pdf-text&gt;); const defaultFonts: TFontDictionary = { Roboto: { normal: &quot;https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/fonts/Roboto/Roboto-Regular.ttf&quot;, bold: &quot;https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/fonts/Roboto/Roboto-Medium.ttf&quot;, italics: &quot;https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/fonts/Roboto/Roboto-Italic.ttf&quot;, bolditalics: &quot;https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/fonts/Roboto/Roboto-MediumItalic.ttf&quot;, }, }; pdfMake.createPdf(doc, undefined, defaultFonts).download(&quot;myDocument.pdf&quot;); ","version":"Next","tagName":"h2"},{"title":"Introduction","type":0,"sectionRef":"#","url":"/react-pdfmake-reconciler/docs/intro","content":"","keywords":"","version":"Next"},{"title":"Installation​","type":1,"pageTitle":"Introduction","url":"/react-pdfmake-reconciler/docs/intro#installation","content":" This package is available on NPM.  npm i react-pdfmake-reconciler   ","version":"Next","tagName":"h2"},{"title":"Features​","type":1,"pageTitle":"Introduction","url":"/react-pdfmake-reconciler/docs/intro#features","content":" Write complex PDF in JSX. Render JSX into pdfmake content structure.Utilize React features like: Context. Note that outside React contexts do not penetrate into PDF renderer.ComponentsHooks Working React update loop, (although it is unlikely to trigger user events inside PDF.), e.g. async setState callsuseEffect call TypeScript typing for pdfmake Components (&lt;pdf-*&gt; components)React Developer Tools support    ","version":"Next","tagName":"h2"},{"title":"Running demo​","type":1,"pageTitle":"Introduction","url":"/react-pdfmake-reconciler/docs/intro#running-demo","content":" pnpm i pnpm dev   ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"Introduction","url":"/react-pdfmake-reconciler/docs/intro#usage","content":" See /demo and tests for more extensive examples.  ","version":"Next","tagName":"h2"},{"title":"Simple examples​","type":1,"pageTitle":"Introduction","url":"/react-pdfmake-reconciler/docs/intro#simple-examples","content":" /// &lt;reference types=&quot;react-pdfmake-reconciler/react-jsx&quot; /&gt; import { PdfRenderer } from &quot;react-pdfmake-reconciler/PdfRenderer&quot;; const { unmount } = PdfRenderer.render( &lt;pdf-text bold&gt;Hello World!&lt;/pdf-text&gt;, (document) =&gt; console.log(document), ); /* Console: { content: { $__reactPdfMakeType: 'pdf-text', text: 'Hello World!', bold: true } } */ // Call unmount to detach node tree. unmount();   import { PdfRenderer } from &quot;react-pdfmake-reconciler/PdfRenderer&quot;; const document = PdfRenderer.renderOnce(&lt;pdf-text bold&gt;Hello World!&lt;/pdf-text&gt;);   ","version":"Next","tagName":"h3"},{"title":"PDF elements​","type":1,"pageTitle":"Introduction","url":"/react-pdfmake-reconciler/docs/intro#pdf-elements","content":" Newly defined intrinsic elements by this package have the pdf- prefix. Roughly speaking, each type of pdfmake content object corresponds to one element type, where the property specifying the Content is mapped to the children prop. For example:  const pdfMakeContent = { text: &quot;GitHub&quot;, link: &quot;https://www.github.com&quot;, }; // is mapped to const pdfNode = &lt;pdf-text link=&quot;https://www.github.com&quot;&gt;GitHub&lt;/pdf-text&gt;;   There are also virtual element types. For more information, read JSDocs in types for more information.  ","version":"Next","tagName":"h3"},{"title":"Document, Header, and Footer​","type":1,"pageTitle":"Introduction","url":"/react-pdfmake-reconciler/docs/intro#document-header-and-footer","content":" You can easily define extra document definition props straight inside your JSX using &lt;PdfDocument&gt;. It is optional to put the body of the document inside this component.  Implemented using React Portals, you can define static/dynamic header and footer using &lt;PdfHeader&gt; and &lt;PdfFooter&gt;.  These components can appear anywhere within your JSX structure, although you may follow this convention for a better looking structure:  import { PdfDocument, PdfHeader, PdfFooter } from &quot;react-pdfmake-reconciler&quot;; const pdfNode = ( &lt;PdfDocument orientation=&quot;landscape&quot;&gt; {/* Example static header */} &lt;PdfHeader&gt;This is a header&lt;/PdfHeader&gt; {/* Example dynmaic footer */} &lt;PdfFooter&gt; {(pageNumber, pageCount) =&gt; ( &lt;pdf-text&gt; Page {pageNumber} / {pageCount} &lt;/pdf-text&gt; )} &lt;/PdfFooter&gt; {bodyGoesHere} &lt;/PdfDocument&gt; );   ","version":"Next","tagName":"h3"},{"title":"PdfPreview​","type":1,"pageTitle":"Introduction","url":"/react-pdfmake-reconciler/docs/intro#pdfpreview","content":" &lt;PdfPreview&gt; provides an easy way to render your React pdfmake Reconciler JSX in the browser. You can also debug your PDF JSX using the React Developer Tools browser extension.  import { FC, StrictMode } from &quot;react&quot;; import { PdfPreview } from &quot;react-pdfmake-reconciler&quot;; const App: FC = () =&gt; ( &lt;div&gt; &lt;PdfPreview&gt; {/* Optional */} &lt;StrictMode&gt; {/* Only use components that resolves to pdf-* components from here on out. DOM elements won't work. */} &lt;pdf-text&gt;Hello World!&lt;/pdf-text&gt; &lt;/StrictMode&gt; &lt;/PdfPreview&gt; &lt;/div&gt; );  ","version":"Next","tagName":"h3"},{"title":"Intrinsic elements","type":0,"sectionRef":"#","url":"/react-pdfmake-reconciler/docs/jsx/intrinsics","content":"","keywords":"","version":"Next"},{"title":"Trivial elements​","type":1,"pageTitle":"Intrinsic elements","url":"/react-pdfmake-reconciler/docs/jsx/intrinsics#trivial-elements","content":" These are defined such that the reasonable content property is made the children of the element, and that property is made the name of the element.  tsx /// &lt;reference types=&quot;react-pdfmake-reconciler/react-jsx&quot; /&gt; const text = &lt;pdf-text&gt;&lt;/pdf-text&gt;; (property) PdfElements[&quot;pdf-text&quot;]: PdfPropsWithChildren&lt;Omit&lt;ContentText, &quot;text&quot;&gt; | Omit&lt;ContentLink, &quot;text&quot;&gt; | Omit&lt;ContentAnchor, &quot;text&quot;&gt; | Omit&lt;ContentTocItem, &quot;text&quot;&gt;&gt; const columns = &lt;pdf-columns&gt;&lt;/pdf-columns&gt;; (property) PdfElements[&quot;pdf-columns&quot;]: PdfPropsWithChildren&lt;Omit&lt;ContentColumns, &quot;columns&quot;&gt;&gt; const stack = &lt;pdf-stack&gt;&lt;/pdf-stack&gt;; (property) PdfElements[&quot;pdf-stack&quot;]: PdfPropsWithChildren&lt;Omit&lt;ContentStack, &quot;stack&quot;&gt;&gt; const ol = &lt;pdf-ol&gt;&lt;/pdf-ol&gt;; (property) PdfElements[&quot;pdf-ol&quot;]: PdfPropsWithChildren&lt;Omit&lt;ContentOrderedList, &quot;ol&quot;&gt;&gt; const ul = &lt;pdf-ul&gt;&lt;/pdf-ul&gt;; (property) PdfElements[&quot;pdf-ul&quot;]: PdfPropsWithChildren&lt;Omit&lt;ContentUnorderedList, &quot;ul&quot;&gt;&gt; const table = &lt;pdf-table&gt;&lt;/pdf-table&gt;; (property) PdfElements[&quot;pdf-table&quot;]: PdfPropsWithChildren&lt;Omit&lt;ContentTable, &quot;table&quot;&gt;&gt; const pageReference = &lt;pdf-pageReference&gt;ref&lt;/pdf-pageReference&gt;; (property) PdfElements[&quot;pdf-pageReference&quot;]: { children: string; } &amp; Omit&lt;ContentPageReference, &quot;pageReference&quot;&gt; const textReference = &lt;pdf-textReference&gt;ref&lt;/pdf-textReference&gt;; (property) PdfElements[&quot;pdf-textReference&quot;]: { children: string; } &amp; Omit&lt;ContentTextReference, &quot;textReference&quot;&gt; const image = &lt;pdf-image image=&quot;myImage&quot; /&gt;; (property) PdfElements[&quot;pdf-image&quot;]: ContentImage const svg = &lt;pdf-svg svg=&quot;&lt;svg&gt;&lt;/svg&gt;&quot; /&gt;; (property) PdfElements[&quot;pdf-svg&quot;]: ContentSvg const qr = &lt;pdf-qr qr=&quot;hello&quot; /&gt;; (property) PdfElements[&quot;pdf-qr&quot;]: ContentQr const canvas = &lt;pdf-canvas canvas={[]} /&gt;; (property) PdfElements[&quot;pdf-canvas&quot;]: ContentCanvas tsx /// &lt;reference types=&quot;react-pdfmake-reconciler/react-jsx&quot; /&gt; const text = &lt;pdf-text&gt;&lt;/pdf-text&gt;; (property) PdfElements[&quot;pdf-text&quot;]: PdfPropsWithChildren&lt;Omit&lt;ContentText, &quot;text&quot;&gt; | Omit&lt;ContentLink, &quot;text&quot;&gt; | Omit&lt;ContentAnchor, &quot;text&quot;&gt; | Omit&lt;ContentTocItem, &quot;text&quot;&gt;&gt; const columns = &lt;pdf-columns&gt;&lt;/pdf-columns&gt;; (property) PdfElements[&quot;pdf-columns&quot;]: PdfPropsWithChildren&lt;Omit&lt;ContentColumns, &quot;columns&quot;&gt;&gt; const stack = &lt;pdf-stack&gt;&lt;/pdf-stack&gt;; (property) PdfElements[&quot;pdf-stack&quot;]: PdfPropsWithChildren&lt;Omit&lt;ContentStack, &quot;stack&quot;&gt;&gt; const ol = &lt;pdf-ol&gt;&lt;/pdf-ol&gt;; (property) PdfElements[&quot;pdf-ol&quot;]: PdfPropsWithChildren&lt;Omit&lt;ContentOrderedList, &quot;ol&quot;&gt;&gt; const ul = &lt;pdf-ul&gt;&lt;/pdf-ul&gt;; (property) PdfElements[&quot;pdf-ul&quot;]: PdfPropsWithChildren&lt;Omit&lt;ContentUnorderedList, &quot;ul&quot;&gt;&gt; const table = &lt;pdf-table&gt;&lt;/pdf-table&gt;; (property) PdfElements[&quot;pdf-table&quot;]: PdfPropsWithChildren&lt;Omit&lt;ContentTable, &quot;table&quot;&gt;&gt; const pageReference = &lt;pdf-pageReference&gt;ref&lt;/pdf-pageReference&gt;; (property) PdfElements[&quot;pdf-pageReference&quot;]: { children: string; } &amp; Omit&lt;ContentPageReference, &quot;pageReference&quot;&gt; const textReference = &lt;pdf-textReference&gt;ref&lt;/pdf-textReference&gt;; (property) PdfElements[&quot;pdf-textReference&quot;]: { children: string; } &amp; Omit&lt;ContentTextReference, &quot;textReference&quot;&gt; const image = &lt;pdf-image image=&quot;myImage&quot; /&gt;; (property) PdfElements[&quot;pdf-image&quot;]: ContentImage const svg = &lt;pdf-svg svg=&quot;&lt;svg&gt;&lt;/svg&gt;&quot; /&gt;; (property) PdfElements[&quot;pdf-svg&quot;]: ContentSvg const qr = &lt;pdf-qr qr=&quot;hello&quot; /&gt;; (property) PdfElements[&quot;pdf-qr&quot;]: ContentQr const canvas = &lt;pdf-canvas canvas={[]} /&gt;; (property) PdfElements[&quot;pdf-canvas&quot;]: ContentCanvas  ","version":"Next","tagName":"h2"},{"title":"Virtual elements​","type":1,"pageTitle":"Intrinsic elements","url":"/react-pdfmake-reconciler/docs/jsx/intrinsics#virtual-elements","content":" In addition to the above intrinsic elements, there are also these which are categorized as virtual elements. These are, in one way or another, specially treated by the renderer where the content key doesn't match the name, or they do not correlate to a rendered content object.  tsx /// &lt;reference types=&quot;react-pdfmake-reconciler/react-jsx&quot; /&gt; const array = &lt;pdf-array&gt;&lt;/pdf-array&gt;; (property) VirtualPdfElements[&quot;pdf-array&quot;]: PdfPropsWithChildren&lt;object&gt; const cell = ( &lt;pdf-cell&gt; (property) VirtualPdfElements[&quot;pdf-cell&quot;]: PassThroughPdfProps&lt;TableCellProperties&gt; &lt;pdf-text&gt;&lt;/pdf-text&gt; &lt;/pdf-cell&gt; ); const column = ( &lt;pdf-column&gt; (property) VirtualPdfElements[&quot;pdf-column&quot;]: PassThroughPdfProps&lt;ColumnProperties&gt; &lt;pdf-text&gt;&lt;/pdf-text&gt; &lt;/pdf-column&gt; ); const li = ( &lt;pdf-li&gt; (property) VirtualPdfElements[&quot;pdf-li&quot;]: PassThroughPdfProps&lt;OrderedListElementProperties | UnorderedListElementProperties&gt; &lt;pdf-text&gt;&lt;/pdf-text&gt; &lt;/pdf-li&gt; ); const tbody = &lt;pdf-tbody&gt;{[]}&lt;/pdf-tbody&gt;; (property) VirtualPdfElements[&quot;pdf-tbody&quot;]: PdfPropsWithChildren&lt;Omit&lt;Table, &quot;body&quot;&gt;&gt; const toc = &lt;pdf-toc&gt;&lt;/pdf-toc&gt;; (property) VirtualPdfElements[&quot;pdf-toc&quot;]: PdfPropsWithChildren&lt;Omit&lt;TableOfContent, &quot;title&quot;&gt;&gt; tsx /// &lt;reference types=&quot;react-pdfmake-reconciler/react-jsx&quot; /&gt; const array = &lt;pdf-array&gt;&lt;/pdf-array&gt;; (property) VirtualPdfElements[&quot;pdf-array&quot;]: PdfPropsWithChildren&lt;object&gt; const cell = ( &lt;pdf-cell&gt; (property) VirtualPdfElements[&quot;pdf-cell&quot;]: PassThroughPdfProps&lt;TableCellProperties&gt; &lt;pdf-text&gt;&lt;/pdf-text&gt; &lt;/pdf-cell&gt; ); const column = ( &lt;pdf-column&gt; (property) VirtualPdfElements[&quot;pdf-column&quot;]: PassThroughPdfProps&lt;ColumnProperties&gt; &lt;pdf-text&gt;&lt;/pdf-text&gt; &lt;/pdf-column&gt; ); const li = ( &lt;pdf-li&gt; (property) VirtualPdfElements[&quot;pdf-li&quot;]: PassThroughPdfProps&lt;OrderedListElementProperties | UnorderedListElementProperties&gt; &lt;pdf-text&gt;&lt;/pdf-text&gt; &lt;/pdf-li&gt; ); const tbody = &lt;pdf-tbody&gt;{[]}&lt;/pdf-tbody&gt;; (property) VirtualPdfElements[&quot;pdf-tbody&quot;]: PdfPropsWithChildren&lt;Omit&lt;Table, &quot;body&quot;&gt;&gt; const toc = &lt;pdf-toc&gt;&lt;/pdf-toc&gt;; (property) VirtualPdfElements[&quot;pdf-toc&quot;]: PdfPropsWithChildren&lt;Omit&lt;TableOfContent, &quot;title&quot;&gt;&gt; ","version":"Next","tagName":"h2"},{"title":"PdfPreview","type":0,"sectionRef":"#","url":"/react-pdfmake-reconciler/docs/jsx/util-components/pdf-preview","content":"","keywords":"","version":"Next"},{"title":"Props​","type":1,"pageTitle":"PdfPreview","url":"/react-pdfmake-reconciler/docs/jsx/util-components/pdf-preview#props","content":"   ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"PdfPreview","url":"/react-pdfmake-reconciler/docs/jsx/util-components/pdf-preview#example","content":" tsx import { FC, StrictMode } from &quot;react&quot;; import { PdfPreview } from &quot;react-pdfmake-reconciler&quot;; export const App: FC = () =&gt; ( &lt;div&gt; &lt;PdfPreview&gt; {/* Optional */} &lt;StrictMode&gt; {/* Only use components that resolves to pdf-* components from here on out. DOM elements won't work. */} &lt;pdf-text&gt;Hello World!&lt;/pdf-text&gt; &lt;/StrictMode&gt; &lt;/PdfPreview&gt; &lt;/div&gt; ); tsx import { FC, StrictMode } from &quot;react&quot;; import { PdfPreview } from &quot;react-pdfmake-reconciler&quot;; export const App: FC = () =&gt; ( &lt;div&gt; &lt;PdfPreview&gt; {/* Optional */} &lt;StrictMode&gt; {/* Only use components that resolves to pdf-* components from here on out. DOM elements won't work. */} &lt;pdf-text&gt;Hello World!&lt;/pdf-text&gt; &lt;/StrictMode&gt; &lt;/PdfPreview&gt; &lt;/div&gt; );  The PDF is then mounted onto your React app as an iframe. This only works well when you are debugging your PDF setup on a desktop browser. Try opening your React Development Tools, you should see the PDF section being mounted at the very bottom of the tree.  You should see something like this:  PdfContext.Provider └ Y ⬅️ The PdfTable component ├ Fragment key=&quot;0-0&quot; ├ Fragment key=&quot;0-1&quot; ├ Fragment key=&quot;1-0&quot; └ Fragment key=&quot;1-1&quot; PdfContext.Provider └ Y ⬅️ The PdfTable component ├ Fragment key=&quot;0-0&quot; ├ Fragment key=&quot;0-1&quot; ├ Fragment key=&quot;1-0&quot; └ Fragment key=&quot;1-1&quot;    ","version":"Next","tagName":"h2"},{"title":"Regarding React Context​","type":1,"pageTitle":"PdfPreview","url":"/react-pdfmake-reconciler/docs/jsx/util-components/pdf-preview#regarding-react-context","content":" React Context does not penetrate through &lt;PdfPreview&gt;. If you need to pass in values within your Context, consider reapplying the Context inside.  tsx // @filename: App.tsx import React, { FC } from &quot;react&quot;; import { MyContext } from &quot;./MyContext&quot;; import { PreviewWrapper } from &quot;./PreviewWrapper&quot;; export const App: FC = () =&gt; ( &lt;div&gt; {/* Normal app Context */} &lt;MyContext.Provider value={{ bestSnack: &quot;chips&quot; }}&gt; &lt;PreviewWrapper /&gt; &lt;/MyContext.Provider&gt; &lt;/div&gt; ); // @filename: PreviewWrapper.tsx import React, { FC, StrictMode, useContext } from &quot;react&quot;; import { PdfPreview } from &quot;react-pdfmake-reconciler&quot;; import { MyContext } from &quot;./MyContext&quot;; import { PdfSnack } from &quot;./PdfSnack&quot;; export const PreviewWrapper: FC = () =&gt; { const myContext = useContext(MyContext); return ( &lt;PdfPreview&gt; &lt;StrictMode&gt; {/* Forward needed Context for PDF rendering */} &lt;MyContext.Provider value={myContext}&gt; &lt;PdfSnack /&gt; &lt;/MyContext.Provider&gt; &lt;/StrictMode&gt; &lt;/PdfPreview&gt; ); }; // @filename: PdfSnack.tsx import React, { FC, useContext } from &quot;react&quot;; import { MyContext } from &quot;./MyContext&quot;; export const PdfSnack: FC = () =&gt; { const { bestSnack } = useContext(MyContext); return &lt;pdf-text&gt;{bestSnack}&lt;/pdf-text&gt;; }; // @filename: MyContext.tsx import { createContext, useContext } from &quot;react&quot;; interface MyContextType { bestSnack: string | null; } export const MyContext = createContext&lt;MyContextType&gt;({ bestSnack: null, }); tsx // @filename: App.tsx import React, { FC } from &quot;react&quot;; import { MyContext } from &quot;./MyContext&quot;; import { PreviewWrapper } from &quot;./PreviewWrapper&quot;; export const App: FC = () =&gt; ( &lt;div&gt; {/* Normal app Context */} &lt;MyContext.Provider value={{ bestSnack: &quot;chips&quot; }}&gt; &lt;PreviewWrapper /&gt; &lt;/MyContext.Provider&gt; &lt;/div&gt; ); // @filename: PreviewWrapper.tsx import React, { FC, StrictMode, useContext } from &quot;react&quot;; import { PdfPreview } from &quot;react-pdfmake-reconciler&quot;; import { MyContext } from &quot;./MyContext&quot;; import { PdfSnack } from &quot;./PdfSnack&quot;; export const PreviewWrapper: FC = () =&gt; { const myContext = useContext(MyContext); return ( &lt;PdfPreview&gt; &lt;StrictMode&gt; {/* Forward needed Context for PDF rendering */} &lt;MyContext.Provider value={myContext}&gt; &lt;PdfSnack /&gt; &lt;/MyContext.Provider&gt; &lt;/StrictMode&gt; &lt;/PdfPreview&gt; ); }; // @filename: PdfSnack.tsx import React, { FC, useContext } from &quot;react&quot;; import { MyContext } from &quot;./MyContext&quot;; export const PdfSnack: FC = () =&gt; { const { bestSnack } = useContext(MyContext); return &lt;pdf-text&gt;{bestSnack}&lt;/pdf-text&gt;; }; // @filename: MyContext.tsx import { createContext, useContext } from &quot;react&quot;; interface MyContextType { bestSnack: string | null; } export const MyContext = createContext&lt;MyContextType&gt;({ bestSnack: null, }); ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}