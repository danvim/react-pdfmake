{"searchDocs":[{"title":"React Utility components","type":0,"sectionRef":"#","url":"/react-pdfmake-reconciler/docs/jsx/util-components","content":"React Utility components These components are used outside PDF nodes.","keywords":"","version":"Next"},{"title":"Getting started","type":0,"sectionRef":"#","url":"/react-pdfmake-reconciler/docs/getting-started","content":"Getting started","keywords":"","version":"Next"},{"title":"Installation","type":0,"sectionRef":"#","url":"/react-pdfmake-reconciler/docs/getting-started/installation","content":"Installation This package is available on NPM. shell npm i react-pdfmake-reconciler pnpm i react-pdfmake-reconciler yarn add react-pdfmake-reconciler shell npm i react-pdfmake-reconciler pnpm i react-pdfmake-reconciler yarn add react-pdfmake-reconciler","keywords":"","version":"Next"},{"title":"JSX","type":0,"sectionRef":"#","url":"/react-pdfmake-reconciler/docs/jsx","content":"JSX This package exports the following JSX elements and React components. These are used in conjunction with PdfRenderer to build a pdfmake document definition object.","keywords":"","version":"Next"},{"title":"Introduction","type":0,"sectionRef":"#","url":"/react-pdfmake-reconciler/docs/intro","content":"","keywords":"","version":"Next"},{"title":"Motivation​","type":1,"pageTitle":"Introduction","url":"/react-pdfmake-reconciler/docs/intro#motivation","content":" There are multiple JavaScript PDF packages already out there that provide the capability of creating PDFs. However, one might still prefer some features of pdfmake, e.g. Duplicate table headers when tables go across pages. However, working with pdfmake's content objects directly in more complex projects may increase difficulties in code organization, especially when organizing contents in component functions.  Here are some pain points you may come across without using this library:  Passing the same set of arguments repetitively down nested functions.Difficulties in debugging complex PDFs made with pdfmake.Organizing components as functions differentiates return type between Content[] and Content  Having encountered these issues, I began working on this library as a weekend project.  ","version":"Next","tagName":"h2"},{"title":"Features​","type":1,"pageTitle":"Introduction","url":"/react-pdfmake-reconciler/docs/intro#features","content":" React pdfmake Reconciler is a package that utilizes React JSX for document preparation. Using react-reconciler under the hood, developers are free to use most of React's feature with this library.  React pdfmake Reconciler's features include:  Write complex PDF in JSX. Render JSX into pdfmake content structure.Utilize React features like: Context. Note that outside React contexts do not penetrate into PDF renderer.ComponentsHooks Working React update loop, (although it is unlikely to trigger user events inside PDF.), e.g. async setState callsuseEffect call TypeScript typing for pdfmake Components (&lt;pdf-*&gt; components)React Developer Tools supportStyled API ","version":"Next","tagName":"h2"},{"title":"React PDF components","type":0,"sectionRef":"#","url":"/react-pdfmake-reconciler/docs/jsx/pdf-components","content":"React PDF components These components result in &lt;pdf-*&gt; intrinsic elements, and should be used for PDF rendering.","keywords":"","version":"Next"},{"title":"Playground","type":0,"sectionRef":"#","url":"/react-pdfmake-reconciler/docs/playground","content":"Playground A playground is available on StackBlitz.","keywords":"","version":"Next"},{"title":"PdfTable","type":0,"sectionRef":"#","url":"/react-pdfmake-reconciler/docs/jsx/pdf-components/pdf-table","content":"","keywords":"","version":"Next"},{"title":"Props​","type":1,"pageTitle":"PdfTable","url":"/react-pdfmake-reconciler/docs/jsx/pdf-components/pdf-table#props","content":"   ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"PdfTable","url":"/react-pdfmake-reconciler/docs/jsx/pdf-components/pdf-table#example","content":" tsx import { PdfTable } from &quot;react-pdfmake-reconciler&quot;; const table = ( &lt;PdfTable rows={[ [&lt;pdf-text&gt;Header 1&lt;/pdf-text&gt;, &lt;pdf-text&gt;Header 2&lt;/pdf-text&gt;], [ &lt;pdf-cell border={[true, true, true, true]}&gt; &lt;pdf-text&gt;Cell 1&lt;/pdf-text&gt; &lt;/pdf-cell&gt;, &lt;pdf-text&gt;Cell 2&lt;/pdf-text&gt;, ], ]} /&gt; ); tsx import { PdfTable } from &quot;react-pdfmake-reconciler&quot;; const table = ( &lt;PdfTable rows={[ [&lt;pdf-text&gt;Header 1&lt;/pdf-text&gt;, &lt;pdf-text&gt;Header 2&lt;/pdf-text&gt;], [ &lt;pdf-cell border={[true, true, true, true]}&gt; &lt;pdf-text&gt;Cell 1&lt;/pdf-text&gt; &lt;/pdf-cell&gt;, &lt;pdf-text&gt;Cell 2&lt;/pdf-text&gt;, ], ]} /&gt; ); ","version":"Next","tagName":"h2"},{"title":"PdfDocument","type":0,"sectionRef":"#","url":"/react-pdfmake-reconciler/docs/jsx/pdf-components/pdf-document","content":"","keywords":"","version":"Next"},{"title":"Props​","type":1,"pageTitle":"PdfDocument","url":"/react-pdfmake-reconciler/docs/jsx/pdf-components/pdf-document#props","content":"   ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"PdfDocument","url":"/react-pdfmake-reconciler/docs/jsx/pdf-components/pdf-document#example","content":" tsx import { PdfDocument } from &quot;react-pdfmake-reconciler&quot;; const doc = ( &lt;PdfDocument pageOrientation=&quot;landscape&quot; pageSize=&quot;A4&quot;&gt; &lt;pdf-text&gt;Hello world!&lt;/pdf-text&gt; &lt;/PdfDocument&gt; ); tsx import { PdfDocument } from &quot;react-pdfmake-reconciler&quot;; const doc = ( &lt;PdfDocument pageOrientation=&quot;landscape&quot; pageSize=&quot;A4&quot;&gt; &lt;pdf-text&gt;Hello world!&lt;/pdf-text&gt; &lt;/PdfDocument&gt; ); ","version":"Next","tagName":"h2"},{"title":"PdfHeader & PdfFooter","type":0,"sectionRef":"#","url":"/react-pdfmake-reconciler/docs/jsx/pdf-components/pdf-header-footer","content":"","keywords":"","version":"Next"},{"title":"PdfHeader Props​","type":1,"pageTitle":"PdfHeader & PdfFooter","url":"/react-pdfmake-reconciler/docs/jsx/pdf-components/pdf-header-footer#pdfheader-props","content":"   ","version":"Next","tagName":"h2"},{"title":"PdfFooter Props​","type":1,"pageTitle":"PdfHeader & PdfFooter","url":"/react-pdfmake-reconciler/docs/jsx/pdf-components/pdf-header-footer#pdffooter-props","content":"   ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"PdfHeader & PdfFooter","url":"/react-pdfmake-reconciler/docs/jsx/pdf-components/pdf-header-footer#example","content":" tsx import { PdfHeader, PdfFooter } from &quot;react-pdfmake-reconciler&quot;; const staticHeader = ( &lt;PdfHeader&gt; &lt;pdf-text&gt;Hello world!&lt;/pdf-text&gt; &lt;/PdfHeader&gt; ); const dynamicFooter = ( &lt;PdfFooter&gt; {(currentPage, pageCount, pageSize) =&gt; ( &lt;pdf-text&gt; Page {currentPage} / {pageCount} &lt;/pdf-text&gt; )} &lt;/PdfFooter&gt; ); tsx import { PdfHeader, PdfFooter } from &quot;react-pdfmake-reconciler&quot;; const staticHeader = ( &lt;PdfHeader&gt; &lt;pdf-text&gt;Hello world!&lt;/pdf-text&gt; &lt;/PdfHeader&gt; ); const dynamicFooter = ( &lt;PdfFooter&gt; {(currentPage, pageCount, pageSize) =&gt; ( &lt;pdf-text&gt; Page {currentPage} / {pageCount} &lt;/pdf-text&gt; )} &lt;/PdfFooter&gt; );  ","version":"Next","tagName":"h2"},{"title":"Regarding React Context​","type":1,"pageTitle":"PdfHeader & PdfFooter","url":"/react-pdfmake-reconciler/docs/jsx/pdf-components/pdf-header-footer#regarding-react-context","content":" The way how dynamic content is that the renderer statically renders the function separately, so Context doesn't penetrate into dynamic content, just like PdfRenderer. See also for workaround. ","version":"Next","tagName":"h2"},{"title":"PdfRenderer","type":0,"sectionRef":"#","url":"/react-pdfmake-reconciler/docs/renderer","content":"","keywords":"","version":"Next"},{"title":"Static render​","type":1,"pageTitle":"PdfRenderer","url":"/react-pdfmake-reconciler/docs/renderer#static-render","content":" The common way to render. This assumes you have all the prepared data and plan to generate the PDF for download or saving. This renders once and returns a TDocumentDefinitions to input to pdfmake for the PDF generation.  tsx import { PdfRenderer } from &quot;react-pdfmake-reconciler&quot;; const doc = PdfRenderer.renderOnce(&lt;pdf-text&gt;Hello world!&lt;/pdf-text&gt;); tsx import { PdfRenderer } from &quot;react-pdfmake-reconciler&quot;; const doc = PdfRenderer.renderOnce(&lt;pdf-text&gt;Hello world!&lt;/pdf-text&gt;);  ","version":"Next","tagName":"h2"},{"title":"Render to React loop​","type":1,"pageTitle":"PdfRenderer","url":"/react-pdfmake-reconciler/docs/renderer#render-to-react-loop","content":" The rare way to render. This begins a React render loop, i.e. the React component itself (and/or its children) may trigger an update causing the rendered tree to update (e.g. async setStates from within). Whenever it renders initially or subsequently, the callback is triggered with the pdfmake TDocumentDefinitions of that instance.  tsx import { PdfRenderer } from &quot;react-pdfmake-reconciler&quot;; const { unmount } = PdfRenderer.render( &lt;pdf-text&gt;Hello world!&lt;/pdf-text&gt;, (updatedDoc) =&gt; { console.log(&quot;updated&quot;); }, ); // Unmounting will cause the renderer to stop rerendering on update and stop calling the callback. unmount(); tsx import { PdfRenderer } from &quot;react-pdfmake-reconciler&quot;; const { unmount } = PdfRenderer.render( &lt;pdf-text&gt;Hello world!&lt;/pdf-text&gt;, (updatedDoc) =&gt; { console.log(&quot;updated&quot;); }, ); // Unmounting will cause the renderer to stop rerendering on update and stop calling the callback. unmount();  ","version":"Next","tagName":"h2"},{"title":"Full example​","type":1,"pageTitle":"PdfRenderer","url":"/react-pdfmake-reconciler/docs/renderer#full-example","content":" For the full example, see Quick start. ","version":"Next","tagName":"h2"},{"title":"Quick start","type":0,"sectionRef":"#","url":"/react-pdfmake-reconciler/docs/getting-started/quick-start","content":"Quick start Below is a full client-side example to help you get started. See https://pdfmake.github.io/docs/0.1/getting-started/server-side/ for the server-side generation logic. tsx // Put this triple slash comment with your TS types so that TS can recognize &lt;pdf-*&gt; intrinsic // elements to provide type hinting. /// &lt;reference types=&quot;react-pdfmake-reconciler/react-jsx&quot; /&gt; import pdfMake from &quot;pdfmake/build/pdfmake.js&quot;; import type { BufferOptions, TDocumentDefinitions, TFontDictionary, } from &quot;pdfmake/interfaces&quot;; import { PdfRenderer } from &quot;react-pdfmake-reconciler&quot;; import React, { FC } from &quot;react&quot;; // Write components how you would with React. // But make sure to ultimately return &lt;pdf-*&gt; instrinsic elements and not DOM elements like &lt;p&gt;. const MyPdfBody: FC = () =&gt; &lt;pdf-text&gt;Hello world!&lt;/pdf-text&gt;; // Render JSX into pdfmake input object declaration. const doc = PdfRenderer.renderOnce(&lt;MyPdfBody /&gt;); // Render PDF on client-side and download the generated file. const defaultFonts: TFontDictionary = { Roboto: { normal: &quot;https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/fonts/Roboto/Roboto-Regular.ttf&quot;, bold: &quot;https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/fonts/Roboto/Roboto-Medium.ttf&quot;, italics: &quot;https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/fonts/Roboto/Roboto-Italic.ttf&quot;, bolditalics: &quot;https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/fonts/Roboto/Roboto-MediumItalic.ttf&quot;, }, }; pdfMake.createPdf(doc, undefined, defaultFonts).download(&quot;myDocument.pdf&quot;); tsx // Put this triple slash comment with your TS types so that TS can recognize &lt;pdf-*&gt; intrinsic // elements to provide type hinting. /// &lt;reference types=&quot;react-pdfmake-reconciler/react-jsx&quot; /&gt; import pdfMake from &quot;pdfmake/build/pdfmake.js&quot;; import type { BufferOptions, TDocumentDefinitions, TFontDictionary, } from &quot;pdfmake/interfaces&quot;; import { PdfRenderer } from &quot;react-pdfmake-reconciler&quot;; import React, { FC } from &quot;react&quot;; // Write components how you would with React. // But make sure to ultimately return &lt;pdf-*&gt; instrinsic elements and not DOM elements like &lt;p&gt;. const MyPdfBody: FC = () =&gt; &lt;pdf-text&gt;Hello world!&lt;/pdf-text&gt;; // Render JSX into pdfmake input object declaration. const doc = PdfRenderer.renderOnce(&lt;MyPdfBody /&gt;); // Render PDF on client-side and download the generated file. const defaultFonts: TFontDictionary = { Roboto: { normal: &quot;https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/fonts/Roboto/Roboto-Regular.ttf&quot;, bold: &quot;https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/fonts/Roboto/Roboto-Medium.ttf&quot;, italics: &quot;https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/fonts/Roboto/Roboto-Italic.ttf&quot;, bolditalics: &quot;https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/fonts/Roboto/Roboto-MediumItalic.ttf&quot;, }, }; pdfMake.createPdf(doc, undefined, defaultFonts).download(&quot;myDocument.pdf&quot;);","keywords":"","version":"Next"},{"title":"Styled","type":0,"sectionRef":"#","url":"/react-pdfmake-reconciler/docs/styled","content":"","keywords":"","version":"Next"},{"title":"Basic usage​","type":1,"pageTitle":"Styled","url":"/react-pdfmake-reconciler/docs/styled#basic-usage","content":" tsx /// &lt;reference types=&quot;react-pdfmake-reconciler/react-jsx&quot; /&gt; import { FC, ReactNode } from &quot;react&quot;; import { styled } from &quot;react-pdfmake-reconciler&quot;; import { StyleReference } from &quot;pdfmake/interfaces&quot;; const Text = styled(&quot;pdf-text&quot;)({ color: &quot;#f00&quot;, }); // Define additional props for styling. // isSuccess can leak into pdfmake output structure here const StatusText = styled(Text)&lt;{ isSuccess: boolean }&gt;((props) =&gt; ({ color: props.isSuccess ? &quot;#0f0&quot; : &quot;#f00&quot;, })); // Set display name for styled components to find them easily in React Dev Tools StatusText.displayName = &quot;StatusText&quot;; // When the underlying component controls what props goes into the vDOM, // it can prevent styled props from polluting the output. const SafeText: FC&lt;{ style?: StyleReference; children?: ReactNode }&gt; = ({ style, children, }) =&gt; &lt;pdf-text style={style}&gt;{children}&lt;/pdf-text&gt;; const StyledSafeText = styled(SafeText)&lt;{ isSuccess: boolean }&gt;((props) =&gt; ({ color: props.isSuccess ? &quot;#0f0&quot; : &quot;#f00&quot;, })); const pdfNode = ( &lt;&gt; &lt;Text&gt;Hello&lt;/Text&gt; &lt;StatusText isSuccess&gt;World!&lt;/StatusText&gt; &lt;StyledSafeText isSuccess&gt;World!&lt;/StyledSafeText&gt; &lt;/&gt; ); tsx /// &lt;reference types=&quot;react-pdfmake-reconciler/react-jsx&quot; /&gt; import { FC, ReactNode } from &quot;react&quot;; import { styled } from &quot;react-pdfmake-reconciler&quot;; import { StyleReference } from &quot;pdfmake/interfaces&quot;; const Text = styled(&quot;pdf-text&quot;)({ color: &quot;#f00&quot;, }); // Define additional props for styling. // isSuccess can leak into pdfmake output structure here const StatusText = styled(Text)&lt;{ isSuccess: boolean }&gt;((props) =&gt; ({ color: props.isSuccess ? &quot;#0f0&quot; : &quot;#f00&quot;, })); // Set display name for styled components to find them easily in React Dev Tools StatusText.displayName = &quot;StatusText&quot;; // When the underlying component controls what props goes into the vDOM, // it can prevent styled props from polluting the output. const SafeText: FC&lt;{ style?: StyleReference; children?: ReactNode }&gt; = ({ style, children, }) =&gt; &lt;pdf-text style={style}&gt;{children}&lt;/pdf-text&gt;; const StyledSafeText = styled(SafeText)&lt;{ isSuccess: boolean }&gt;((props) =&gt; ({ color: props.isSuccess ? &quot;#0f0&quot; : &quot;#f00&quot;, })); const pdfNode = ( &lt;&gt; &lt;Text&gt;Hello&lt;/Text&gt; &lt;StatusText isSuccess&gt;World!&lt;/StatusText&gt; &lt;StyledSafeText isSuccess&gt;World!&lt;/StyledSafeText&gt; &lt;/&gt; );  ","version":"Next","tagName":"h2"},{"title":"Theming​","type":1,"pageTitle":"Styled","url":"/react-pdfmake-reconciler/docs/styled#theming","content":" Override DefaultTheme from the package to provide your own theme structure and access it in the styled function.  tsx /// &lt;reference types=&quot;react-pdfmake-reconciler/react-jsx&quot; /&gt; import { FC, ReactNode } from &quot;react&quot;; import { styled, ThemeProvider } from &quot;react-pdfmake-reconciler&quot;; import { StyleReference } from &quot;pdfmake/interfaces&quot;; declare module &quot;react-pdfmake-reconciler&quot; { interface DefaultTheme { /** My primary color */ primaryColor: string; } } const Text = styled(&quot;pdf-text&quot;)((props, theme) =&gt; ({ color: theme.primaryColor, })); const pdfNode = ( &lt;ThemeProvider value={{ primaryColor: &quot;#f00&quot;, }} &gt; &lt;Text&gt;Hello&lt;/Text&gt; &lt;/ThemeProvider&gt; ); tsx /// &lt;reference types=&quot;react-pdfmake-reconciler/react-jsx&quot; /&gt; import { FC, ReactNode } from &quot;react&quot;; import { styled, ThemeProvider } from &quot;react-pdfmake-reconciler&quot;; import { StyleReference } from &quot;pdfmake/interfaces&quot;; declare module &quot;react-pdfmake-reconciler&quot; { interface DefaultTheme { /** My primary color */ primaryColor: string; } } const Text = styled(&quot;pdf-text&quot;)((props, theme) =&gt; ({ color: theme.primaryColor, })); const pdfNode = ( &lt;ThemeProvider value={{ primaryColor: &quot;#f00&quot;, }} &gt; &lt;Text&gt;Hello&lt;/Text&gt; &lt;/ThemeProvider&gt; ); ","version":"Next","tagName":"h2"},{"title":"Intrinsic elements","type":0,"sectionRef":"#","url":"/react-pdfmake-reconciler/docs/jsx/intrinsics","content":"","keywords":"","version":"Next"},{"title":"Trivial elements​","type":1,"pageTitle":"Intrinsic elements","url":"/react-pdfmake-reconciler/docs/jsx/intrinsics#trivial-elements","content":" These are defined such that the reasonable content property is made the children of the element, and that property is made the name of the element. For example:  tsx /// &lt;reference types=&quot;react-pdfmake-reconciler/react-jsx&quot; /&gt; import type { ContentText } from &quot;pdfmake/interfaces&quot;; import { ReactNode } from &quot;react&quot;; // A pdfmake text object is defined like so: const textObj: ContentText = { text: &quot;Hello World!&quot;, // clearly the &quot;children content&quot; of this object bold: true, }; // In react-pdfmake-reconciler, this is defined like so: const textNode: ReactNode = &lt;pdf-text bold&gt;Hello World!&lt;/pdf-text&gt;; tsx /// &lt;reference types=&quot;react-pdfmake-reconciler/react-jsx&quot; /&gt; import type { ContentText } from &quot;pdfmake/interfaces&quot;; import { ReactNode } from &quot;react&quot;; // A pdfmake text object is defined like so: const textObj: ContentText = { text: &quot;Hello World!&quot;, // clearly the &quot;children content&quot; of this object bold: true, }; // In react-pdfmake-reconciler, this is defined like so: const textNode: ReactNode = &lt;pdf-text bold&gt;Hello World!&lt;/pdf-text&gt;;  Here is the complete list of basic elements that require no further explanation:  tsx /// &lt;reference types=&quot;react-pdfmake-reconciler/react-jsx&quot; /&gt; const text = &lt;pdf-text&gt;&lt;/pdf-text&gt;; (property) PdfElements[&quot;pdf-text&quot;]: PdfPropsWithChildren&lt;Omit&lt;ContentText, &quot;text&quot;&gt; | Omit&lt;ContentLink, &quot;text&quot;&gt; | Omit&lt;ContentAnchor, &quot;text&quot;&gt; | Omit&lt;ContentTocItem, &quot;text&quot;&gt;&gt; const columns = &lt;pdf-columns&gt;&lt;/pdf-columns&gt;; (property) PdfElements[&quot;pdf-columns&quot;]: PdfPropsWithChildren&lt;Omit&lt;ContentColumns, &quot;columns&quot;&gt;&gt; const stack = &lt;pdf-stack&gt;&lt;/pdf-stack&gt;; (property) PdfElements[&quot;pdf-stack&quot;]: PdfPropsWithChildren&lt;Omit&lt;ContentStack, &quot;stack&quot;&gt;&gt; const ol = &lt;pdf-ol&gt;&lt;/pdf-ol&gt;; (property) PdfElements[&quot;pdf-ol&quot;]: PdfPropsWithChildren&lt;Omit&lt;ContentOrderedList, &quot;ol&quot;&gt;&gt; const ul = &lt;pdf-ul&gt;&lt;/pdf-ul&gt;; (property) PdfElements[&quot;pdf-ul&quot;]: PdfPropsWithChildren&lt;Omit&lt;ContentUnorderedList, &quot;ul&quot;&gt;&gt; const table = &lt;pdf-table&gt;&lt;/pdf-table&gt;; (property) PdfElements[&quot;pdf-table&quot;]: PdfPropsWithChildren&lt;Omit&lt;ContentTable, &quot;table&quot;&gt;&gt; const pageReference = &lt;pdf-pageReference&gt;ref&lt;/pdf-pageReference&gt;; (property) PdfElements[&quot;pdf-pageReference&quot;]: { children: string; } &amp; Omit&lt;ContentPageReference, &quot;pageReference&quot;&gt; const textReference = &lt;pdf-textReference&gt;ref&lt;/pdf-textReference&gt;; (property) PdfElements[&quot;pdf-textReference&quot;]: { children: string; } &amp; Omit&lt;ContentTextReference, &quot;textReference&quot;&gt; const image = &lt;pdf-image image=&quot;myImage&quot; /&gt;; (property) PdfElements[&quot;pdf-image&quot;]: ContentImage const svg = &lt;pdf-svg svg=&quot;&lt;svg&gt;&lt;/svg&gt;&quot; /&gt;; (property) PdfElements[&quot;pdf-svg&quot;]: ContentSvg const qr = &lt;pdf-qr qr=&quot;hello&quot; /&gt;; (property) PdfElements[&quot;pdf-qr&quot;]: ContentQr const canvas = &lt;pdf-canvas canvas={[]} /&gt;; (property) PdfElements[&quot;pdf-canvas&quot;]: ContentCanvas tsx /// &lt;reference types=&quot;react-pdfmake-reconciler/react-jsx&quot; /&gt; const text = &lt;pdf-text&gt;&lt;/pdf-text&gt;; (property) PdfElements[&quot;pdf-text&quot;]: PdfPropsWithChildren&lt;Omit&lt;ContentText, &quot;text&quot;&gt; | Omit&lt;ContentLink, &quot;text&quot;&gt; | Omit&lt;ContentAnchor, &quot;text&quot;&gt; | Omit&lt;ContentTocItem, &quot;text&quot;&gt;&gt; const columns = &lt;pdf-columns&gt;&lt;/pdf-columns&gt;; (property) PdfElements[&quot;pdf-columns&quot;]: PdfPropsWithChildren&lt;Omit&lt;ContentColumns, &quot;columns&quot;&gt;&gt; const stack = &lt;pdf-stack&gt;&lt;/pdf-stack&gt;; (property) PdfElements[&quot;pdf-stack&quot;]: PdfPropsWithChildren&lt;Omit&lt;ContentStack, &quot;stack&quot;&gt;&gt; const ol = &lt;pdf-ol&gt;&lt;/pdf-ol&gt;; (property) PdfElements[&quot;pdf-ol&quot;]: PdfPropsWithChildren&lt;Omit&lt;ContentOrderedList, &quot;ol&quot;&gt;&gt; const ul = &lt;pdf-ul&gt;&lt;/pdf-ul&gt;; (property) PdfElements[&quot;pdf-ul&quot;]: PdfPropsWithChildren&lt;Omit&lt;ContentUnorderedList, &quot;ul&quot;&gt;&gt; const table = &lt;pdf-table&gt;&lt;/pdf-table&gt;; (property) PdfElements[&quot;pdf-table&quot;]: PdfPropsWithChildren&lt;Omit&lt;ContentTable, &quot;table&quot;&gt;&gt; const pageReference = &lt;pdf-pageReference&gt;ref&lt;/pdf-pageReference&gt;; (property) PdfElements[&quot;pdf-pageReference&quot;]: { children: string; } &amp; Omit&lt;ContentPageReference, &quot;pageReference&quot;&gt; const textReference = &lt;pdf-textReference&gt;ref&lt;/pdf-textReference&gt;; (property) PdfElements[&quot;pdf-textReference&quot;]: { children: string; } &amp; Omit&lt;ContentTextReference, &quot;textReference&quot;&gt; const image = &lt;pdf-image image=&quot;myImage&quot; /&gt;; (property) PdfElements[&quot;pdf-image&quot;]: ContentImage const svg = &lt;pdf-svg svg=&quot;&lt;svg&gt;&lt;/svg&gt;&quot; /&gt;; (property) PdfElements[&quot;pdf-svg&quot;]: ContentSvg const qr = &lt;pdf-qr qr=&quot;hello&quot; /&gt;; (property) PdfElements[&quot;pdf-qr&quot;]: ContentQr const canvas = &lt;pdf-canvas canvas={[]} /&gt;; (property) PdfElements[&quot;pdf-canvas&quot;]: ContentCanvas  ","version":"Next","tagName":"h2"},{"title":"Virtual elements​","type":1,"pageTitle":"Intrinsic elements","url":"/react-pdfmake-reconciler/docs/jsx/intrinsics#virtual-elements","content":" In addition to the above intrinsic elements, there are also these which are categorized as virtual elements. These are, in one way or another, specially treated by the renderer where the content key doesn't match the name, or they do not correlate to a rendered content object.  tsx /// &lt;reference types=&quot;react-pdfmake-reconciler/react-jsx&quot; /&gt; // react-pdf-reconciler only renders into arrays if the `children` contains more than 1 node. // To force returning an array, use this element. const array = &lt;pdf-array&gt;&lt;/pdf-array&gt;; (property) VirtualPdfElements[&quot;pdf-array&quot;]: PdfPropsWithChildren&lt;object&gt; // Use with &lt;pdf-table&gt; const tbody = &lt;pdf-tbody&gt;{[]}&lt;/pdf-tbody&gt;; (property) VirtualPdfElements[&quot;pdf-tbody&quot;]: PdfPropsWithChildren&lt;Omit&lt;Table, &quot;body&quot;&gt;&gt; const cell = ( &lt;pdf-cell&gt; (property) VirtualPdfElements[&quot;pdf-cell&quot;]: PassThroughPdfProps&lt;TableCellProperties&gt; &lt;pdf-text&gt;&lt;/pdf-text&gt; &lt;/pdf-cell&gt; ); // Use with &lt;pdf-columns&gt; const column = ( &lt;pdf-column&gt; (property) VirtualPdfElements[&quot;pdf-column&quot;]: PassThroughPdfProps&lt;ColumnProperties&gt; &lt;pdf-text&gt;&lt;/pdf-text&gt; &lt;/pdf-column&gt; ); // Use with &lt;pdf-ol&gt; or &lt;pdf-ul&gt; const li = ( &lt;pdf-li&gt; (property) VirtualPdfElements[&quot;pdf-li&quot;]: PassThroughPdfProps&lt;OrderedListElementProperties | UnorderedListElementProperties&gt; &lt;pdf-text&gt;&lt;/pdf-text&gt; &lt;/pdf-li&gt; ); // This is treated as a virtual element since the children is define to be the `title` prop. const toc = &lt;pdf-toc&gt;&lt;/pdf-toc&gt;; (property) VirtualPdfElements[&quot;pdf-toc&quot;]: PdfPropsWithChildren&lt;Omit&lt;TableOfContent, &quot;title&quot;&gt;&gt; tsx /// &lt;reference types=&quot;react-pdfmake-reconciler/react-jsx&quot; /&gt; // react-pdf-reconciler only renders into arrays if the `children` contains more than 1 node. // To force returning an array, use this element. const array = &lt;pdf-array&gt;&lt;/pdf-array&gt;; (property) VirtualPdfElements[&quot;pdf-array&quot;]: PdfPropsWithChildren&lt;object&gt; // Use with &lt;pdf-table&gt; const tbody = &lt;pdf-tbody&gt;{[]}&lt;/pdf-tbody&gt;; (property) VirtualPdfElements[&quot;pdf-tbody&quot;]: PdfPropsWithChildren&lt;Omit&lt;Table, &quot;body&quot;&gt;&gt; const cell = ( &lt;pdf-cell&gt; (property) VirtualPdfElements[&quot;pdf-cell&quot;]: PassThroughPdfProps&lt;TableCellProperties&gt; &lt;pdf-text&gt;&lt;/pdf-text&gt; &lt;/pdf-cell&gt; ); // Use with &lt;pdf-columns&gt; const column = ( &lt;pdf-column&gt; (property) VirtualPdfElements[&quot;pdf-column&quot;]: PassThroughPdfProps&lt;ColumnProperties&gt; &lt;pdf-text&gt;&lt;/pdf-text&gt; &lt;/pdf-column&gt; ); // Use with &lt;pdf-ol&gt; or &lt;pdf-ul&gt; const li = ( &lt;pdf-li&gt; (property) VirtualPdfElements[&quot;pdf-li&quot;]: PassThroughPdfProps&lt;OrderedListElementProperties | UnorderedListElementProperties&gt; &lt;pdf-text&gt;&lt;/pdf-text&gt; &lt;/pdf-li&gt; ); // This is treated as a virtual element since the children is define to be the `title` prop. const toc = &lt;pdf-toc&gt;&lt;/pdf-toc&gt;; (property) VirtualPdfElements[&quot;pdf-toc&quot;]: PdfPropsWithChildren&lt;Omit&lt;TableOfContent, &quot;title&quot;&gt;&gt; ","version":"Next","tagName":"h2"},{"title":"PdfPreview","type":0,"sectionRef":"#","url":"/react-pdfmake-reconciler/docs/jsx/util-components/pdf-preview","content":"","keywords":"","version":"Next"},{"title":"Props​","type":1,"pageTitle":"PdfPreview","url":"/react-pdfmake-reconciler/docs/jsx/util-components/pdf-preview#props","content":"   ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"PdfPreview","url":"/react-pdfmake-reconciler/docs/jsx/util-components/pdf-preview#example","content":" tsx import { FC, StrictMode } from &quot;react&quot;; import { PdfPreview } from &quot;react-pdfmake-reconciler&quot;; export const App: FC = () =&gt; ( &lt;div&gt; &lt;PdfPreview&gt; {/* Optional */} &lt;StrictMode&gt; {/* Only use components that resolves to pdf-* components from here on out. DOM elements won't work. */} &lt;pdf-text&gt;Hello World!&lt;/pdf-text&gt; &lt;/StrictMode&gt; &lt;/PdfPreview&gt; &lt;/div&gt; ); tsx import { FC, StrictMode } from &quot;react&quot;; import { PdfPreview } from &quot;react-pdfmake-reconciler&quot;; export const App: FC = () =&gt; ( &lt;div&gt; &lt;PdfPreview&gt; {/* Optional */} &lt;StrictMode&gt; {/* Only use components that resolves to pdf-* components from here on out. DOM elements won't work. */} &lt;pdf-text&gt;Hello World!&lt;/pdf-text&gt; &lt;/StrictMode&gt; &lt;/PdfPreview&gt; &lt;/div&gt; );  The PDF is then mounted onto your React app as an iframe. This only works well when you are debugging your PDF setup on a desktop browser. Try opening your React Development Tools, you should see the PDF section being mounted at the very bottom of the tree.  You should see something like this:  PdfContext.Provider └ Y ⬅️ The PdfTable component ├ Fragment key=&quot;0-0&quot; ├ Fragment key=&quot;0-1&quot; ├ Fragment key=&quot;1-0&quot; └ Fragment key=&quot;1-1&quot; PdfContext.Provider └ Y ⬅️ The PdfTable component ├ Fragment key=&quot;0-0&quot; ├ Fragment key=&quot;0-1&quot; ├ Fragment key=&quot;1-0&quot; └ Fragment key=&quot;1-1&quot;    ","version":"Next","tagName":"h2"},{"title":"Regarding React Context​","type":1,"pageTitle":"PdfPreview","url":"/react-pdfmake-reconciler/docs/jsx/util-components/pdf-preview#regarding-react-context","content":" React Context does not penetrate through &lt;PdfPreview&gt;. If you need to pass in values within your Context, consider reapplying the Context inside.  tsx // @filename: App.tsx import React, { FC } from &quot;react&quot;; import { MyContext } from &quot;./MyContext&quot;; import { PreviewWrapper } from &quot;./PreviewWrapper&quot;; export const App: FC = () =&gt; ( &lt;div&gt; {/* Normal app Context */} &lt;MyContext.Provider value={{ bestSnack: &quot;chips&quot; }}&gt; &lt;PreviewWrapper /&gt; &lt;/MyContext.Provider&gt; &lt;/div&gt; ); // @filename: PreviewWrapper.tsx import React, { FC, StrictMode, useContext } from &quot;react&quot;; import { PdfPreview } from &quot;react-pdfmake-reconciler&quot;; import { MyContext } from &quot;./MyContext&quot;; import { PdfSnack } from &quot;./PdfSnack&quot;; export const PreviewWrapper: FC = () =&gt; { const myContext = useContext(MyContext); return ( &lt;PdfPreview&gt; &lt;StrictMode&gt; {/* Forward needed Context for PDF rendering */} &lt;MyContext.Provider value={myContext}&gt; &lt;PdfSnack /&gt; &lt;/MyContext.Provider&gt; &lt;/StrictMode&gt; &lt;/PdfPreview&gt; ); }; // @filename: PdfSnack.tsx import React, { FC, useContext } from &quot;react&quot;; import { MyContext } from &quot;./MyContext&quot;; export const PdfSnack: FC = () =&gt; { const { bestSnack } = useContext(MyContext); return &lt;pdf-text&gt;{bestSnack}&lt;/pdf-text&gt;; }; // @filename: MyContext.tsx import { createContext, useContext } from &quot;react&quot;; interface MyContextType { bestSnack: string | null; } export const MyContext = createContext&lt;MyContextType&gt;({ bestSnack: null, }); tsx // @filename: App.tsx import React, { FC } from &quot;react&quot;; import { MyContext } from &quot;./MyContext&quot;; import { PreviewWrapper } from &quot;./PreviewWrapper&quot;; export const App: FC = () =&gt; ( &lt;div&gt; {/* Normal app Context */} &lt;MyContext.Provider value={{ bestSnack: &quot;chips&quot; }}&gt; &lt;PreviewWrapper /&gt; &lt;/MyContext.Provider&gt; &lt;/div&gt; ); // @filename: PreviewWrapper.tsx import React, { FC, StrictMode, useContext } from &quot;react&quot;; import { PdfPreview } from &quot;react-pdfmake-reconciler&quot;; import { MyContext } from &quot;./MyContext&quot;; import { PdfSnack } from &quot;./PdfSnack&quot;; export const PreviewWrapper: FC = () =&gt; { const myContext = useContext(MyContext); return ( &lt;PdfPreview&gt; &lt;StrictMode&gt; {/* Forward needed Context for PDF rendering */} &lt;MyContext.Provider value={myContext}&gt; &lt;PdfSnack /&gt; &lt;/MyContext.Provider&gt; &lt;/StrictMode&gt; &lt;/PdfPreview&gt; ); }; // @filename: PdfSnack.tsx import React, { FC, useContext } from &quot;react&quot;; import { MyContext } from &quot;./MyContext&quot;; export const PdfSnack: FC = () =&gt; { const { bestSnack } = useContext(MyContext); return &lt;pdf-text&gt;{bestSnack}&lt;/pdf-text&gt;; }; // @filename: MyContext.tsx import { createContext, useContext } from &quot;react&quot;; interface MyContextType { bestSnack: string | null; } export const MyContext = createContext&lt;MyContextType&gt;({ bestSnack: null, }); ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}